{
  "file_path": "selected_100_files\\large_500_1000\\065_class-wp-image-editor-imagick.php",
  "rector_analysis": {
    "php_version_changes": 5,
    "rules_triggered": [
      "Rector\\Php54\\Rector\\Array_\\LongArrayToShortArrayRector",
      "Rector\\Php71\\Rector\\List_\\ListToArrayDestructRector",
      "Rector\\Php80\\Rector\\Catch_\\RemoveUnusedVariableInCatchRector",
      "Rector\\Php81\\Rector\\Array_\\FirstClassCallableRector",
      "Rector\\Php81\\Rector\\FuncCall\\NullToStrictStringFuncCallArgRector"
    ],
    "changes_by_php_version": {
      "php_54": 1,
      "php_71": 1,
      "php_80": 1,
      "php_81": 2
    },
    "has_diff": true,
    "diff_line_count": 129
  },
  "analysis_metadata": {
    "rector_version": "2.1.0",
    "analysis_date": "2025-08-31T05:21:16.482151",
    "file_size_kb": 13.3,
    "analysis_type": "version_specific_only"
  },
  "raw_rector_output": {
    "totals": {
      "changed_files": 1,
      "errors": 0
    },
    "file_diffs": [
      {
        "file": "selected_100_files/large_500_1000/065_class-wp-image-editor-imagick.php",
        "diff": "--- Original\n+++ New\n@@ -37,7 +37,7 @@\n \t *\n \t * @return boolean\n \t */\n-\tpublic static function test( $args = array() ) {\n+\tpublic static function test( $args = [] ) {\n \n \t\t// First, test Imagick's extension and classes.\n \t\tif ( ! extension_loaded( 'imagick' ) || ! class_exists( 'Imagick' ) || ! class_exists( 'ImagickPixel' ) )\n@@ -46,7 +46,7 @@\n \t\tif ( version_compare( phpversion( 'imagick' ), '2.2.0', '<' ) )\n \t\t\treturn false;\n \n-\t\t$required_methods = array(\n+\t\t$required_methods = [\n \t\t\t'clear',\n \t\t\t'destroy',\n \t\t\t'valid',\n@@ -64,7 +64,7 @@\n \t\t\t'rotateimage',\n \t\t\t'flipimage',\n \t\t\t'flopimage',\n-\t\t);\n+\t\t];\n \n \t\t// Now, test for deep requirements within Imagick.\n \t\tif ( ! defined( 'imagick::COMPRESSION_JPEG' ) )\n@@ -99,7 +99,7 @@\n \t\ttry {\n \t\t\treturn ( (bool) @Imagick::queryFormats( $imagick_extension ) );\n \t\t}\n-\t\tcatch ( Exception $e ) {\n+\t\tcatch ( Exception ) {\n \t\t\treturn false;\n \t\t}\n \t}\n@@ -130,7 +130,7 @@\n \t\t\t\treturn new WP_Error( 'invalid_image', __('File is not an image.'), $this->file);\n \n \t\t\t// Select the first frame to handle animated images properly\n-\t\t\tif ( is_callable( array( $this->image, 'setIteratorIndex' ) ) )\n+\t\t\tif ( is_callable( $this->image->setIteratorIndex(...) ) )\n \t\t\t\t$this->image->setIteratorIndex(0);\n \n \t\t\t$this->mime_type = $this->get_mime_type( $this->image->getImageFormat() );\n@@ -194,7 +194,7 @@\n \t\t\ttry {\n \t\t\t\t$size = $this->image->getImageGeometry();\n \t\t\t}\n-\t\t\tcatch ( Exception $e ) {\n+\t\t\tcatch ( Exception ) {\n \t\t\t\treturn new WP_Error( 'invalid_image', __('Could not read image size'), $this->file );\n \t\t\t}\n \t\t}\n@@ -230,7 +230,7 @@\n \t\t$dims = image_resize_dimensions( $this->size['width'], $this->size['height'], $max_w, $max_h, $crop );\n \t\tif ( ! $dims )\n \t\t\treturn new WP_Error( 'error_getting_dimensions', __('Could not calculate resized image dimensions') );\n-\t\tlist( $dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h ) = $dims;\n+\t\t[$dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h] = $dims;\n \n \t\tif ( $crop ) {\n \t\t\treturn $this->crop( $src_x, $src_y, $src_w, $src_h, $dst_w, $dst_h );\n@@ -272,7 +272,7 @@\n \t * @return array An array of resized images' metadata by size.\n \t */\n \tpublic function multi_resize( $sizes ) {\n-\t\t$metadata = array();\n+\t\t$metadata = [];\n \t\t$orig_size = $this->size;\n \t\t$orig_image = $this->image->getImage();\n \n@@ -445,7 +445,7 @@\n \t}\n \n \tprotected function _save( $image, $filename = null, $mime_type = null ) {\n-\t\tlist( $filename, $extension, $mime_type ) = $this->get_output_format( $filename, $mime_type );\n+\t\t[$filename, $extension, $mime_type] = $this->get_output_format( $filename, $mime_type );\n \n \t\tif ( ! $filename )\n \t\t\t$filename = $this->generate_filename( null, null, $extension );\n@@ -455,7 +455,7 @@\n \t\t\t$orig_format = $this->image->getImageFormat();\n \n \t\t\t$this->image->setImageFormat( strtoupper( $this->get_extension( $mime_type ) ) );\n-\t\t\t$this->make_image( $filename, array( $image, 'writeImage' ), array( $filename ) );\n+\t\t\t$this->make_image( $filename, [ $image, 'writeImage' ], [ $filename ] );\n \n \t\t\t// Reset original Format\n \t\t\t$this->image->setImageFormat( $orig_format );\n@@ -465,18 +465,18 @@\n \t\t}\n \n \t\t// Set correct file permissions\n-\t\t$stat = stat( dirname( $filename ) );\n+\t\t$stat = stat( dirname( (string) $filename ) );\n \t\t$perms = $stat['mode'] & 0000666; //same permissions as parent folder, strip off the executable bits\n \t\t@ chmod( $filename, $perms );\n \n \t\t/** This filter is documented in wp-includes/class-wp-image-editor-gd.php */\n-\t\treturn array(\n+\t\treturn [\n \t\t\t'path'      => $filename,\n \t\t\t'file'      => wp_basename( apply_filters( 'image_make_intermediate_size', $filename ) ),\n \t\t\t'width'     => $this->size['width'],\n \t\t\t'height'    => $this->size['height'],\n \t\t\t'mime-type' => $mime_type,\n-\t\t);\n+\t\t];\n \t}\n \n \t/**\n@@ -489,11 +489,11 @@\n \t * @return boolean|WP_Error\n \t */\n \tpublic function stream( $mime_type = null ) {\n-\t\tlist( $filename, $extension, $mime_type ) = $this->get_output_format( null, $mime_type );\n+\t\t[$filename, $extension, $mime_type] = $this->get_output_format( null, $mime_type );\n \n \t\ttry {\n \t\t\t// Temporarily change format for stream\n-\t\t\t$this->image->setImageFormat( strtoupper( $extension ) );\n+\t\t\t$this->image->setImageFormat( strtoupper( (string) $extension ) );\n \n \t\t\t// Output stream of image content\n \t\t\theader( \"Content-Type: $mime_type\" );\n",
        "applied_rectors": [
          "Rector\\Php54\\Rector\\Array_\\LongArrayToShortArrayRector",
          "Rector\\Php71\\Rector\\List_\\ListToArrayDestructRector",
          "Rector\\Php80\\Rector\\Catch_\\RemoveUnusedVariableInCatchRector",
          "Rector\\Php81\\Rector\\Array_\\FirstClassCallableRector",
          "Rector\\Php81\\Rector\\FuncCall\\NullToStrictStringFuncCallArgRector"
        ]
      }
    ],
    "changed_files": [
      "selected_100_files/large_500_1000/065_class-wp-image-editor-imagick.php"
    ]
  }
}