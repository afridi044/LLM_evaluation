{
  "file_path": "selected_100_files\\extra_large_1000_plus\\014_module.tag.id3v2.php",
  "rector_analysis": {
    "php_version_changes": 9,
    "rules_triggered": [
      "Rector\\Php54\\Rector\\Array_\\LongArrayToShortArrayRector",
      "Rector\\Php70\\Rector\\Ternary\\TernaryToNullCoalescingRector",
      "Rector\\Php71\\Rector\\List_\\ListToArrayDestructRector",
      "Rector\\Php74\\Rector\\ArrayDimFetch\\CurlyToSquareBracketArrayStringRector",
      "Rector\\Php80\\Rector\\Identical\\StrStartsWithRector",
      "Rector\\Php80\\Rector\\NotIdentical\\StrContainsRector",
      "Rector\\Php80\\Rector\\Switch_\\ChangeSwitchToMatchRector",
      "Rector\\Php81\\Rector\\FuncCall\\NullToStrictStringFuncCallArgRector",
      "Rector\\Php82\\Rector\\FuncCall\\Utf8DecodeEncodeToMbConvertEncodingRector"
    ],
    "changes_by_php_version": {
      "php_54": 1,
      "php_70": 1,
      "php_71": 1,
      "php_74": 1,
      "php_80": 3,
      "php_81": 1,
      "php_82": 1
    },
    "has_diff": true,
    "diff_line_count": 1854
  },
  "analysis_metadata": {
    "rector_version": "2.1.0",
    "analysis_date": "2025-08-31T05:18:37.943051",
    "file_size_kb": 131.0,
    "analysis_type": "version_specific_only"
  },
  "raw_rector_output": {
    "totals": {
      "changed_files": 1,
      "errors": 0
    },
    "file_diffs": [
      {
        "file": "selected_100_files/extra_large_1000_plus/014_module.tag.id3v2.php",
        "diff": "--- Original\n+++ New\n@@ -47,16 +47,16 @@\n \t\t// shortcuts\n \t\t$info['id3v2']['header'] = true;\n \t\t$thisfile_id3v2                  = &$info['id3v2'];\n-\t\t$thisfile_id3v2['flags']         =  array();\n+\t\t$thisfile_id3v2['flags']         =  [];\n \t\t$thisfile_id3v2_flags            = &$thisfile_id3v2['flags'];\n \n \n \t\tfseek($this->getid3->fp, $this->StartingOffset, SEEK_SET);\n \t\t$header = fread($this->getid3->fp, 10);\n-\t\tif (substr($header, 0, 3) == 'ID3'  &&  strlen($header) == 10) {\n+\t\tif (str_starts_with((string) $header, 'ID3')  &&  strlen((string) $header) == 10) {\n \n-\t\t\t$thisfile_id3v2['majorversion'] = ord($header{3});\n-\t\t\t$thisfile_id3v2['minorversion'] = ord($header{4});\n+\t\t\t$thisfile_id3v2['majorversion'] = ord($header[3]);\n+\t\t\t$thisfile_id3v2['minorversion'] = ord($header[4]);\n \n \t\t\t// shortcut\n \t\t\t$id3v2_majorversion = &$thisfile_id3v2['majorversion'];\n@@ -75,7 +75,7 @@\n \n \t\t}\n \n-\t\t$id3_flags = ord($header{5});\n+\t\t$id3_flags = ord($header[5]);\n \t\tswitch ($id3v2_majorversion) {\n \t\t\tcase 2:\n \t\t\t\t// %ab000000 in v2.2\n@@ -99,7 +99,7 @@\n \t\t\t\tbreak;\n \t\t}\n \n-\t\t$thisfile_id3v2['headerlength'] = getid3_lib::BigEndian2Int(substr($header, 6, 4), 1) + 10; // length of ID3v2 tag in 10-byte header doesn't include 10-byte header length\n+\t\t$thisfile_id3v2['headerlength'] = getid3_lib::BigEndian2Int(substr((string) $header, 6, 4), 1) + 10; // length of ID3v2 tag in 10-byte header doesn't include 10-byte header length\n \n \t\t$thisfile_id3v2['tag_offset_start'] = $this->StartingOffset;\n \t\t$thisfile_id3v2['tag_offset_end']   = $thisfile_id3v2['tag_offset_start'] + $thisfile_id3v2['headerlength'];\n@@ -161,20 +161,20 @@\n \t\t\t\t\t//     x - CRC data present\n \t\t\t\t\t//Size of padding       $xx xx xx xx\n \n-\t\t\t\t\t$thisfile_id3v2['exthead']['length'] = getid3_lib::BigEndian2Int(substr($framedata, $extended_header_offset, 4), 0);\n+\t\t\t\t\t$thisfile_id3v2['exthead']['length'] = getid3_lib::BigEndian2Int(substr((string) $framedata, $extended_header_offset, 4), 0);\n \t\t\t\t\t$extended_header_offset += 4;\n \n \t\t\t\t\t$thisfile_id3v2['exthead']['flag_bytes'] = 2;\n-\t\t\t\t\t$thisfile_id3v2['exthead']['flag_raw'] = getid3_lib::BigEndian2Int(substr($framedata, $extended_header_offset, $thisfile_id3v2['exthead']['flag_bytes']));\n+\t\t\t\t\t$thisfile_id3v2['exthead']['flag_raw'] = getid3_lib::BigEndian2Int(substr((string) $framedata, $extended_header_offset, $thisfile_id3v2['exthead']['flag_bytes']));\n \t\t\t\t\t$extended_header_offset += $thisfile_id3v2['exthead']['flag_bytes'];\n \n \t\t\t\t\t$thisfile_id3v2['exthead']['flags']['crc'] = (bool) ($thisfile_id3v2['exthead']['flag_raw'] & 0x8000);\n \n-\t\t\t\t\t$thisfile_id3v2['exthead']['padding_size'] = getid3_lib::BigEndian2Int(substr($framedata, $extended_header_offset, 4));\n+\t\t\t\t\t$thisfile_id3v2['exthead']['padding_size'] = getid3_lib::BigEndian2Int(substr((string) $framedata, $extended_header_offset, 4));\n \t\t\t\t\t$extended_header_offset += 4;\n \n \t\t\t\t\tif ($thisfile_id3v2['exthead']['flags']['crc']) {\n-\t\t\t\t\t\t$thisfile_id3v2['exthead']['flag_data']['crc'] = getid3_lib::BigEndian2Int(substr($framedata, $extended_header_offset, 4));\n+\t\t\t\t\t\t$thisfile_id3v2['exthead']['flag_data']['crc'] = getid3_lib::BigEndian2Int(substr((string) $framedata, $extended_header_offset, 4));\n \t\t\t\t\t\t$extended_header_offset += 4;\n \t\t\t\t\t}\n \t\t\t\t\t$extended_header_offset += $thisfile_id3v2['exthead']['padding_size'];\n@@ -194,13 +194,13 @@\n \t\t\t\t\t//     d - Tag restrictions\n \t\t\t\t\t//         Flag data length       $01\n \n-\t\t\t\t\t$thisfile_id3v2['exthead']['length'] = getid3_lib::BigEndian2Int(substr($framedata, $extended_header_offset, 4), true);\n+\t\t\t\t\t$thisfile_id3v2['exthead']['length'] = getid3_lib::BigEndian2Int(substr((string) $framedata, $extended_header_offset, 4), true);\n \t\t\t\t\t$extended_header_offset += 4;\n \n-\t\t\t\t\t$thisfile_id3v2['exthead']['flag_bytes'] = getid3_lib::BigEndian2Int(substr($framedata, $extended_header_offset, 1)); // should always be 1\n+\t\t\t\t\t$thisfile_id3v2['exthead']['flag_bytes'] = getid3_lib::BigEndian2Int(substr((string) $framedata, $extended_header_offset, 1)); // should always be 1\n \t\t\t\t\t$extended_header_offset += 1;\n \n-\t\t\t\t\t$thisfile_id3v2['exthead']['flag_raw'] = getid3_lib::BigEndian2Int(substr($framedata, $extended_header_offset, $thisfile_id3v2['exthead']['flag_bytes']));\n+\t\t\t\t\t$thisfile_id3v2['exthead']['flag_raw'] = getid3_lib::BigEndian2Int(substr((string) $framedata, $extended_header_offset, $thisfile_id3v2['exthead']['flag_bytes']));\n \t\t\t\t\t$extended_header_offset += $thisfile_id3v2['exthead']['flag_bytes'];\n \n \t\t\t\t\t$thisfile_id3v2['exthead']['flags']['update']       = (bool) ($thisfile_id3v2['exthead']['flag_raw'] & 0x40);\n@@ -208,23 +208,23 @@\n \t\t\t\t\t$thisfile_id3v2['exthead']['flags']['restrictions'] = (bool) ($thisfile_id3v2['exthead']['flag_raw'] & 0x10);\n \n \t\t\t\t\tif ($thisfile_id3v2['exthead']['flags']['update']) {\n-\t\t\t\t\t\t$ext_header_chunk_length = getid3_lib::BigEndian2Int(substr($framedata, $extended_header_offset, 1)); // should be 0\n+\t\t\t\t\t\t$ext_header_chunk_length = getid3_lib::BigEndian2Int(substr((string) $framedata, $extended_header_offset, 1)); // should be 0\n \t\t\t\t\t\t$extended_header_offset += 1;\n \t\t\t\t\t}\n \n \t\t\t\t\tif ($thisfile_id3v2['exthead']['flags']['crc']) {\n-\t\t\t\t\t\t$ext_header_chunk_length = getid3_lib::BigEndian2Int(substr($framedata, $extended_header_offset, 1)); // should be 5\n+\t\t\t\t\t\t$ext_header_chunk_length = getid3_lib::BigEndian2Int(substr((string) $framedata, $extended_header_offset, 1)); // should be 5\n \t\t\t\t\t\t$extended_header_offset += 1;\n-\t\t\t\t\t\t$thisfile_id3v2['exthead']['flag_data']['crc'] = getid3_lib::BigEndian2Int(substr($framedata, $extended_header_offset, $ext_header_chunk_length), true, false);\n+\t\t\t\t\t\t$thisfile_id3v2['exthead']['flag_data']['crc'] = getid3_lib::BigEndian2Int(substr((string) $framedata, $extended_header_offset, $ext_header_chunk_length), true, false);\n \t\t\t\t\t\t$extended_header_offset += $ext_header_chunk_length;\n \t\t\t\t\t}\n \n \t\t\t\t\tif ($thisfile_id3v2['exthead']['flags']['restrictions']) {\n-\t\t\t\t\t\t$ext_header_chunk_length = getid3_lib::BigEndian2Int(substr($framedata, $extended_header_offset, 1)); // should be 1\n+\t\t\t\t\t\t$ext_header_chunk_length = getid3_lib::BigEndian2Int(substr((string) $framedata, $extended_header_offset, 1)); // should be 1\n \t\t\t\t\t\t$extended_header_offset += 1;\n \n \t\t\t\t\t\t// %ppqrrstt\n-\t\t\t\t\t\t$restrictions_raw = getid3_lib::BigEndian2Int(substr($framedata, $extended_header_offset, 1));\n+\t\t\t\t\t\t$restrictions_raw = getid3_lib::BigEndian2Int(substr((string) $framedata, $extended_header_offset, 1));\n \t\t\t\t\t\t$extended_header_offset += 1;\n \t\t\t\t\t\t$thisfile_id3v2['exthead']['flags']['restrictions']['tagsize']  = ($restrictions_raw & 0xC0) >> 6; // p - Tag size restrictions\n \t\t\t\t\t\t$thisfile_id3v2['exthead']['flags']['restrictions']['textenc']  = ($restrictions_raw & 0x20) >> 5; // q - Text encoding restrictions\n@@ -245,18 +245,18 @@\n \t\t\t\t}\n \n \t\t\t\t$framedataoffset += $extended_header_offset;\n-\t\t\t\t$framedata = substr($framedata, $extended_header_offset);\n+\t\t\t\t$framedata = substr((string) $framedata, $extended_header_offset);\n \t\t\t} // end extended header\n \n \n-\t\t\twhile (isset($framedata) && (strlen($framedata) > 0)) { // cycle through until no more frame data is left to parse\n-\t\t\t\tif (strlen($framedata) <= $this->ID3v2HeaderLength($id3v2_majorversion)) {\n+\t\t\twhile (isset($framedata) && (strlen((string) $framedata) > 0)) { // cycle through until no more frame data is left to parse\n+\t\t\t\tif (strlen((string) $framedata) <= $this->ID3v2HeaderLength($id3v2_majorversion)) {\n \t\t\t\t\t// insufficient room left in ID3v2 header for actual data - must be padding\n \t\t\t\t\t$thisfile_id3v2['padding']['start']  = $framedataoffset;\n-\t\t\t\t\t$thisfile_id3v2['padding']['length'] = strlen($framedata);\n+\t\t\t\t\t$thisfile_id3v2['padding']['length'] = strlen((string) $framedata);\n \t\t\t\t\t$thisfile_id3v2['padding']['valid']  = true;\n \t\t\t\t\tfor ($i = 0; $i < $thisfile_id3v2['padding']['length']; $i++) {\n-\t\t\t\t\t\tif ($framedata{$i} != \"\\x00\") {\n+\t\t\t\t\t\tif ($framedata[$i] != \"\\x00\") {\n \t\t\t\t\t\t\t$thisfile_id3v2['padding']['valid'] = false;\n \t\t\t\t\t\t\t$thisfile_id3v2['padding']['errorpos'] = $thisfile_id3v2['padding']['start'] + $i;\n \t\t\t\t\t\t\t$info['warning'][] = 'Invalid ID3v2 padding found at offset '.$thisfile_id3v2['padding']['errorpos'].' (the remaining '.($thisfile_id3v2['padding']['length'] - $i).' bytes are considered invalid)';\n@@ -270,10 +270,10 @@\n \t\t\t\t\t// Size      $xx xx xx (24-bit integer)\n \t\t\t\t\t// Flags     $xx xx\n \n-\t\t\t\t\t$frame_header = substr($framedata, 0, 6); // take next 6 bytes for header\n-\t\t\t\t\t$framedata    = substr($framedata, 6);    // and leave the rest in $framedata\n-\t\t\t\t\t$frame_name   = substr($frame_header, 0, 3);\n-\t\t\t\t\t$frame_size   = getid3_lib::BigEndian2Int(substr($frame_header, 3, 3), 0);\n+\t\t\t\t\t$frame_header = substr((string) $framedata, 0, 6); // take next 6 bytes for header\n+\t\t\t\t\t$framedata    = substr((string) $framedata, 6);    // and leave the rest in $framedata\n+\t\t\t\t\t$frame_name   = substr((string) $frame_header, 0, 3);\n+\t\t\t\t\t$frame_size   = getid3_lib::BigEndian2Int(substr((string) $frame_header, 3, 3), 0);\n \t\t\t\t\t$frame_flags  = 0; // not used for anything in ID3v2.2, just set to avoid E_NOTICEs\n \n \t\t\t\t} elseif ($id3v2_majorversion > 2) {\n@@ -282,31 +282,31 @@\n \t\t\t\t\t// Size      $xx xx xx xx (32-bit integer in v2.3, 28-bit synchsafe in v2.4+)\n \t\t\t\t\t// Flags     $xx xx\n \n-\t\t\t\t\t$frame_header = substr($framedata, 0, 10); // take next 10 bytes for header\n-\t\t\t\t\t$framedata    = substr($framedata, 10);    // and leave the rest in $framedata\n+\t\t\t\t\t$frame_header = substr((string) $framedata, 0, 10); // take next 10 bytes for header\n+\t\t\t\t\t$framedata    = substr((string) $framedata, 10);    // and leave the rest in $framedata\n \n-\t\t\t\t\t$frame_name = substr($frame_header, 0, 4);\n+\t\t\t\t\t$frame_name = substr((string) $frame_header, 0, 4);\n \t\t\t\t\tif ($id3v2_majorversion == 3) {\n-\t\t\t\t\t\t$frame_size = getid3_lib::BigEndian2Int(substr($frame_header, 4, 4), 0); // 32-bit integer\n+\t\t\t\t\t\t$frame_size = getid3_lib::BigEndian2Int(substr((string) $frame_header, 4, 4), 0); // 32-bit integer\n \t\t\t\t\t} else { // ID3v2.4+\n-\t\t\t\t\t\t$frame_size = getid3_lib::BigEndian2Int(substr($frame_header, 4, 4), 1); // 32-bit synchsafe integer (28-bit value)\n+\t\t\t\t\t\t$frame_size = getid3_lib::BigEndian2Int(substr((string) $frame_header, 4, 4), 1); // 32-bit synchsafe integer (28-bit value)\n \t\t\t\t\t}\n \n-\t\t\t\t\tif ($frame_size < (strlen($framedata) + 4)) {\n-\t\t\t\t\t\t$nextFrameID = substr($framedata, $frame_size, 4);\n+\t\t\t\t\tif ($frame_size < (strlen((string) $framedata) + 4)) {\n+\t\t\t\t\t\t$nextFrameID = substr((string) $framedata, $frame_size, 4);\n \t\t\t\t\t\tif ($this->IsValidID3v2FrameName($nextFrameID, $id3v2_majorversion)) {\n \t\t\t\t\t\t\t// next frame is OK\n \t\t\t\t\t\t} elseif (($frame_name == \"\\x00\".'MP3') || ($frame_name == \"\\x00\\x00\".'MP') || ($frame_name == ' MP3') || ($frame_name == 'MP3e')) {\n \t\t\t\t\t\t\t// MP3ext known broken frames - \"ok\" for the purposes of this test\n-\t\t\t\t\t\t} elseif (($id3v2_majorversion == 4) && ($this->IsValidID3v2FrameName(substr($framedata, getid3_lib::BigEndian2Int(substr($frame_header, 4, 4), 0), 4), 3))) {\n+\t\t\t\t\t\t} elseif (($id3v2_majorversion == 4) && ($this->IsValidID3v2FrameName(substr((string) $framedata, getid3_lib::BigEndian2Int(substr((string) $frame_header, 4, 4), 0), 4), 3))) {\n \t\t\t\t\t\t\t$info['warning'][] = 'ID3v2 tag written as ID3v2.4, but with non-synchsafe integers (ID3v2.3 style). Older versions of (Helium2; iTunes) are known culprits of this. Tag has been parsed as ID3v2.3';\n \t\t\t\t\t\t\t$id3v2_majorversion = 3;\n-\t\t\t\t\t\t\t$frame_size = getid3_lib::BigEndian2Int(substr($frame_header, 4, 4), 0); // 32-bit integer\n+\t\t\t\t\t\t\t$frame_size = getid3_lib::BigEndian2Int(substr((string) $frame_header, 4, 4), 0); // 32-bit integer\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \n \n-\t\t\t\t\t$frame_flags = getid3_lib::BigEndian2Int(substr($frame_header, 8, 2));\n+\t\t\t\t\t$frame_flags = getid3_lib::BigEndian2Int(substr((string) $frame_header, 8, 2));\n \t\t\t\t}\n \n \t\t\t\tif ((($id3v2_majorversion == 2) && ($frame_name == \"\\x00\\x00\\x00\")) || ($frame_name == \"\\x00\\x00\\x00\\x00\")) {\n@@ -313,12 +313,12 @@\n \t\t\t\t\t// padding encountered\n \n \t\t\t\t\t$thisfile_id3v2['padding']['start']  = $framedataoffset;\n-\t\t\t\t\t$thisfile_id3v2['padding']['length'] = strlen($frame_header) + strlen($framedata);\n+\t\t\t\t\t$thisfile_id3v2['padding']['length'] = strlen((string) $frame_header) + strlen((string) $framedata);\n \t\t\t\t\t$thisfile_id3v2['padding']['valid']  = true;\n \n-\t\t\t\t\t$len = strlen($framedata);\n+\t\t\t\t\t$len = strlen((string) $framedata);\n \t\t\t\t\tfor ($i = 0; $i < $len; $i++) {\n-\t\t\t\t\t\tif ($framedata{$i} != \"\\x00\") {\n+\t\t\t\t\t\tif ($framedata[$i] != \"\\x00\") {\n \t\t\t\t\t\t\t$thisfile_id3v2['padding']['valid'] = false;\n \t\t\t\t\t\t\t$thisfile_id3v2['padding']['errorpos'] = $thisfile_id3v2['padding']['start'] + $i;\n \t\t\t\t\t\t\t$info['warning'][] = 'Invalid ID3v2 padding found at offset '.$thisfile_id3v2['padding']['errorpos'].' (the remaining '.($thisfile_id3v2['padding']['length'] - $i).' bytes are considered invalid)';\n@@ -332,12 +332,12 @@\n \t\t\t\t\t$info['warning'][] = 'error parsing \"'.$frame_name.'\" ('.$framedataoffset.' bytes into the ID3v2.'.$id3v2_majorversion.' tag). (ERROR: IsValidID3v2FrameName(\"'.str_replace(\"\\x00\", ' ', $frame_name).'\", '.$id3v2_majorversion.'))). [Note: this particular error has been known to happen with tags edited by iTunes (versions \"X v2.0.3\", \"v3.0.1\" are known-guilty, probably others too)]';\n \t\t\t\t\t$frame_name = 'COMM';\n \t\t\t\t}\n-\t\t\t\tif (($frame_size <= strlen($framedata)) && ($this->IsValidID3v2FrameName($frame_name, $id3v2_majorversion))) {\n+\t\t\t\tif (($frame_size <= strlen((string) $framedata)) && ($this->IsValidID3v2FrameName($frame_name, $id3v2_majorversion))) {\n \n \t\t\t\t\tunset($parsedFrame);\n \t\t\t\t\t$parsedFrame['frame_name']      = $frame_name;\n \t\t\t\t\t$parsedFrame['frame_flags_raw'] = $frame_flags;\n-\t\t\t\t\t$parsedFrame['data']            = substr($framedata, 0, $frame_size);\n+\t\t\t\t\t$parsedFrame['data']            = substr((string) $framedata, 0, $frame_size);\n \t\t\t\t\t$parsedFrame['datalength']      = getid3_lib::CastAsInt($frame_size);\n \t\t\t\t\t$parsedFrame['dataoffset']      = $framedataoffset;\n \n@@ -344,16 +344,16 @@\n \t\t\t\t\t$this->ParseID3v2Frame($parsedFrame);\n \t\t\t\t\t$thisfile_id3v2[$frame_name][] = $parsedFrame;\n \n-\t\t\t\t\t$framedata = substr($framedata, $frame_size);\n+\t\t\t\t\t$framedata = substr((string) $framedata, $frame_size);\n \n \t\t\t\t} else { // invalid frame length or FrameID\n \n-\t\t\t\t\tif ($frame_size <= strlen($framedata)) {\n+\t\t\t\t\tif ($frame_size <= strlen((string) $framedata)) {\n \n-\t\t\t\t\t\tif ($this->IsValidID3v2FrameName(substr($framedata, $frame_size, 4), $id3v2_majorversion)) {\n+\t\t\t\t\t\tif ($this->IsValidID3v2FrameName(substr((string) $framedata, $frame_size, 4), $id3v2_majorversion)) {\n \n \t\t\t\t\t\t\t// next frame is valid, just skip the current frame\n-\t\t\t\t\t\t\t$framedata = substr($framedata, $frame_size);\n+\t\t\t\t\t\t\t$framedata = substr((string) $framedata, $frame_size);\n \t\t\t\t\t\t\t$info['warning'][] = 'Next ID3v2 frame is valid, skipping current frame.';\n \n \t\t\t\t\t\t} else {\n@@ -365,7 +365,7 @@\n \n \t\t\t\t\t\t}\n \n-\t\t\t\t\t} elseif ($frame_size == strlen($framedata)) {\n+\t\t\t\t\t} elseif ($frame_size == strlen((string) $framedata)) {\n \n \t\t\t\t\t\t// this is the last frame, just skip\n \t\t\t\t\t\t$info['warning'][] = 'This was the last ID3v2 frame.';\n@@ -380,22 +380,11 @@\n \t\t\t\t\t}\n \t\t\t\t\tif (!$this->IsValidID3v2FrameName($frame_name, $id3v2_majorversion)) {\n \n-\t\t\t\t\t\tswitch ($frame_name) {\n-\t\t\t\t\t\t\tcase \"\\x00\\x00\".'MP':\n-\t\t\t\t\t\t\tcase \"\\x00\".'MP3':\n-\t\t\t\t\t\t\tcase ' MP3':\n-\t\t\t\t\t\t\tcase 'MP3e':\n-\t\t\t\t\t\t\tcase \"\\x00\".'MP':\n-\t\t\t\t\t\t\tcase ' MP':\n-\t\t\t\t\t\t\tcase 'MP3':\n-\t\t\t\t\t\t\t\t$info['warning'][] = 'error parsing \"'.$frame_name.'\" ('.$framedataoffset.' bytes into the ID3v2.'.$id3v2_majorversion.' tag). (ERROR: !IsValidID3v2FrameName(\"'.str_replace(\"\\x00\", ' ', $frame_name).'\", '.$id3v2_majorversion.'))). [Note: this particular error has been known to happen with tags edited by \"MP3ext (www.mutschler.de/mp3ext/)\"]';\n-\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t$info['warning'][] = match ($frame_name) {\n+                            \"\\x00\\x00\".'MP', \"\\x00\".'MP3', ' MP3', 'MP3e', \"\\x00\".'MP', ' MP', 'MP3' => 'error parsing \"'.$frame_name.'\" ('.$framedataoffset.' bytes into the ID3v2.'.$id3v2_majorversion.' tag). (ERROR: !IsValidID3v2FrameName(\"'.str_replace(\"\\x00\", ' ', $frame_name).'\", '.$id3v2_majorversion.'))). [Note: this particular error has been known to happen with tags edited by \"MP3ext (www.mutschler.de/mp3ext/)\"]',\n+                            default => 'error parsing \"'.$frame_name.'\" ('.$framedataoffset.' bytes into the ID3v2.'.$id3v2_majorversion.' tag). (ERROR: !IsValidID3v2FrameName(\"'.str_replace(\"\\x00\", ' ', $frame_name).'\", '.$id3v2_majorversion.'))).',\n+                        };\n \n-\t\t\t\t\t\t\tdefault:\n-\t\t\t\t\t\t\t\t$info['warning'][] = 'error parsing \"'.$frame_name.'\" ('.$framedataoffset.' bytes into the ID3v2.'.$id3v2_majorversion.' tag). (ERROR: !IsValidID3v2FrameName(\"'.str_replace(\"\\x00\", ' ', $frame_name).'\", '.$id3v2_majorversion.'))).';\n-\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n-\n \t\t\t\t\t} elseif (!isset($framedata) || ($frame_size > strlen($framedata))) {\n \n \t\t\t\t\t\t$info['error'][] = 'error parsing \"'.$frame_name.'\" ('.$framedataoffset.' bytes into the ID3v2.'.$id3v2_majorversion.' tag). (ERROR: $frame_size ('.$frame_size.') > strlen($framedata) ('.(isset($framedata) ? strlen($framedata) : 'null').')).';\n@@ -424,19 +413,19 @@\n \n \t\tif (isset($thisfile_id3v2_flags['isfooter']) && $thisfile_id3v2_flags['isfooter']) {\n \t\t\t$footer = fread($this->getid3->fp, 10);\n-\t\t\tif (substr($footer, 0, 3) == '3DI') {\n+\t\t\tif (str_starts_with((string) $footer, '3DI')) {\n \t\t\t\t$thisfile_id3v2['footer'] = true;\n-\t\t\t\t$thisfile_id3v2['majorversion_footer'] = ord($footer{3});\n-\t\t\t\t$thisfile_id3v2['minorversion_footer'] = ord($footer{4});\n+\t\t\t\t$thisfile_id3v2['majorversion_footer'] = ord($footer[3]);\n+\t\t\t\t$thisfile_id3v2['minorversion_footer'] = ord($footer[4]);\n \t\t\t}\n \t\t\tif ($thisfile_id3v2['majorversion_footer'] <= 4) {\n-\t\t\t\t$id3_flags = ord(substr($footer{5}));\n+\t\t\t\t$id3_flags = ord(substr((string) $footer[5]));\n \t\t\t\t$thisfile_id3v2_flags['unsynch_footer']  = (bool) ($id3_flags & 0x80);\n \t\t\t\t$thisfile_id3v2_flags['extfoot_footer']  = (bool) ($id3_flags & 0x40);\n \t\t\t\t$thisfile_id3v2_flags['experim_footer']  = (bool) ($id3_flags & 0x20);\n \t\t\t\t$thisfile_id3v2_flags['isfooter_footer'] = (bool) ($id3_flags & 0x10);\n \n-\t\t\t\t$thisfile_id3v2['footerlength'] = getid3_lib::BigEndian2Int(substr($footer, 6, 4), 1);\n+\t\t\t\t$thisfile_id3v2['footerlength'] = getid3_lib::BigEndian2Int(substr((string) $footer, 6, 4), 1);\n \t\t\t}\n \t\t} // end footer\n \n@@ -443,20 +432,20 @@\n \t\tif (isset($thisfile_id3v2['comments']['genre'])) {\n \t\t\tforeach ($thisfile_id3v2['comments']['genre'] as $key => $value) {\n \t\t\t\tunset($thisfile_id3v2['comments']['genre'][$key]);\n-\t\t\t\t$thisfile_id3v2['comments'] = getid3_lib::array_merge_noclobber($thisfile_id3v2['comments'], array('genre'=>$this->ParseID3v2GenreString($value)));\n+\t\t\t\t$thisfile_id3v2['comments'] = getid3_lib::array_merge_noclobber($thisfile_id3v2['comments'], ['genre'=>$this->ParseID3v2GenreString($value)]);\n \t\t\t}\n \t\t}\n \n \t\tif (isset($thisfile_id3v2['comments']['track'])) {\n \t\t\tforeach ($thisfile_id3v2['comments']['track'] as $key => $value) {\n-\t\t\t\tif (strstr($value, '/')) {\n-\t\t\t\t\tlist($thisfile_id3v2['comments']['tracknum'][$key], $thisfile_id3v2['comments']['totaltracks'][$key]) = explode('/', $thisfile_id3v2['comments']['track'][$key]);\n+\t\t\t\tif (strstr((string) $value, '/')) {\n+\t\t\t\t\t[$thisfile_id3v2['comments']['tracknum'][$key], $thisfile_id3v2['comments']['totaltracks'][$key]] = explode('/', (string) $thisfile_id3v2['comments']['track'][$key]);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \n-\t\tif (!isset($thisfile_id3v2['comments']['year']) && !empty($thisfile_id3v2['comments']['recording_time'][0]) && preg_match('#^([0-9]{4})#', trim($thisfile_id3v2['comments']['recording_time'][0]), $matches)) {\n-\t\t\t$thisfile_id3v2['comments']['year'] = array($matches[1]);\n+\t\tif (!isset($thisfile_id3v2['comments']['year']) && !empty($thisfile_id3v2['comments']['recording_time'][0]) && preg_match('#^([0-9]{4})#', trim((string) $thisfile_id3v2['comments']['recording_time'][0]), $matches)) {\n+\t\t\t$thisfile_id3v2['comments']['year'] = [$matches[1]];\n \t\t}\n \n \n@@ -498,15 +487,15 @@\n \t\t// Parse genres into arrays of genreName and genreID\n \t\t// ID3v2.2.x, ID3v2.3.x: '(21)' or '(4)Eurodisco' or '(51)(39)' or '(55)((I think...)'\n \t\t// ID3v2.4.x: '21' $00 'Eurodisco' $00\n-\t\t$clean_genres = array();\n-\t\tif (strpos($genrestring, \"\\x00\") === false) {\n-\t\t\t$genrestring = preg_replace('#\\(([0-9]{1,3})\\)#', '$1'.\"\\x00\", $genrestring);\n+\t\t$clean_genres = [];\n+\t\tif (!str_contains((string) $genrestring, \"\\x00\")) {\n+\t\t\t$genrestring = preg_replace('#\\(([0-9]{1,3})\\)#', '$1'.\"\\x00\", (string) $genrestring);\n \t\t}\n-\t\t$genre_elements = explode(\"\\x00\", $genrestring);\n+\t\t$genre_elements = explode(\"\\x00\", (string) $genrestring);\n \t\tforeach ($genre_elements as $element) {\n-\t\t\t$element = trim($element);\n+\t\t\t$element = trim((string) $element);\n \t\t\tif ($element) {\n-\t\t\t\tif (preg_match('#^[0-9]{1,3}#', $element)) {\n+\t\t\t\tif (preg_match('#^[0-9]{1,3}#', (string) $element)) {\n \t\t\t\t\t$clean_genres[] = getid3_id3v1::LookupGenreName($element);\n \t\t\t\t} else {\n \t\t\t\t\t$clean_genres[] = str_replace('((', '(', $element);\n@@ -561,18 +550,18 @@\n \t\t\t\t}\n \n \t\t\t\tif ($parsedFrame['flags']['DataLengthIndicator']) {\n-\t\t\t\t\t$parsedFrame['data_length_indicator'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], 0, 4), 1);\n-\t\t\t\t\t$parsedFrame['data']                  =                           substr($parsedFrame['data'], 4);\n+\t\t\t\t\t$parsedFrame['data_length_indicator'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], 0, 4), 1);\n+\t\t\t\t\t$parsedFrame['data']                  =                           substr((string) $parsedFrame['data'], 4);\n \t\t\t\t}\n \t\t\t}\n \n \t\t\t//    Frame-level de-compression\n \t\t\tif ($parsedFrame['flags']['compression']) {\n-\t\t\t\t$parsedFrame['decompressed_size'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], 0, 4));\n+\t\t\t\t$parsedFrame['decompressed_size'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], 0, 4));\n \t\t\t\tif (!function_exists('gzuncompress')) {\n \t\t\t\t\t$info['warning'][] = 'gzuncompress() support required to decompress ID3v2 frame \"'.$parsedFrame['frame_name'].'\"';\n \t\t\t\t} else {\n-\t\t\t\t\tif ($decompresseddata = @gzuncompress(substr($parsedFrame['data'], 4))) {\n+\t\t\t\t\tif ($decompresseddata = @gzuncompress(substr((string) $parsedFrame['data'], 4))) {\n \t\t\t\t\t//if ($decompresseddata = @gzuncompress($parsedFrame['data'])) {\n \t\t\t\t\t\t$parsedFrame['data'] = $decompresseddata;\n \t\t\t\t\t\tunset($decompresseddata);\n@@ -584,8 +573,8 @@\n \t\t}\n \n \t\tif (!empty($parsedFrame['flags']['DataLengthIndicator'])) {\n-\t\t\tif ($parsedFrame['data_length_indicator'] != strlen($parsedFrame['data'])) {\n-\t\t\t\t$info['warning'][] = 'ID3v2 frame \"'.$parsedFrame['frame_name'].'\" should be '.$parsedFrame['data_length_indicator'].' bytes long according to DataLengthIndicator, but found '.strlen($parsedFrame['data']).' bytes of data';\n+\t\t\tif ($parsedFrame['data_length_indicator'] != strlen((string) $parsedFrame['data'])) {\n+\t\t\t\t$info['warning'][] = 'ID3v2 frame \"'.$parsedFrame['frame_name'].'\" should be '.$parsedFrame['data_length_indicator'].' bytes long according to DataLengthIndicator, but found '.strlen((string) $parsedFrame['data']).' bytes of data';\n \t\t\t}\n \t\t}\n \n@@ -609,9 +598,9 @@\n \t\t\t// <Header for 'Unique file identifier', ID: 'UFID'>\n \t\t\t// Owner identifier        <text string> $00\n \t\t\t// Identifier              <up to 64 bytes binary data>\n-\t\t\t$exploded = explode(\"\\x00\", $parsedFrame['data'], 2);\n-\t\t\t$parsedFrame['ownerid'] = (isset($exploded[0]) ? $exploded[0] : '');\n-\t\t\t$parsedFrame['data']    = (isset($exploded[1]) ? $exploded[1] : '');\n+\t\t\t$exploded = explode(\"\\x00\", (string) $parsedFrame['data'], 2);\n+\t\t\t$parsedFrame['ownerid'] = ($exploded[0] ?? '');\n+\t\t\t$parsedFrame['data']    = ($exploded[1] ?? '');\n \n \t\t} elseif ((($id3v2_majorversion >= 3) && ($parsedFrame['frame_name'] == 'TXXX')) || // 4.2.2 TXXX User defined text information frame\n \t\t\t\t(($id3v2_majorversion == 2) && ($parsedFrame['frame_name'] == 'TXX'))) {    // 4.2.2 TXX  User defined text information frame\n@@ -623,16 +612,16 @@\n \t\t\t// Value             <text string according to encoding>\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$frame_textencoding = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$frame_textencoding = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \n \t\t\tif ((($id3v2_majorversion <= 3) && ($frame_textencoding > 1)) || (($id3v2_majorversion == 4) && ($frame_textencoding > 3))) {\n \t\t\t\t$info['warning'][] = 'Invalid text encoding byte ('.$frame_textencoding.') in frame \"'.$parsedFrame['frame_name'].'\" - defaulting to ISO-8859-1 encoding';\n \t\t\t}\n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], $this->TextEncodingTerminatorLookup($frame_textencoding), $frame_offset);\n-\t\t\tif (ord(substr($parsedFrame['data'], $frame_terminatorpos + strlen($this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], (string) $this->TextEncodingTerminatorLookup($frame_textencoding), $frame_offset);\n+\t\t\tif (ord(substr((string) $parsedFrame['data'], $frame_terminatorpos + strlen((string) $this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n \t\t\t\t$frame_terminatorpos++; // strpos() fooled because 2nd byte of Unicode chars are often 0x00\n \t\t\t}\n-\t\t\t$frame_description = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t$frame_description = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\tif (ord($frame_description) === 0) {\n \t\t\t\t$frame_description = '';\n \t\t\t}\n@@ -640,7 +629,7 @@\n \t\t\t$parsedFrame['encoding']    = $this->TextEncodingNameLookup($frame_textencoding);\n \n \t\t\t$parsedFrame['description'] = $frame_description;\n-\t\t\t$parsedFrame['data'] = substr($parsedFrame['data'], $frame_terminatorpos + strlen($this->TextEncodingTerminatorLookup($frame_textencoding)));\n+\t\t\t$parsedFrame['data'] = substr((string) $parsedFrame['data'], $frame_terminatorpos + strlen((string) $this->TextEncodingTerminatorLookup($frame_textencoding)));\n \t\t\tif (!empty($parsedFrame['framenameshort']) && !empty($parsedFrame['data'])) {\n \t\t\t\t$info['id3v2']['comments'][$parsedFrame['framenameshort']][] = trim(getid3_lib::iconv_fallback($parsedFrame['encoding'], $info['id3v2']['encoding'], $parsedFrame['data']));\n \t\t\t}\n@@ -647,7 +636,7 @@\n \t\t\t//unset($parsedFrame['data']); do not unset, may be needed elsewhere, e.g. for replaygain\n \n \n-\t\t} elseif ($parsedFrame['frame_name']{0} == 'T') { // 4.2. T??[?] Text information frame\n+\t\t} elseif ($parsedFrame['frame_name'][0] == 'T') { // 4.2. T??[?] Text information frame\n \t\t\t//   There may only be one text information frame of its kind in an tag.\n \t\t\t// <Header for 'Text information frame', ID: 'T000' - 'TZZZ',\n \t\t\t// excluding 'TXXX' described in 4.2.6.>\n@@ -655,12 +644,12 @@\n \t\t\t// Information                  <text string(s) according to encoding>\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$frame_textencoding = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$frame_textencoding = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \t\t\tif ((($id3v2_majorversion <= 3) && ($frame_textencoding > 1)) || (($id3v2_majorversion == 4) && ($frame_textencoding > 3))) {\n \t\t\t\t$info['warning'][] = 'Invalid text encoding byte ('.$frame_textencoding.') in frame \"'.$parsedFrame['frame_name'].'\" - defaulting to ISO-8859-1 encoding';\n \t\t\t}\n \n-\t\t\t$parsedFrame['data'] = (string) substr($parsedFrame['data'], $frame_offset);\n+\t\t\t$parsedFrame['data'] = (string) substr((string) $parsedFrame['data'], $frame_offset);\n \n \t\t\t$parsedFrame['encodingid'] = $frame_textencoding;\n \t\t\t$parsedFrame['encoding']   = $this->TextEncodingNameLookup($frame_textencoding);\n@@ -670,27 +659,19 @@\n \t\t\t\t// This of course breaks when an artist name contains slash character, e.g. \"AC/DC\"\n \t\t\t\t// MP3tag (maybe others) implement alternative system where multiple artists are null-separated, which makes more sense\n \t\t\t\t// getID3 will split null-separated artists into multiple artists and leave slash-separated ones to the user\n-\t\t\t\tswitch ($parsedFrame['encoding']) {\n-\t\t\t\t\tcase 'UTF-16':\n-\t\t\t\t\tcase 'UTF-16BE':\n-\t\t\t\t\tcase 'UTF-16LE':\n-\t\t\t\t\t\t$wordsize = 2;\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase 'ISO-8859-1':\n-\t\t\t\t\tcase 'UTF-8':\n-\t\t\t\t\tdefault:\n-\t\t\t\t\t\t$wordsize = 1;\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t\t$Txxx_elements = array();\n+\t\t\t\t$wordsize = match ($parsedFrame['encoding']) {\n+                    'UTF-16', 'UTF-16BE', 'UTF-16LE' => 2,\n+                    default => 1,\n+                };\n+\t\t\t\t$Txxx_elements = [];\n \t\t\t\t$Txxx_elements_start_offset = 0;\n-\t\t\t\tfor ($i = 0; $i < strlen($parsedFrame['data']); $i += $wordsize) {\n-\t\t\t\t\tif (substr($parsedFrame['data'], $i, $wordsize) == str_repeat(\"\\x00\", $wordsize)) {\n-\t\t\t\t\t\t$Txxx_elements[] = substr($parsedFrame['data'], $Txxx_elements_start_offset, $i - $Txxx_elements_start_offset);\n+\t\t\t\tfor ($i = 0; $i < strlen((string) $parsedFrame['data']); $i += $wordsize) {\n+\t\t\t\t\tif (substr((string) $parsedFrame['data'], $i, $wordsize) == str_repeat(\"\\x00\", $wordsize)) {\n+\t\t\t\t\t\t$Txxx_elements[] = substr((string) $parsedFrame['data'], $Txxx_elements_start_offset, $i - $Txxx_elements_start_offset);\n \t\t\t\t\t\t$Txxx_elements_start_offset = $i + $wordsize;\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\t$Txxx_elements[] = substr($parsedFrame['data'], $Txxx_elements_start_offset, $i - $Txxx_elements_start_offset);\n+\t\t\t\t$Txxx_elements[] = substr((string) $parsedFrame['data'], $Txxx_elements_start_offset, $i - $Txxx_elements_start_offset);\n \t\t\t\tforeach ($Txxx_elements as $Txxx_element) {\n \t\t\t\t\t$string = getid3_lib::iconv_fallback($parsedFrame['encoding'], $info['id3v2']['encoding'], $Txxx_element);\n \t\t\t\t\tif (!empty($string)) {\n@@ -710,29 +691,29 @@\n \t\t\t// URL               <text string>\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$frame_textencoding = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$frame_textencoding = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \t\t\tif ((($id3v2_majorversion <= 3) && ($frame_textencoding > 1)) || (($id3v2_majorversion == 4) && ($frame_textencoding > 3))) {\n \t\t\t\t$info['warning'][] = 'Invalid text encoding byte ('.$frame_textencoding.') in frame \"'.$parsedFrame['frame_name'].'\" - defaulting to ISO-8859-1 encoding';\n \t\t\t}\n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], $this->TextEncodingTerminatorLookup($frame_textencoding), $frame_offset);\n-\t\t\tif (ord(substr($parsedFrame['data'], $frame_terminatorpos + strlen($this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], (string) $this->TextEncodingTerminatorLookup($frame_textencoding), $frame_offset);\n+\t\t\tif (ord(substr((string) $parsedFrame['data'], $frame_terminatorpos + strlen((string) $this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n \t\t\t\t$frame_terminatorpos++; // strpos() fooled because 2nd byte of Unicode chars are often 0x00\n \t\t\t}\n-\t\t\t$frame_description = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t$frame_description = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \n \t\t\tif (ord($frame_description) === 0) {\n \t\t\t\t$frame_description = '';\n \t\t\t}\n-\t\t\t$parsedFrame['data'] = substr($parsedFrame['data'], $frame_terminatorpos + strlen($this->TextEncodingTerminatorLookup($frame_textencoding)));\n+\t\t\t$parsedFrame['data'] = substr((string) $parsedFrame['data'], $frame_terminatorpos + strlen((string) $this->TextEncodingTerminatorLookup($frame_textencoding)));\n \n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], $this->TextEncodingTerminatorLookup($frame_textencoding));\n-\t\t\tif (ord(substr($parsedFrame['data'], $frame_terminatorpos + strlen($this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], (string) $this->TextEncodingTerminatorLookup($frame_textencoding));\n+\t\t\tif (ord(substr((string) $parsedFrame['data'], $frame_terminatorpos + strlen((string) $this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n \t\t\t\t$frame_terminatorpos++; // strpos() fooled because 2nd byte of Unicode chars are often 0x00\n \t\t\t}\n \t\t\tif ($frame_terminatorpos) {\n \t\t\t\t// there are null bytes after the data - this is not according to spec\n \t\t\t\t// only use data up to first null byte\n-\t\t\t\t$frame_urldata = (string) substr($parsedFrame['data'], 0, $frame_terminatorpos);\n+\t\t\t\t$frame_urldata = (string) substr((string) $parsedFrame['data'], 0, $frame_terminatorpos);\n \t\t\t} else {\n \t\t\t\t// no null bytes following data, just use all data\n \t\t\t\t$frame_urldata = (string) $parsedFrame['data'];\n@@ -749,7 +730,7 @@\n \t\t\tunset($parsedFrame['data']);\n \n \n-\t\t} elseif ($parsedFrame['frame_name']{0} == 'W') { // 4.3. W??? URL link frames\n+\t\t} elseif ($parsedFrame['frame_name'][0] == 'W') { // 4.3. W??? URL link frames\n \t\t\t//   There may only be one URL link frame of its kind in a tag,\n \t\t\t//   except when stated otherwise in the frame description\n \t\t\t// <Header for 'URL link frame', ID: 'W000' - 'WZZZ', excluding 'WXXX'\n@@ -756,7 +737,7 @@\n \t\t\t// described in 4.3.2.>\n \t\t\t// URL              <text string>\n \n-\t\t\t$parsedFrame['url'] = trim($parsedFrame['data']);\n+\t\t\t$parsedFrame['url'] = trim((string) $parsedFrame['data']);\n \t\t\tif (!empty($parsedFrame['framenameshort']) && $parsedFrame['url']) {\n \t\t\t\t$info['id3v2']['comments'][$parsedFrame['framenameshort']][] = $parsedFrame['url'];\n \t\t\t}\n@@ -772,25 +753,25 @@\n \t\t\t// People list strings    <textstrings>\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$frame_textencoding = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$frame_textencoding = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \t\t\tif ((($id3v2_majorversion <= 3) && ($frame_textencoding > 1)) || (($id3v2_majorversion == 4) && ($frame_textencoding > 3))) {\n \t\t\t\t$info['warning'][] = 'Invalid text encoding byte ('.$frame_textencoding.') in frame \"'.$parsedFrame['frame_name'].'\" - defaulting to ISO-8859-1 encoding';\n \t\t\t}\n \t\t\t$parsedFrame['encodingid'] = $frame_textencoding;\n \t\t\t$parsedFrame['encoding']   = $this->TextEncodingNameLookup($parsedFrame['encodingid']);\n-\t\t\t$parsedFrame['data_raw']   = (string) substr($parsedFrame['data'], $frame_offset);\n+\t\t\t$parsedFrame['data_raw']   = (string) substr((string) $parsedFrame['data'], $frame_offset);\n \n \t\t\t// http://www.getid3.org/phpBB3/viewtopic.php?t=1369\n \t\t\t// \"this tag typically contains null terminated strings, which are associated in pairs\"\n \t\t\t// \"there are users that use the tag incorrectly\"\n-\t\t\t$IPLS_parts = array();\n-\t\t\tif (strpos($parsedFrame['data_raw'], \"\\x00\") !== false) {\n-\t\t\t\t$IPLS_parts_unsorted = array();\n-\t\t\t\tif (((strlen($parsedFrame['data_raw']) % 2) == 0) && ((substr($parsedFrame['data_raw'], 0, 2) == \"\\xFF\\xFE\") || (substr($parsedFrame['data_raw'], 0, 2) == \"\\xFE\\xFF\"))) {\n+\t\t\t$IPLS_parts = [];\n+\t\t\tif (str_contains((string) $parsedFrame['data_raw'], \"\\x00\")) {\n+\t\t\t\t$IPLS_parts_unsorted = [];\n+\t\t\t\tif (((strlen((string) $parsedFrame['data_raw']) % 2) == 0) && ((str_starts_with((string) $parsedFrame['data_raw'], \"\\xFF\\xFE\")) || (str_starts_with((string) $parsedFrame['data_raw'], \"\\xFE\\xFF\")))) {\n \t\t\t\t\t// UTF-16, be careful looking for null bytes since most 2-byte characters may contain one; you need to find twin null bytes, and on even padding\n \t\t\t\t\t$thisILPS  = '';\n-\t\t\t\t\tfor ($i = 0; $i < strlen($parsedFrame['data_raw']); $i += 2) {\n-\t\t\t\t\t\t$twobytes = substr($parsedFrame['data_raw'], $i, 2);\n+\t\t\t\t\tfor ($i = 0; $i < strlen((string) $parsedFrame['data_raw']); $i += 2) {\n+\t\t\t\t\t\t$twobytes = substr((string) $parsedFrame['data_raw'], $i, 2);\n \t\t\t\t\t\tif ($twobytes === \"\\x00\\x00\") {\n \t\t\t\t\t\t\t$IPLS_parts_unsorted[] = getid3_lib::iconv_fallback($parsedFrame['encoding'], $info['id3v2']['encoding'], $thisILPS);\n \t\t\t\t\t\t\t$thisILPS  = '';\n@@ -798,20 +779,20 @@\n \t\t\t\t\t\t\t$thisILPS .= $twobytes;\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t\tif (strlen($thisILPS) > 2) { // 2-byte BOM\n+\t\t\t\t\tif (strlen((string) $thisILPS) > 2) { // 2-byte BOM\n \t\t\t\t\t\t$IPLS_parts_unsorted[] = getid3_lib::iconv_fallback($parsedFrame['encoding'], $info['id3v2']['encoding'], $thisILPS);\n \t\t\t\t\t}\n \t\t\t\t} else {\n \t\t\t\t\t// ISO-8859-1 or UTF-8 or other single-byte-null character set\n-\t\t\t\t\t$IPLS_parts_unsorted = explode(\"\\x00\", $parsedFrame['data_raw']);\n+\t\t\t\t\t$IPLS_parts_unsorted = explode(\"\\x00\", (string) $parsedFrame['data_raw']);\n \t\t\t\t}\n \t\t\t\tif (count($IPLS_parts_unsorted) == 1) {\n \t\t\t\t\t// just a list of names, e.g. \"Dino Baptiste, Jimmy Copley, John Gordon, Bernie Marsden, Sharon Watson\"\n \t\t\t\t\tforeach ($IPLS_parts_unsorted as $key => $value) {\n-\t\t\t\t\t\t$IPLS_parts_sorted = preg_split('#[;,\\\\r\\\\n\\\\t]#', $value);\n+\t\t\t\t\t\t$IPLS_parts_sorted = preg_split('#[;,\\\\r\\\\n\\\\t]#', (string) $value);\n \t\t\t\t\t\t$position = '';\n \t\t\t\t\t\tforeach ($IPLS_parts_sorted as $person) {\n-\t\t\t\t\t\t\t$IPLS_parts[] = array('position'=>$position, 'person'=>$person);\n+\t\t\t\t\t\t\t$IPLS_parts[] = ['position'=>$position, 'person'=>$person];\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t} elseif ((count($IPLS_parts_unsorted) % 2) == 0) {\n@@ -822,7 +803,7 @@\n \t\t\t\t\t\t\t$position = $value;\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\t$person   = $value;\n-\t\t\t\t\t\t\t$IPLS_parts[] = array('position'=>$position, 'person'=>$person);\n+\t\t\t\t\t\t\t$IPLS_parts[] = ['position'=>$position, 'person'=>$person];\n \t\t\t\t\t\t\t$position = '';\n \t\t\t\t\t\t\t$person   = '';\n \t\t\t\t\t\t}\n@@ -829,12 +810,12 @@\n \t\t\t\t\t}\n \t\t\t\t} else {\n \t\t\t\t\tforeach ($IPLS_parts_unsorted as $key => $value) {\n-\t\t\t\t\t\t$IPLS_parts[] = array($value);\n+\t\t\t\t\t\t$IPLS_parts[] = [$value];\n \t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t} else {\n-\t\t\t\t$IPLS_parts = preg_split('#[;,\\\\r\\\\n\\\\t]#', $parsedFrame['data_raw']);\n+\t\t\t\t$IPLS_parts = preg_split('#[;,\\\\r\\\\n\\\\t]#', (string) $parsedFrame['data_raw']);\n \t\t\t}\n \t\t\t$parsedFrame['data'] = $IPLS_parts;\n \n@@ -869,12 +850,12 @@\n \t\t\t//   or after the previous event. All events MUST be sorted in chronological order.\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$parsedFrame['timestampformat'] = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$parsedFrame['timestampformat'] = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \n-\t\t\twhile ($frame_offset < strlen($parsedFrame['data'])) {\n-\t\t\t\t$parsedFrame['typeid']    = substr($parsedFrame['data'], $frame_offset++, 1);\n+\t\t\twhile ($frame_offset < strlen((string) $parsedFrame['data'])) {\n+\t\t\t\t$parsedFrame['typeid']    = substr((string) $parsedFrame['data'], $frame_offset++, 1);\n \t\t\t\t$parsedFrame['type']      = $this->ETCOEventLookup($parsedFrame['typeid']);\n-\t\t\t\t$parsedFrame['timestamp'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, 4));\n+\t\t\t\t$parsedFrame['timestamp'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, 4));\n \t\t\t\t$frame_offset += 4;\n \t\t\t}\n \t\t\tunset($parsedFrame['data']);\n@@ -894,20 +875,20 @@\n \t\t\t// Deviation in milliseconds  %xxx....\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$parsedFrame['framesbetweenreferences'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], 0, 2));\n-\t\t\t$parsedFrame['bytesbetweenreferences']  = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], 2, 3));\n-\t\t\t$parsedFrame['msbetweenreferences']     = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], 5, 3));\n-\t\t\t$parsedFrame['bitsforbytesdeviation']   = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], 8, 1));\n-\t\t\t$parsedFrame['bitsformsdeviation']      = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], 9, 1));\n-\t\t\t$parsedFrame['data'] = substr($parsedFrame['data'], 10);\n-\t\t\twhile ($frame_offset < strlen($parsedFrame['data'])) {\n-\t\t\t\t$deviationbitstream .= getid3_lib::BigEndian2Bin(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$parsedFrame['framesbetweenreferences'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], 0, 2));\n+\t\t\t$parsedFrame['bytesbetweenreferences']  = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], 2, 3));\n+\t\t\t$parsedFrame['msbetweenreferences']     = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], 5, 3));\n+\t\t\t$parsedFrame['bitsforbytesdeviation']   = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], 8, 1));\n+\t\t\t$parsedFrame['bitsformsdeviation']      = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], 9, 1));\n+\t\t\t$parsedFrame['data'] = substr((string) $parsedFrame['data'], 10);\n+\t\t\twhile ($frame_offset < strlen((string) $parsedFrame['data'])) {\n+\t\t\t\t$deviationbitstream .= getid3_lib::BigEndian2Bin(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \t\t\t}\n \t\t\t$reference_counter = 0;\n-\t\t\twhile (strlen($deviationbitstream) > 0) {\n-\t\t\t\t$parsedFrame[$reference_counter]['bytedeviation'] = bindec(substr($deviationbitstream, 0, $parsedFrame['bitsforbytesdeviation']));\n-\t\t\t\t$parsedFrame[$reference_counter]['msdeviation']   = bindec(substr($deviationbitstream, $parsedFrame['bitsforbytesdeviation'], $parsedFrame['bitsformsdeviation']));\n-\t\t\t\t$deviationbitstream = substr($deviationbitstream, $parsedFrame['bitsforbytesdeviation'] + $parsedFrame['bitsformsdeviation']);\n+\t\t\twhile (strlen((string) $deviationbitstream) > 0) {\n+\t\t\t\t$parsedFrame[$reference_counter]['bytedeviation'] = bindec(substr((string) $deviationbitstream, 0, $parsedFrame['bitsforbytesdeviation']));\n+\t\t\t\t$parsedFrame[$reference_counter]['msdeviation']   = bindec(substr((string) $deviationbitstream, $parsedFrame['bitsforbytesdeviation'], $parsedFrame['bitsformsdeviation']));\n+\t\t\t\t$deviationbitstream = substr((string) $deviationbitstream, $parsedFrame['bitsforbytesdeviation'] + $parsedFrame['bitsformsdeviation']);\n \t\t\t\t$reference_counter++;\n \t\t\t}\n \t\t\tunset($parsedFrame['data']);\n@@ -924,14 +905,14 @@\n \t\t\t// $02  (32-bit value) milliseconds from beginning of file\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$parsedFrame['timestampformat'] = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$parsedFrame['timestampformat'] = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \t\t\t$timestamp_counter = 0;\n-\t\t\twhile ($frame_offset < strlen($parsedFrame['data'])) {\n-\t\t\t\t$parsedFrame[$timestamp_counter]['tempo'] = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\twhile ($frame_offset < strlen((string) $parsedFrame['data'])) {\n+\t\t\t\t$parsedFrame[$timestamp_counter]['tempo'] = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \t\t\t\tif ($parsedFrame[$timestamp_counter]['tempo'] == 255) {\n-\t\t\t\t\t$parsedFrame[$timestamp_counter]['tempo'] += ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t\t\t$parsedFrame[$timestamp_counter]['tempo'] += ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \t\t\t\t}\n-\t\t\t\t$parsedFrame[$timestamp_counter]['timestamp'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, 4));\n+\t\t\t\t$parsedFrame[$timestamp_counter]['timestamp'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, 4));\n \t\t\t\t$frame_offset += 4;\n \t\t\t\t$timestamp_counter++;\n \t\t\t}\n@@ -949,21 +930,21 @@\n \t\t\t// Lyrics/text          <full text string according to encoding>\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$frame_textencoding = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$frame_textencoding = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \t\t\tif ((($id3v2_majorversion <= 3) && ($frame_textencoding > 1)) || (($id3v2_majorversion == 4) && ($frame_textencoding > 3))) {\n \t\t\t\t$info['warning'][] = 'Invalid text encoding byte ('.$frame_textencoding.') in frame \"'.$parsedFrame['frame_name'].'\" - defaulting to ISO-8859-1 encoding';\n \t\t\t}\n-\t\t\t$frame_language = substr($parsedFrame['data'], $frame_offset, 3);\n+\t\t\t$frame_language = substr((string) $parsedFrame['data'], $frame_offset, 3);\n \t\t\t$frame_offset += 3;\n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], $this->TextEncodingTerminatorLookup($frame_textencoding), $frame_offset);\n-\t\t\tif (ord(substr($parsedFrame['data'], $frame_terminatorpos + strlen($this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], (string) $this->TextEncodingTerminatorLookup($frame_textencoding), $frame_offset);\n+\t\t\tif (ord(substr((string) $parsedFrame['data'], $frame_terminatorpos + strlen((string) $this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n \t\t\t\t$frame_terminatorpos++; // strpos() fooled because 2nd byte of Unicode chars are often 0x00\n \t\t\t}\n-\t\t\t$frame_description = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t$frame_description = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\tif (ord($frame_description) === 0) {\n \t\t\t\t$frame_description = '';\n \t\t\t}\n-\t\t\t$parsedFrame['data'] = substr($parsedFrame['data'], $frame_terminatorpos + strlen($this->TextEncodingTerminatorLookup($frame_textencoding)));\n+\t\t\t$parsedFrame['data'] = substr((string) $parsedFrame['data'], $frame_terminatorpos + strlen((string) $this->TextEncodingTerminatorLookup($frame_textencoding)));\n \n \t\t\t$parsedFrame['encodingid']   = $frame_textencoding;\n \t\t\t$parsedFrame['encoding']     = $this->TextEncodingNameLookup($frame_textencoding);\n@@ -995,14 +976,14 @@\n \t\t\t//   Time stamp                                     $xx (xx ...)\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$frame_textencoding = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$frame_textencoding = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \t\t\tif ((($id3v2_majorversion <= 3) && ($frame_textencoding > 1)) || (($id3v2_majorversion == 4) && ($frame_textencoding > 3))) {\n \t\t\t\t$info['warning'][] = 'Invalid text encoding byte ('.$frame_textencoding.') in frame \"'.$parsedFrame['frame_name'].'\" - defaulting to ISO-8859-1 encoding';\n \t\t\t}\n-\t\t\t$frame_language = substr($parsedFrame['data'], $frame_offset, 3);\n+\t\t\t$frame_language = substr((string) $parsedFrame['data'], $frame_offset, 3);\n \t\t\t$frame_offset += 3;\n-\t\t\t$parsedFrame['timestampformat'] = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n-\t\t\t$parsedFrame['contenttypeid']   = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$parsedFrame['timestampformat'] = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$parsedFrame['contenttypeid']   = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \t\t\t$parsedFrame['contenttype']     = $this->SYTLContentTypeLookup($parsedFrame['contenttypeid']);\n \t\t\t$parsedFrame['encodingid']      = $frame_textencoding;\n \t\t\t$parsedFrame['encoding']        = $this->TextEncodingNameLookup($frame_textencoding);\n@@ -1011,24 +992,24 @@\n \t\t\t$parsedFrame['languagename']    = $this->LanguageLookup($frame_language, false);\n \n \t\t\t$timestampindex = 0;\n-\t\t\t$frame_remainingdata = substr($parsedFrame['data'], $frame_offset);\n-\t\t\twhile (strlen($frame_remainingdata)) {\n+\t\t\t$frame_remainingdata = substr((string) $parsedFrame['data'], $frame_offset);\n+\t\t\twhile (strlen((string) $frame_remainingdata)) {\n \t\t\t\t$frame_offset = 0;\n-\t\t\t\t$frame_terminatorpos = strpos($frame_remainingdata, $this->TextEncodingTerminatorLookup($frame_textencoding));\n+\t\t\t\t$frame_terminatorpos = strpos((string) $frame_remainingdata, (string) $this->TextEncodingTerminatorLookup($frame_textencoding));\n \t\t\t\tif ($frame_terminatorpos === false) {\n \t\t\t\t\t$frame_remainingdata = '';\n \t\t\t\t} else {\n-\t\t\t\t\tif (ord(substr($frame_remainingdata, $frame_terminatorpos + strlen($this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n+\t\t\t\t\tif (ord(substr((string) $frame_remainingdata, $frame_terminatorpos + strlen((string) $this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n \t\t\t\t\t\t$frame_terminatorpos++; // strpos() fooled because 2nd byte of Unicode chars are often 0x00\n \t\t\t\t\t}\n-\t\t\t\t\t$parsedFrame['lyrics'][$timestampindex]['data'] = substr($frame_remainingdata, $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t\t\t$parsedFrame['lyrics'][$timestampindex]['data'] = substr((string) $frame_remainingdata, $frame_offset, $frame_terminatorpos - $frame_offset);\n \n-\t\t\t\t\t$frame_remainingdata = substr($frame_remainingdata, $frame_terminatorpos + strlen($this->TextEncodingTerminatorLookup($frame_textencoding)));\n-\t\t\t\t\tif (($timestampindex == 0) && (ord($frame_remainingdata{0}) != 0)) {\n+\t\t\t\t\t$frame_remainingdata = substr((string) $frame_remainingdata, $frame_terminatorpos + strlen((string) $this->TextEncodingTerminatorLookup($frame_textencoding)));\n+\t\t\t\t\tif (($timestampindex == 0) && (ord($frame_remainingdata[0]) != 0)) {\n \t\t\t\t\t\t// timestamp probably omitted for first data item\n \t\t\t\t\t} else {\n-\t\t\t\t\t\t$parsedFrame['lyrics'][$timestampindex]['timestamp'] = getid3_lib::BigEndian2Int(substr($frame_remainingdata, 0, 4));\n-\t\t\t\t\t\t$frame_remainingdata = substr($frame_remainingdata, 4);\n+\t\t\t\t\t\t$parsedFrame['lyrics'][$timestampindex]['timestamp'] = getid3_lib::BigEndian2Int(substr((string) $frame_remainingdata, 0, 4));\n+\t\t\t\t\t\t$frame_remainingdata = substr((string) $frame_remainingdata, 4);\n \t\t\t\t\t}\n \t\t\t\t\t$timestampindex++;\n \t\t\t\t}\n@@ -1046,7 +1027,7 @@\n \t\t\t// Short content descrip. <text string according to encoding> $00 (00)\n \t\t\t// The actual text        <full text string according to encoding>\n \n-\t\t\tif (strlen($parsedFrame['data']) < 5) {\n+\t\t\tif (strlen((string) $parsedFrame['data']) < 5) {\n \n \t\t\t\t$info['warning'][] = 'Invalid data (too short) for \"'.$parsedFrame['frame_name'].'\" frame at offset '.$parsedFrame['dataoffset'];\n \n@@ -1053,21 +1034,21 @@\n \t\t\t} else {\n \n \t\t\t\t$frame_offset = 0;\n-\t\t\t\t$frame_textencoding = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t\t$frame_textencoding = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \t\t\t\tif ((($id3v2_majorversion <= 3) && ($frame_textencoding > 1)) || (($id3v2_majorversion == 4) && ($frame_textencoding > 3))) {\n \t\t\t\t\t$info['warning'][] = 'Invalid text encoding byte ('.$frame_textencoding.') in frame \"'.$parsedFrame['frame_name'].'\" - defaulting to ISO-8859-1 encoding';\n \t\t\t\t}\n-\t\t\t\t$frame_language = substr($parsedFrame['data'], $frame_offset, 3);\n+\t\t\t\t$frame_language = substr((string) $parsedFrame['data'], $frame_offset, 3);\n \t\t\t\t$frame_offset += 3;\n-\t\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], $this->TextEncodingTerminatorLookup($frame_textencoding), $frame_offset);\n-\t\t\t\tif (ord(substr($parsedFrame['data'], $frame_terminatorpos + strlen($this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n+\t\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], (string) $this->TextEncodingTerminatorLookup($frame_textencoding), $frame_offset);\n+\t\t\t\tif (ord(substr((string) $parsedFrame['data'], $frame_terminatorpos + strlen((string) $this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n \t\t\t\t\t$frame_terminatorpos++; // strpos() fooled because 2nd byte of Unicode chars are often 0x00\n \t\t\t\t}\n-\t\t\t\t$frame_description = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t\t$frame_description = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\t\tif (ord($frame_description) === 0) {\n \t\t\t\t\t$frame_description = '';\n \t\t\t\t}\n-\t\t\t\t$frame_text = (string) substr($parsedFrame['data'], $frame_terminatorpos + strlen($this->TextEncodingTerminatorLookup($frame_textencoding)));\n+\t\t\t\t$frame_text = (string) substr((string) $parsedFrame['data'], $frame_terminatorpos + strlen((string) $this->TextEncodingTerminatorLookup($frame_textencoding)));\n \n \t\t\t\t$parsedFrame['encodingid']   = $frame_textencoding;\n \t\t\t\t$parsedFrame['encoding']     = $this->TextEncodingNameLookup($frame_textencoding);\n@@ -1095,29 +1076,29 @@\n \t\t\t// Bits representing peak  $xx\n \t\t\t// Peak volume             $xx (xx ...)\n \n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], \"\\x00\");\n-\t\t\t$frame_idstring = substr($parsedFrame['data'], 0, $frame_terminatorpos);\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], \"\\x00\");\n+\t\t\t$frame_idstring = substr((string) $parsedFrame['data'], 0, $frame_terminatorpos);\n \t\t\tif (ord($frame_idstring) === 0) {\n \t\t\t\t$frame_idstring = '';\n \t\t\t}\n-\t\t\t$frame_remainingdata = substr($parsedFrame['data'], $frame_terminatorpos + strlen(\"\\x00\"));\n+\t\t\t$frame_remainingdata = substr((string) $parsedFrame['data'], $frame_terminatorpos + strlen(\"\\x00\"));\n \t\t\t$parsedFrame['description'] = $frame_idstring;\n \t\t\t$RVA2channelcounter = 0;\n-\t\t\twhile (strlen($frame_remainingdata) >= 5) {\n+\t\t\twhile (strlen((string) $frame_remainingdata) >= 5) {\n \t\t\t\t$frame_offset = 0;\n-\t\t\t\t$frame_channeltypeid = ord(substr($frame_remainingdata, $frame_offset++, 1));\n+\t\t\t\t$frame_channeltypeid = ord(substr((string) $frame_remainingdata, $frame_offset++, 1));\n \t\t\t\t$parsedFrame[$RVA2channelcounter]['channeltypeid']  = $frame_channeltypeid;\n \t\t\t\t$parsedFrame[$RVA2channelcounter]['channeltype']    = $this->RVA2ChannelTypeLookup($frame_channeltypeid);\n-\t\t\t\t$parsedFrame[$RVA2channelcounter]['volumeadjust']   = getid3_lib::BigEndian2Int(substr($frame_remainingdata, $frame_offset, 2), false, true); // 16-bit signed\n+\t\t\t\t$parsedFrame[$RVA2channelcounter]['volumeadjust']   = getid3_lib::BigEndian2Int(substr((string) $frame_remainingdata, $frame_offset, 2), false, true); // 16-bit signed\n \t\t\t\t$frame_offset += 2;\n-\t\t\t\t$parsedFrame[$RVA2channelcounter]['bitspeakvolume'] = ord(substr($frame_remainingdata, $frame_offset++, 1));\n+\t\t\t\t$parsedFrame[$RVA2channelcounter]['bitspeakvolume'] = ord(substr((string) $frame_remainingdata, $frame_offset++, 1));\n \t\t\t\tif (($parsedFrame[$RVA2channelcounter]['bitspeakvolume'] < 1) || ($parsedFrame[$RVA2channelcounter]['bitspeakvolume'] > 4)) {\n \t\t\t\t\t$info['warning'][] = 'ID3v2::RVA2 frame['.$RVA2channelcounter.'] contains invalid '.$parsedFrame[$RVA2channelcounter]['bitspeakvolume'].'-byte bits-representing-peak value';\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t\t$frame_bytespeakvolume = ceil($parsedFrame[$RVA2channelcounter]['bitspeakvolume'] / 8);\n-\t\t\t\t$parsedFrame[$RVA2channelcounter]['peakvolume']     = getid3_lib::BigEndian2Int(substr($frame_remainingdata, $frame_offset, $frame_bytespeakvolume));\n-\t\t\t\t$frame_remainingdata = substr($frame_remainingdata, $frame_offset + $frame_bytespeakvolume);\n+\t\t\t\t$parsedFrame[$RVA2channelcounter]['peakvolume']     = getid3_lib::BigEndian2Int(substr((string) $frame_remainingdata, $frame_offset, $frame_bytespeakvolume));\n+\t\t\t\t$frame_remainingdata = substr((string) $frame_remainingdata, $frame_offset + $frame_bytespeakvolume);\n \t\t\t\t$RVA2channelcounter++;\n \t\t\t}\n \t\t\tunset($parsedFrame['data']);\n@@ -1147,65 +1128,65 @@\n \t\t\t// Peak volume bass                   $xx xx (xx ...)\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$frame_incrdecrflags = getid3_lib::BigEndian2Bin(substr($parsedFrame['data'], $frame_offset++, 1));\n-\t\t\t$parsedFrame['incdec']['right'] = (bool) substr($frame_incrdecrflags, 6, 1);\n-\t\t\t$parsedFrame['incdec']['left']  = (bool) substr($frame_incrdecrflags, 7, 1);\n-\t\t\t$parsedFrame['bitsvolume'] = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$frame_incrdecrflags = getid3_lib::BigEndian2Bin(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$parsedFrame['incdec']['right'] = (bool) substr((string) $frame_incrdecrflags, 6, 1);\n+\t\t\t$parsedFrame['incdec']['left']  = (bool) substr((string) $frame_incrdecrflags, 7, 1);\n+\t\t\t$parsedFrame['bitsvolume'] = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \t\t\t$frame_bytesvolume = ceil($parsedFrame['bitsvolume'] / 8);\n-\t\t\t$parsedFrame['volumechange']['right'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n+\t\t\t$parsedFrame['volumechange']['right'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n \t\t\tif ($parsedFrame['incdec']['right'] === false) {\n \t\t\t\t$parsedFrame['volumechange']['right'] *= -1;\n \t\t\t}\n \t\t\t$frame_offset += $frame_bytesvolume;\n-\t\t\t$parsedFrame['volumechange']['left'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n+\t\t\t$parsedFrame['volumechange']['left'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n \t\t\tif ($parsedFrame['incdec']['left'] === false) {\n \t\t\t\t$parsedFrame['volumechange']['left'] *= -1;\n \t\t\t}\n \t\t\t$frame_offset += $frame_bytesvolume;\n-\t\t\t$parsedFrame['peakvolume']['right'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n+\t\t\t$parsedFrame['peakvolume']['right'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n \t\t\t$frame_offset += $frame_bytesvolume;\n-\t\t\t$parsedFrame['peakvolume']['left']  = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n+\t\t\t$parsedFrame['peakvolume']['left']  = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n \t\t\t$frame_offset += $frame_bytesvolume;\n \t\t\tif ($id3v2_majorversion == 3) {\n-\t\t\t\t$parsedFrame['data'] = substr($parsedFrame['data'], $frame_offset);\n-\t\t\t\tif (strlen($parsedFrame['data']) > 0) {\n-\t\t\t\t\t$parsedFrame['incdec']['rightrear'] = (bool) substr($frame_incrdecrflags, 4, 1);\n-\t\t\t\t\t$parsedFrame['incdec']['leftrear']  = (bool) substr($frame_incrdecrflags, 5, 1);\n-\t\t\t\t\t$parsedFrame['volumechange']['rightrear'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n+\t\t\t\t$parsedFrame['data'] = substr((string) $parsedFrame['data'], $frame_offset);\n+\t\t\t\tif (strlen((string) $parsedFrame['data']) > 0) {\n+\t\t\t\t\t$parsedFrame['incdec']['rightrear'] = (bool) substr((string) $frame_incrdecrflags, 4, 1);\n+\t\t\t\t\t$parsedFrame['incdec']['leftrear']  = (bool) substr((string) $frame_incrdecrflags, 5, 1);\n+\t\t\t\t\t$parsedFrame['volumechange']['rightrear'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n \t\t\t\t\tif ($parsedFrame['incdec']['rightrear'] === false) {\n \t\t\t\t\t\t$parsedFrame['volumechange']['rightrear'] *= -1;\n \t\t\t\t\t}\n \t\t\t\t\t$frame_offset += $frame_bytesvolume;\n-\t\t\t\t\t$parsedFrame['volumechange']['leftrear'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n+\t\t\t\t\t$parsedFrame['volumechange']['leftrear'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n \t\t\t\t\tif ($parsedFrame['incdec']['leftrear'] === false) {\n \t\t\t\t\t\t$parsedFrame['volumechange']['leftrear'] *= -1;\n \t\t\t\t\t}\n \t\t\t\t\t$frame_offset += $frame_bytesvolume;\n-\t\t\t\t\t$parsedFrame['peakvolume']['rightrear'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n+\t\t\t\t\t$parsedFrame['peakvolume']['rightrear'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n \t\t\t\t\t$frame_offset += $frame_bytesvolume;\n-\t\t\t\t\t$parsedFrame['peakvolume']['leftrear']  = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n+\t\t\t\t\t$parsedFrame['peakvolume']['leftrear']  = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n \t\t\t\t\t$frame_offset += $frame_bytesvolume;\n \t\t\t\t}\n-\t\t\t\t$parsedFrame['data'] = substr($parsedFrame['data'], $frame_offset);\n-\t\t\t\tif (strlen($parsedFrame['data']) > 0) {\n-\t\t\t\t\t$parsedFrame['incdec']['center'] = (bool) substr($frame_incrdecrflags, 3, 1);\n-\t\t\t\t\t$parsedFrame['volumechange']['center'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n+\t\t\t\t$parsedFrame['data'] = substr((string) $parsedFrame['data'], $frame_offset);\n+\t\t\t\tif (strlen((string) $parsedFrame['data']) > 0) {\n+\t\t\t\t\t$parsedFrame['incdec']['center'] = (bool) substr((string) $frame_incrdecrflags, 3, 1);\n+\t\t\t\t\t$parsedFrame['volumechange']['center'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n \t\t\t\t\tif ($parsedFrame['incdec']['center'] === false) {\n \t\t\t\t\t\t$parsedFrame['volumechange']['center'] *= -1;\n \t\t\t\t\t}\n \t\t\t\t\t$frame_offset += $frame_bytesvolume;\n-\t\t\t\t\t$parsedFrame['peakvolume']['center'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n+\t\t\t\t\t$parsedFrame['peakvolume']['center'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n \t\t\t\t\t$frame_offset += $frame_bytesvolume;\n \t\t\t\t}\n-\t\t\t\t$parsedFrame['data'] = substr($parsedFrame['data'], $frame_offset);\n-\t\t\t\tif (strlen($parsedFrame['data']) > 0) {\n-\t\t\t\t\t$parsedFrame['incdec']['bass'] = (bool) substr($frame_incrdecrflags, 2, 1);\n-\t\t\t\t\t$parsedFrame['volumechange']['bass'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n+\t\t\t\t$parsedFrame['data'] = substr((string) $parsedFrame['data'], $frame_offset);\n+\t\t\t\tif (strlen((string) $parsedFrame['data']) > 0) {\n+\t\t\t\t\t$parsedFrame['incdec']['bass'] = (bool) substr((string) $frame_incrdecrflags, 2, 1);\n+\t\t\t\t\t$parsedFrame['volumechange']['bass'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n \t\t\t\t\tif ($parsedFrame['incdec']['bass'] === false) {\n \t\t\t\t\t\t$parsedFrame['volumechange']['bass'] *= -1;\n \t\t\t\t\t}\n \t\t\t\t\t$frame_offset += $frame_bytesvolume;\n-\t\t\t\t\t$parsedFrame['peakvolume']['bass'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n+\t\t\t\t\t$parsedFrame['peakvolume']['bass'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, $frame_bytesvolume));\n \t\t\t\t\t$frame_offset += $frame_bytesvolume;\n \t\t\t\t}\n \t\t\t}\n@@ -1225,18 +1206,18 @@\n \t\t\t// Volume adjustment  $xx xx\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$frame_interpolationmethod = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], \"\\x00\", $frame_offset);\n-\t\t\t$frame_idstring = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t$frame_interpolationmethod = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], \"\\x00\", $frame_offset);\n+\t\t\t$frame_idstring = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\tif (ord($frame_idstring) === 0) {\n \t\t\t\t$frame_idstring = '';\n \t\t\t}\n \t\t\t$parsedFrame['description'] = $frame_idstring;\n-\t\t\t$frame_remainingdata = substr($parsedFrame['data'], $frame_terminatorpos + strlen(\"\\x00\"));\n-\t\t\twhile (strlen($frame_remainingdata)) {\n-\t\t\t\t$frame_frequency = getid3_lib::BigEndian2Int(substr($frame_remainingdata, 0, 2)) / 2;\n-\t\t\t\t$parsedFrame['data'][$frame_frequency] = getid3_lib::BigEndian2Int(substr($frame_remainingdata, 2, 2), false, true);\n-\t\t\t\t$frame_remainingdata = substr($frame_remainingdata, 4);\n+\t\t\t$frame_remainingdata = substr((string) $parsedFrame['data'], $frame_terminatorpos + strlen(\"\\x00\"));\n+\t\t\twhile (strlen((string) $frame_remainingdata)) {\n+\t\t\t\t$frame_frequency = getid3_lib::BigEndian2Int(substr((string) $frame_remainingdata, 0, 2)) / 2;\n+\t\t\t\t$parsedFrame['data'][$frame_frequency] = getid3_lib::BigEndian2Int(substr((string) $frame_remainingdata, 2, 2), false, true);\n+\t\t\t\t$frame_remainingdata = substr((string) $frame_remainingdata, 4);\n \t\t\t}\n \t\t\t$parsedFrame['interpolationmethod'] = $frame_interpolationmethod;\n \t\t\tunset($parsedFrame['data']);\n@@ -1255,20 +1236,20 @@\n \t\t\t// Adjustment            $xx (xx ...)\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$parsedFrame['adjustmentbits'] = substr($parsedFrame['data'], $frame_offset++, 1);\n+\t\t\t$parsedFrame['adjustmentbits'] = substr((string) $parsedFrame['data'], $frame_offset++, 1);\n \t\t\t$frame_adjustmentbytes = ceil($parsedFrame['adjustmentbits'] / 8);\n \n-\t\t\t$frame_remainingdata = (string) substr($parsedFrame['data'], $frame_offset);\n-\t\t\twhile (strlen($frame_remainingdata) > 0) {\n-\t\t\t\t$frame_frequencystr = getid3_lib::BigEndian2Bin(substr($frame_remainingdata, 0, 2));\n-\t\t\t\t$frame_incdec    = (bool) substr($frame_frequencystr, 0, 1);\n-\t\t\t\t$frame_frequency = bindec(substr($frame_frequencystr, 1, 15));\n+\t\t\t$frame_remainingdata = (string) substr((string) $parsedFrame['data'], $frame_offset);\n+\t\t\twhile (strlen((string) $frame_remainingdata) > 0) {\n+\t\t\t\t$frame_frequencystr = getid3_lib::BigEndian2Bin(substr((string) $frame_remainingdata, 0, 2));\n+\t\t\t\t$frame_incdec    = (bool) substr((string) $frame_frequencystr, 0, 1);\n+\t\t\t\t$frame_frequency = bindec(substr((string) $frame_frequencystr, 1, 15));\n \t\t\t\t$parsedFrame[$frame_frequency]['incdec'] = $frame_incdec;\n-\t\t\t\t$parsedFrame[$frame_frequency]['adjustment'] = getid3_lib::BigEndian2Int(substr($frame_remainingdata, 2, $frame_adjustmentbytes));\n+\t\t\t\t$parsedFrame[$frame_frequency]['adjustment'] = getid3_lib::BigEndian2Int(substr((string) $frame_remainingdata, 2, $frame_adjustmentbytes));\n \t\t\t\tif ($parsedFrame[$frame_frequency]['incdec'] === false) {\n \t\t\t\t\t$parsedFrame[$frame_frequency]['adjustment'] *= -1;\n \t\t\t\t}\n-\t\t\t\t$frame_remainingdata = substr($frame_remainingdata, 2 + $frame_adjustmentbytes);\n+\t\t\t\t$frame_remainingdata = substr((string) $frame_remainingdata, 2 + $frame_adjustmentbytes);\n \t\t\t}\n \t\t\tunset($parsedFrame['data']);\n \n@@ -1289,18 +1270,18 @@\n \t\t\t// Premix right to left             $xx\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$parsedFrame['left']  = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, 2));\n+\t\t\t$parsedFrame['left']  = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, 2));\n \t\t\t$frame_offset += 2;\n-\t\t\t$parsedFrame['right'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, 2));\n+\t\t\t$parsedFrame['right'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, 2));\n \t\t\t$frame_offset += 2;\n-\t\t\t$parsedFrame['bouncesL']      = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n-\t\t\t$parsedFrame['bouncesR']      = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n-\t\t\t$parsedFrame['feedbackLL']    = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n-\t\t\t$parsedFrame['feedbackLR']    = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n-\t\t\t$parsedFrame['feedbackRR']    = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n-\t\t\t$parsedFrame['feedbackRL']    = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n-\t\t\t$parsedFrame['premixLR']      = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n-\t\t\t$parsedFrame['premixRL']      = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$parsedFrame['bouncesL']      = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$parsedFrame['bouncesR']      = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$parsedFrame['feedbackLL']    = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$parsedFrame['feedbackLR']    = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$parsedFrame['feedbackRR']    = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$parsedFrame['feedbackRL']    = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$parsedFrame['premixLR']      = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$parsedFrame['premixRL']      = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \t\t\tunset($parsedFrame['data']);\n \n \n@@ -1318,22 +1299,22 @@\n \t\t\t// Picture data       <binary data>\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$frame_textencoding = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$frame_textencoding = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \t\t\tif ((($id3v2_majorversion <= 3) && ($frame_textencoding > 1)) || (($id3v2_majorversion == 4) && ($frame_textencoding > 3))) {\n \t\t\t\t$info['warning'][] = 'Invalid text encoding byte ('.$frame_textencoding.') in frame \"'.$parsedFrame['frame_name'].'\" - defaulting to ISO-8859-1 encoding';\n \t\t\t}\n \n-\t\t\tif ($id3v2_majorversion == 2 && strlen($parsedFrame['data']) > $frame_offset) {\n-\t\t\t\t$frame_imagetype = substr($parsedFrame['data'], $frame_offset, 3);\n-\t\t\t\tif (strtolower($frame_imagetype) == 'ima') {\n+\t\t\tif ($id3v2_majorversion == 2 && strlen((string) $parsedFrame['data']) > $frame_offset) {\n+\t\t\t\t$frame_imagetype = substr((string) $parsedFrame['data'], $frame_offset, 3);\n+\t\t\t\tif (strtolower((string) $frame_imagetype) == 'ima') {\n \t\t\t\t\t// complete hack for mp3Rage (www.chaoticsoftware.com) that puts ID3v2.3-formatted\n \t\t\t\t\t// MIME type instead of 3-char ID3v2.2-format image type  (thanks xbhoffÃ˜pacbell*net)\n-\t\t\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], \"\\x00\", $frame_offset);\n-\t\t\t\t\t$frame_mimetype = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], \"\\x00\", $frame_offset);\n+\t\t\t\t\t$frame_mimetype = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\t\t\tif (ord($frame_mimetype) === 0) {\n \t\t\t\t\t\t$frame_mimetype = '';\n \t\t\t\t\t}\n-\t\t\t\t\t$frame_imagetype = strtoupper(str_replace('image/', '', strtolower($frame_mimetype)));\n+\t\t\t\t\t$frame_imagetype = strtoupper(str_replace('image/', '', strtolower((string) $frame_mimetype)));\n \t\t\t\t\tif ($frame_imagetype == 'JPEG') {\n \t\t\t\t\t\t$frame_imagetype = 'JPG';\n \t\t\t\t\t}\n@@ -1342,9 +1323,9 @@\n \t\t\t\t\t$frame_offset += 3;\n \t\t\t\t}\n \t\t\t}\n-\t\t\tif ($id3v2_majorversion > 2 && strlen($parsedFrame['data']) > $frame_offset) {\n-\t\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], \"\\x00\", $frame_offset);\n-\t\t\t\t$frame_mimetype = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\tif ($id3v2_majorversion > 2 && strlen((string) $parsedFrame['data']) > $frame_offset) {\n+\t\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], \"\\x00\", $frame_offset);\n+\t\t\t\t$frame_mimetype = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\t\tif (ord($frame_mimetype) === 0) {\n \t\t\t\t\t$frame_mimetype = '';\n \t\t\t\t}\n@@ -1351,16 +1332,16 @@\n \t\t\t\t$frame_offset = $frame_terminatorpos + strlen(\"\\x00\");\n \t\t\t}\n \n-\t\t\t$frame_picturetype = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$frame_picturetype = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \n \t\t\tif ($frame_offset >= $parsedFrame['datalength']) {\n \t\t\t\t$info['warning'][] = 'data portion of APIC frame is missing at offset '.($parsedFrame['dataoffset'] + 8 + $frame_offset);\n \t\t\t} else {\n-\t\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], $this->TextEncodingTerminatorLookup($frame_textencoding), $frame_offset);\n-\t\t\t\tif (ord(substr($parsedFrame['data'], $frame_terminatorpos + strlen($this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n+\t\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], (string) $this->TextEncodingTerminatorLookup($frame_textencoding), $frame_offset);\n+\t\t\t\tif (ord(substr((string) $parsedFrame['data'], $frame_terminatorpos + strlen((string) $this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n \t\t\t\t\t$frame_terminatorpos++; // strpos() fooled because 2nd byte of Unicode chars are often 0x00\n \t\t\t\t}\n-\t\t\t\t$frame_description = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t\t$frame_description = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\t\tif (ord($frame_description) === 0) {\n \t\t\t\t\t$frame_description = '';\n \t\t\t\t}\n@@ -1375,11 +1356,11 @@\n \t\t\t\t$parsedFrame['picturetypeid']    = $frame_picturetype;\n \t\t\t\t$parsedFrame['picturetype']      = $this->APICPictureTypeLookup($frame_picturetype);\n \t\t\t\t$parsedFrame['description']      = $frame_description;\n-\t\t\t\t$parsedFrame['data']             = substr($parsedFrame['data'], $frame_terminatorpos + strlen($this->TextEncodingTerminatorLookup($frame_textencoding)));\n-\t\t\t\t$parsedFrame['datalength']       = strlen($parsedFrame['data']);\n+\t\t\t\t$parsedFrame['data']             = substr((string) $parsedFrame['data'], $frame_terminatorpos + strlen((string) $this->TextEncodingTerminatorLookup($frame_textencoding)));\n+\t\t\t\t$parsedFrame['datalength']       = strlen((string) $parsedFrame['data']);\n \n \t\t\t\t$parsedFrame['image_mime'] = '';\n-\t\t\t\t$imageinfo = array();\n+\t\t\t\t$imageinfo = [];\n \t\t\t\t$imagechunkcheck = getid3_lib::GetDataImageSize($parsedFrame['data'], $imageinfo);\n \t\t\t\tif (($imagechunkcheck[2] >= 1) && ($imagechunkcheck[2] <= 3)) {\n \t\t\t\t\t$parsedFrame['image_mime']       = 'image/'.getid3_lib::ImageTypesLookup($imagechunkcheck[2]);\n@@ -1409,7 +1390,7 @@\n \t\t\t\t\t\t}\n */\n \t\t\t\t\t} elseif (is_string($this->getid3->option_save_attachments)) {\n-\t\t\t\t\t\t$dir = rtrim(str_replace(array('/', '\\\\'), DIRECTORY_SEPARATOR, $this->getid3->option_save_attachments), DIRECTORY_SEPARATOR);\n+\t\t\t\t\t\t$dir = rtrim(str_replace(['/', '\\\\'], DIRECTORY_SEPARATOR, $this->getid3->option_save_attachments), DIRECTORY_SEPARATOR);\n \t\t\t\t\t\tif (!is_dir($dir) || !is_writable($dir)) {\n \t\t\t\t\t\t\t// cannot write, skip\n \t\t\t\t\t\t\t$info['warning'][] = 'attachment at '.$frame_offset.' cannot be saved to \"'.$dir.'\" (not writable)';\n@@ -1419,7 +1400,7 @@\n \t\t\t\t\t}\n \t\t\t\t\t// if we get this far, must be OK\n \t\t\t\t\tif (is_string($this->getid3->option_save_attachments)) {\n-\t\t\t\t\t\t$destination_filename = $dir.DIRECTORY_SEPARATOR.md5($info['filenamepath']).'_'.$frame_offset;\n+\t\t\t\t\t\t$destination_filename = $dir.DIRECTORY_SEPARATOR.md5((string) $info['filenamepath']).'_'.$frame_offset;\n \t\t\t\t\t\tif (!file_exists($destination_filename) || is_writable($destination_filename)) {\n \t\t\t\t\t\t\tfile_put_contents($destination_filename, $parsedFrame['data']);\n \t\t\t\t\t\t} else {\n@@ -1430,9 +1411,9 @@\n \t\t\t\t\t} else {\n \t\t\t\t\t\tif (!empty($parsedFrame['framenameshort']) && !empty($parsedFrame['data'])) {\n \t\t\t\t\t\t\tif (!isset($info['id3v2']['comments']['picture'])) {\n-\t\t\t\t\t\t\t\t$info['id3v2']['comments']['picture'] = array();\n+\t\t\t\t\t\t\t\t$info['id3v2']['comments']['picture'] = [];\n \t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t$info['id3v2']['comments']['picture'][] = array('data'=>$parsedFrame['data'], 'image_mime'=>$parsedFrame['image_mime']);\n+\t\t\t\t\t\t\t$info['id3v2']['comments']['picture'][] = ['data'=>$parsedFrame['data'], 'image_mime'=>$parsedFrame['image_mime']];\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t} while (false);\n@@ -1450,38 +1431,38 @@\n \t\t\t// Encapsulated object    <binary data>\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$frame_textencoding = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$frame_textencoding = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \t\t\tif ((($id3v2_majorversion <= 3) && ($frame_textencoding > 1)) || (($id3v2_majorversion == 4) && ($frame_textencoding > 3))) {\n \t\t\t\t$info['warning'][] = 'Invalid text encoding byte ('.$frame_textencoding.') in frame \"'.$parsedFrame['frame_name'].'\" - defaulting to ISO-8859-1 encoding';\n \t\t\t}\n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], \"\\x00\", $frame_offset);\n-\t\t\t$frame_mimetype = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], \"\\x00\", $frame_offset);\n+\t\t\t$frame_mimetype = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\tif (ord($frame_mimetype) === 0) {\n \t\t\t\t$frame_mimetype = '';\n \t\t\t}\n \t\t\t$frame_offset = $frame_terminatorpos + strlen(\"\\x00\");\n \n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], $this->TextEncodingTerminatorLookup($frame_textencoding), $frame_offset);\n-\t\t\tif (ord(substr($parsedFrame['data'], $frame_terminatorpos + strlen($this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], (string) $this->TextEncodingTerminatorLookup($frame_textencoding), $frame_offset);\n+\t\t\tif (ord(substr((string) $parsedFrame['data'], $frame_terminatorpos + strlen((string) $this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n \t\t\t\t$frame_terminatorpos++; // strpos() fooled because 2nd byte of Unicode chars are often 0x00\n \t\t\t}\n-\t\t\t$frame_filename = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t$frame_filename = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\tif (ord($frame_filename) === 0) {\n \t\t\t\t$frame_filename = '';\n \t\t\t}\n-\t\t\t$frame_offset = $frame_terminatorpos + strlen($this->TextEncodingTerminatorLookup($frame_textencoding));\n+\t\t\t$frame_offset = $frame_terminatorpos + strlen((string) $this->TextEncodingTerminatorLookup($frame_textencoding));\n \n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], $this->TextEncodingTerminatorLookup($frame_textencoding), $frame_offset);\n-\t\t\tif (ord(substr($parsedFrame['data'], $frame_terminatorpos + strlen($this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], (string) $this->TextEncodingTerminatorLookup($frame_textencoding), $frame_offset);\n+\t\t\tif (ord(substr((string) $parsedFrame['data'], $frame_terminatorpos + strlen((string) $this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n \t\t\t\t$frame_terminatorpos++; // strpos() fooled because 2nd byte of Unicode chars are often 0x00\n \t\t\t}\n-\t\t\t$frame_description = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t$frame_description = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\tif (ord($frame_description) === 0) {\n \t\t\t\t$frame_description = '';\n \t\t\t}\n-\t\t\t$frame_offset = $frame_terminatorpos + strlen($this->TextEncodingTerminatorLookup($frame_textencoding));\n+\t\t\t$frame_offset = $frame_terminatorpos + strlen((string) $this->TextEncodingTerminatorLookup($frame_textencoding));\n \n-\t\t\t$parsedFrame['objectdata']  = (string) substr($parsedFrame['data'], $frame_offset);\n+\t\t\t$parsedFrame['objectdata']  = (string) substr((string) $parsedFrame['data'], $frame_offset);\n \t\t\t$parsedFrame['encodingid']  = $frame_textencoding;\n \t\t\t$parsedFrame['encoding']    = $this->TextEncodingNameLookup($frame_textencoding);\n \n@@ -1512,14 +1493,14 @@\n \t\t\t// Counter         $xx xx xx xx (xx ...)\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], \"\\x00\", $frame_offset);\n-\t\t\t$frame_emailaddress = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], \"\\x00\", $frame_offset);\n+\t\t\t$frame_emailaddress = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\tif (ord($frame_emailaddress) === 0) {\n \t\t\t\t$frame_emailaddress = '';\n \t\t\t}\n \t\t\t$frame_offset = $frame_terminatorpos + strlen(\"\\x00\");\n-\t\t\t$frame_rating = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n-\t\t\t$parsedFrame['counter'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset));\n+\t\t\t$frame_rating = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$parsedFrame['counter'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset));\n \t\t\t$parsedFrame['email']   = $frame_emailaddress;\n \t\t\t$parsedFrame['rating']  = $frame_rating;\n \t\t\tunset($parsedFrame['data']);\n@@ -1534,12 +1515,12 @@\n \t\t\t// Offset to next tag        $xx xx xx xx\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$parsedFrame['buffersize'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, 3));\n+\t\t\t$parsedFrame['buffersize'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, 3));\n \t\t\t$frame_offset += 3;\n \n-\t\t\t$frame_embeddedinfoflags = getid3_lib::BigEndian2Bin(substr($parsedFrame['data'], $frame_offset++, 1));\n-\t\t\t$parsedFrame['flags']['embededinfo'] = (bool) substr($frame_embeddedinfoflags, 7, 1);\n-\t\t\t$parsedFrame['nexttagoffset'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, 4));\n+\t\t\t$frame_embeddedinfoflags = getid3_lib::BigEndian2Bin(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$parsedFrame['flags']['embededinfo'] = (bool) substr((string) $frame_embeddedinfoflags, 7, 1);\n+\t\t\t$parsedFrame['nexttagoffset'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, 4));\n \t\t\tunset($parsedFrame['data']);\n \n \n@@ -1552,12 +1533,12 @@\n \t\t\t// Encrypted datablock   <binary data>\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], \"\\x00\", $frame_offset);\n-\t\t\t$frame_ownerid = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], \"\\x00\", $frame_offset);\n+\t\t\t$frame_ownerid = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\t$frame_offset = $frame_terminatorpos + strlen(\"\\x00\");\n \n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], \"\\x00\", $frame_offset);\n-\t\t\t$frame_description = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], \"\\x00\", $frame_offset);\n+\t\t\t$frame_description = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\tif (ord($frame_description) === 0) {\n \t\t\t\t$frame_description = '';\n \t\t\t}\n@@ -1564,7 +1545,7 @@\n \t\t\t$frame_offset = $frame_terminatorpos + strlen(\"\\x00\");\n \n \t\t\t$parsedFrame['ownerid']     = $frame_ownerid;\n-\t\t\t$parsedFrame['data']        = (string) substr($parsedFrame['data'], $frame_offset);\n+\t\t\t$parsedFrame['data']        = (string) substr((string) $parsedFrame['data'], $frame_offset);\n \t\t\t$parsedFrame['description'] = $frame_description;\n \t\t\tunset($parsedFrame['data']);\n \n@@ -1580,18 +1561,18 @@\n \t\t\t// Encryption info    <binary data>\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], \"\\x00\", $frame_offset);\n-\t\t\t$frame_ownerid = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], \"\\x00\", $frame_offset);\n+\t\t\t$frame_ownerid = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\tif (ord($frame_ownerid) === 0) {\n \t\t\t\t$frame_ownerid == '';\n \t\t\t}\n \t\t\t$frame_offset = $frame_terminatorpos + strlen(\"\\x00\");\n \t\t\t$parsedFrame['ownerid'] = $frame_ownerid;\n-\t\t\t$parsedFrame['previewstart'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, 2));\n+\t\t\t$parsedFrame['previewstart'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, 2));\n \t\t\t$frame_offset += 2;\n-\t\t\t$parsedFrame['previewlength'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, 2));\n+\t\t\t$parsedFrame['previewlength'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, 2));\n \t\t\t$frame_offset += 2;\n-\t\t\t$parsedFrame['encryptioninfo'] = (string) substr($parsedFrame['data'], $frame_offset);\n+\t\t\t$parsedFrame['encryptioninfo'] = (string) substr((string) $parsedFrame['data'], $frame_offset);\n \t\t\tunset($parsedFrame['data']);\n \n \n@@ -1607,15 +1588,15 @@\n \n \t\t\t$frame_offset = 0;\n \t\t\tif ($id3v2_majorversion == 2) {\n-\t\t\t\t$parsedFrame['frameid'] = substr($parsedFrame['data'], $frame_offset, 3);\n+\t\t\t\t$parsedFrame['frameid'] = substr((string) $parsedFrame['data'], $frame_offset, 3);\n \t\t\t\t$frame_offset += 3;\n \t\t\t} else {\n-\t\t\t\t$parsedFrame['frameid'] = substr($parsedFrame['data'], $frame_offset, 4);\n+\t\t\t\t$parsedFrame['frameid'] = substr((string) $parsedFrame['data'], $frame_offset, 4);\n \t\t\t\t$frame_offset += 4;\n \t\t\t}\n \n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], \"\\x00\", $frame_offset);\n-\t\t\t$frame_url = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], \"\\x00\", $frame_offset);\n+\t\t\t$frame_url = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\tif (ord($frame_url) === 0) {\n \t\t\t\t$frame_url = '';\n \t\t\t}\n@@ -1622,9 +1603,9 @@\n \t\t\t$frame_offset = $frame_terminatorpos + strlen(\"\\x00\");\n \t\t\t$parsedFrame['url'] = $frame_url;\n \n-\t\t\t$parsedFrame['additionaldata'] = (string) substr($parsedFrame['data'], $frame_offset);\n+\t\t\t$parsedFrame['additionaldata'] = (string) substr((string) $parsedFrame['data'], $frame_offset);\n \t\t\tif (!empty($parsedFrame['framenameshort']) && $parsedFrame['url']) {\n-\t\t\t\t$info['id3v2']['comments'][$parsedFrame['framenameshort']][] = utf8_encode($parsedFrame['url']);\n+\t\t\t\t$info['id3v2']['comments'][$parsedFrame['framenameshort']][] = mb_convert_encoding($parsedFrame['url'], 'UTF-8', 'ISO-8859-1');\n \t\t\t}\n \t\t\tunset($parsedFrame['data']);\n \n@@ -1636,8 +1617,8 @@\n \t\t\t// Position                  $xx (xx ...)\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$parsedFrame['timestampformat'] = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n-\t\t\t$parsedFrame['position']        = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset));\n+\t\t\t$parsedFrame['timestampformat'] = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$parsedFrame['position']        = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset));\n \t\t\tunset($parsedFrame['data']);\n \n \n@@ -1650,11 +1631,11 @@\n \t\t\t// The actual text      <text string according to encoding>\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$frame_textencoding = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$frame_textencoding = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \t\t\tif ((($id3v2_majorversion <= 3) && ($frame_textencoding > 1)) || (($id3v2_majorversion == 4) && ($frame_textencoding > 3))) {\n \t\t\t\t$info['warning'][] = 'Invalid text encoding byte ('.$frame_textencoding.') in frame \"'.$parsedFrame['frame_name'].'\" - defaulting to ISO-8859-1 encoding';\n \t\t\t}\n-\t\t\t$frame_language = substr($parsedFrame['data'], $frame_offset, 3);\n+\t\t\t$frame_language = substr((string) $parsedFrame['data'], $frame_offset, 3);\n \t\t\t$frame_offset += 3;\n \t\t\t$parsedFrame['language']     = $frame_language;\n \t\t\t$parsedFrame['languagename'] = $this->LanguageLookup($frame_language, false);\n@@ -1661,7 +1642,7 @@\n \t\t\t$parsedFrame['encodingid']   = $frame_textencoding;\n \t\t\t$parsedFrame['encoding']     = $this->TextEncodingNameLookup($frame_textencoding);\n \n-\t\t\t$parsedFrame['data']         = (string) substr($parsedFrame['data'], $frame_offset);\n+\t\t\t$parsedFrame['data']         = (string) substr((string) $parsedFrame['data'], $frame_offset);\n \t\t\tif (!empty($parsedFrame['framenameshort']) && !empty($parsedFrame['data'])) {\n \t\t\t\t$info['id3v2']['comments'][$parsedFrame['framenameshort']][] = getid3_lib::iconv_fallback($parsedFrame['encoding'], $info['id3v2']['encoding'], $parsedFrame['data']);\n \t\t\t}\n@@ -1677,7 +1658,7 @@\n \t\t\t// Seller            <text string according to encoding>\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$frame_textencoding = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$frame_textencoding = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \t\t\tif ((($id3v2_majorversion <= 3) && ($frame_textencoding > 1)) || (($id3v2_majorversion == 4) && ($frame_textencoding > 3))) {\n \t\t\t\t$info['warning'][] = 'Invalid text encoding byte ('.$frame_textencoding.') in frame \"'.$parsedFrame['frame_name'].'\" - defaulting to ISO-8859-1 encoding';\n \t\t\t}\n@@ -1684,21 +1665,21 @@\n \t\t\t$parsedFrame['encodingid'] = $frame_textencoding;\n \t\t\t$parsedFrame['encoding']   = $this->TextEncodingNameLookup($frame_textencoding);\n \n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], \"\\x00\", $frame_offset);\n-\t\t\t$frame_pricepaid = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], \"\\x00\", $frame_offset);\n+\t\t\t$frame_pricepaid = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\t$frame_offset = $frame_terminatorpos + strlen(\"\\x00\");\n \n-\t\t\t$parsedFrame['pricepaid']['currencyid'] = substr($frame_pricepaid, 0, 3);\n+\t\t\t$parsedFrame['pricepaid']['currencyid'] = substr((string) $frame_pricepaid, 0, 3);\n \t\t\t$parsedFrame['pricepaid']['currency']   = $this->LookupCurrencyUnits($parsedFrame['pricepaid']['currencyid']);\n-\t\t\t$parsedFrame['pricepaid']['value']      = substr($frame_pricepaid, 3);\n+\t\t\t$parsedFrame['pricepaid']['value']      = substr((string) $frame_pricepaid, 3);\n \n-\t\t\t$parsedFrame['purchasedate'] = substr($parsedFrame['data'], $frame_offset, 8);\n+\t\t\t$parsedFrame['purchasedate'] = substr((string) $parsedFrame['data'], $frame_offset, 8);\n \t\t\tif (!$this->IsValidDateStampString($parsedFrame['purchasedate'])) {\n-\t\t\t\t$parsedFrame['purchasedateunix'] = mktime (0, 0, 0, substr($parsedFrame['purchasedate'], 4, 2), substr($parsedFrame['purchasedate'], 6, 2), substr($parsedFrame['purchasedate'], 0, 4));\n+\t\t\t\t$parsedFrame['purchasedateunix'] = mktime (0, 0, 0, substr((string) $parsedFrame['purchasedate'], 4, 2), substr((string) $parsedFrame['purchasedate'], 6, 2), substr((string) $parsedFrame['purchasedate'], 0, 4));\n \t\t\t}\n \t\t\t$frame_offset += 8;\n \n-\t\t\t$parsedFrame['seller'] = (string) substr($parsedFrame['data'], $frame_offset);\n+\t\t\t$parsedFrame['seller'] = (string) substr((string) $parsedFrame['data'], $frame_offset);\n \t\t\tunset($parsedFrame['data']);\n \n \n@@ -1717,55 +1698,55 @@\n \t\t\t// Seller logo        <binary data>\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$frame_textencoding = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$frame_textencoding = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \t\t\tif ((($id3v2_majorversion <= 3) && ($frame_textencoding > 1)) || (($id3v2_majorversion == 4) && ($frame_textencoding > 3))) {\n \t\t\t\t$info['warning'][] = 'Invalid text encoding byte ('.$frame_textencoding.') in frame \"'.$parsedFrame['frame_name'].'\" - defaulting to ISO-8859-1 encoding';\n \t\t\t}\n \n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], \"\\x00\", $frame_offset);\n-\t\t\t$frame_pricestring = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], \"\\x00\", $frame_offset);\n+\t\t\t$frame_pricestring = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\t$frame_offset = $frame_terminatorpos + strlen(\"\\x00\");\n-\t\t\t$frame_rawpricearray = explode('/', $frame_pricestring);\n+\t\t\t$frame_rawpricearray = explode('/', (string) $frame_pricestring);\n \t\t\tforeach ($frame_rawpricearray as $key => $val) {\n-\t\t\t\t$frame_currencyid = substr($val, 0, 3);\n+\t\t\t\t$frame_currencyid = substr((string) $val, 0, 3);\n \t\t\t\t$parsedFrame['price'][$frame_currencyid]['currency'] = $this->LookupCurrencyUnits($frame_currencyid);\n-\t\t\t\t$parsedFrame['price'][$frame_currencyid]['value']    = substr($val, 3);\n+\t\t\t\t$parsedFrame['price'][$frame_currencyid]['value']    = substr((string) $val, 3);\n \t\t\t}\n \n-\t\t\t$frame_datestring = substr($parsedFrame['data'], $frame_offset, 8);\n+\t\t\t$frame_datestring = substr((string) $parsedFrame['data'], $frame_offset, 8);\n \t\t\t$frame_offset += 8;\n \n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], \"\\x00\", $frame_offset);\n-\t\t\t$frame_contacturl = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], \"\\x00\", $frame_offset);\n+\t\t\t$frame_contacturl = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\t$frame_offset = $frame_terminatorpos + strlen(\"\\x00\");\n \n-\t\t\t$frame_receivedasid = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$frame_receivedasid = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], $this->TextEncodingTerminatorLookup($frame_textencoding), $frame_offset);\n-\t\t\tif (ord(substr($parsedFrame['data'], $frame_terminatorpos + strlen($this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], (string) $this->TextEncodingTerminatorLookup($frame_textencoding), $frame_offset);\n+\t\t\tif (ord(substr((string) $parsedFrame['data'], $frame_terminatorpos + strlen((string) $this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n \t\t\t\t$frame_terminatorpos++; // strpos() fooled because 2nd byte of Unicode chars are often 0x00\n \t\t\t}\n-\t\t\t$frame_sellername = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t$frame_sellername = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\tif (ord($frame_sellername) === 0) {\n \t\t\t\t$frame_sellername = '';\n \t\t\t}\n-\t\t\t$frame_offset = $frame_terminatorpos + strlen($this->TextEncodingTerminatorLookup($frame_textencoding));\n+\t\t\t$frame_offset = $frame_terminatorpos + strlen((string) $this->TextEncodingTerminatorLookup($frame_textencoding));\n \n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], $this->TextEncodingTerminatorLookup($frame_textencoding), $frame_offset);\n-\t\t\tif (ord(substr($parsedFrame['data'], $frame_terminatorpos + strlen($this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], (string) $this->TextEncodingTerminatorLookup($frame_textencoding), $frame_offset);\n+\t\t\tif (ord(substr((string) $parsedFrame['data'], $frame_terminatorpos + strlen((string) $this->TextEncodingTerminatorLookup($frame_textencoding)), 1)) === 0) {\n \t\t\t\t$frame_terminatorpos++; // strpos() fooled because 2nd byte of Unicode chars are often 0x00\n \t\t\t}\n-\t\t\t$frame_description = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t$frame_description = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\tif (ord($frame_description) === 0) {\n \t\t\t\t$frame_description = '';\n \t\t\t}\n-\t\t\t$frame_offset = $frame_terminatorpos + strlen($this->TextEncodingTerminatorLookup($frame_textencoding));\n+\t\t\t$frame_offset = $frame_terminatorpos + strlen((string) $this->TextEncodingTerminatorLookup($frame_textencoding));\n \n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], \"\\x00\", $frame_offset);\n-\t\t\t$frame_mimetype = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], \"\\x00\", $frame_offset);\n+\t\t\t$frame_mimetype = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\t$frame_offset = $frame_terminatorpos + strlen(\"\\x00\");\n \n-\t\t\t$frame_sellerlogo = substr($parsedFrame['data'], $frame_offset);\n+\t\t\t$frame_sellerlogo = substr((string) $parsedFrame['data'], $frame_offset);\n \n \t\t\t$parsedFrame['encodingid']        = $frame_textencoding;\n \t\t\t$parsedFrame['encoding']          = $this->TextEncodingNameLookup($frame_textencoding);\n@@ -1791,8 +1772,8 @@\n \t\t\t// Encryption data     <binary data>\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], \"\\x00\", $frame_offset);\n-\t\t\t$frame_ownerid = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], \"\\x00\", $frame_offset);\n+\t\t\t$frame_ownerid = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\tif (ord($frame_ownerid) === 0) {\n \t\t\t\t$frame_ownerid = '';\n \t\t\t}\n@@ -1799,8 +1780,8 @@\n \t\t\t$frame_offset = $frame_terminatorpos + strlen(\"\\x00\");\n \n \t\t\t$parsedFrame['ownerid']      = $frame_ownerid;\n-\t\t\t$parsedFrame['methodsymbol'] = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n-\t\t\t$parsedFrame['data']         = (string) substr($parsedFrame['data'], $frame_offset);\n+\t\t\t$parsedFrame['methodsymbol'] = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$parsedFrame['data']         = (string) substr((string) $parsedFrame['data'], $frame_offset);\n \n \n \t\t} elseif (($id3v2_majorversion >= 3) && ($parsedFrame['frame_name'] == 'GRID')) { // 4.26  GRID Group identification registration (ID3v2.3+ only)\n@@ -1814,8 +1795,8 @@\n \t\t\t// Group dependent data  <binary data>\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], \"\\x00\", $frame_offset);\n-\t\t\t$frame_ownerid = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], \"\\x00\", $frame_offset);\n+\t\t\t$frame_ownerid = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\tif (ord($frame_ownerid) === 0) {\n \t\t\t\t$frame_ownerid = '';\n \t\t\t}\n@@ -1822,8 +1803,8 @@\n \t\t\t$frame_offset = $frame_terminatorpos + strlen(\"\\x00\");\n \n \t\t\t$parsedFrame['ownerid']       = $frame_ownerid;\n-\t\t\t$parsedFrame['groupsymbol']   = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n-\t\t\t$parsedFrame['data']          = (string) substr($parsedFrame['data'], $frame_offset);\n+\t\t\t$parsedFrame['groupsymbol']   = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$parsedFrame['data']          = (string) substr((string) $parsedFrame['data'], $frame_offset);\n \n \n \t\t} elseif (($id3v2_majorversion >= 3) && ($parsedFrame['frame_name'] == 'PRIV')) { // 4.27  PRIV Private frame (ID3v2.3+ only)\n@@ -1834,8 +1815,8 @@\n \t\t\t// The private data      <binary data>\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$frame_terminatorpos = strpos($parsedFrame['data'], \"\\x00\", $frame_offset);\n-\t\t\t$frame_ownerid = substr($parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n+\t\t\t$frame_terminatorpos = strpos((string) $parsedFrame['data'], \"\\x00\", $frame_offset);\n+\t\t\t$frame_ownerid = substr((string) $parsedFrame['data'], $frame_offset, $frame_terminatorpos - $frame_offset);\n \t\t\tif (ord($frame_ownerid) === 0) {\n \t\t\t\t$frame_ownerid = '';\n \t\t\t}\n@@ -1842,7 +1823,7 @@\n \t\t\t$frame_offset = $frame_terminatorpos + strlen(\"\\x00\");\n \n \t\t\t$parsedFrame['ownerid'] = $frame_ownerid;\n-\t\t\t$parsedFrame['data']    = (string) substr($parsedFrame['data'], $frame_offset);\n+\t\t\t$parsedFrame['data']    = (string) substr((string) $parsedFrame['data'], $frame_offset);\n \n \n \t\t} elseif (($id3v2_majorversion >= 4) && ($parsedFrame['frame_name'] == 'SIGN')) { // 4.28  SIGN Signature frame (ID3v2.4+ only)\n@@ -1853,8 +1834,8 @@\n \t\t\t// Signature         <binary data>\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$parsedFrame['groupsymbol'] = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n-\t\t\t$parsedFrame['data']        = (string) substr($parsedFrame['data'], $frame_offset);\n+\t\t\t$parsedFrame['groupsymbol'] = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$parsedFrame['data']        = (string) substr((string) $parsedFrame['data'], $frame_offset);\n \n \n \t\t} elseif (($id3v2_majorversion >= 4) && ($parsedFrame['frame_name'] == 'SEEK')) { // 4.29  SEEK Seek frame (ID3v2.4+ only)\n@@ -1863,7 +1844,7 @@\n \t\t\t// Minimum offset to next tag       $xx xx xx xx\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$parsedFrame['data']          = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, 4));\n+\t\t\t$parsedFrame['data']          = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, 4));\n \n \n \t\t} elseif (($id3v2_majorversion >= 4) && ($parsedFrame['frame_name'] == 'ASPI')) { // 4.30  ASPI Audio seek point index (ID3v2.4+ only)\n@@ -1877,16 +1858,16 @@\n \t\t\t// Fraction at index (Fi)          $xx (xx)\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$parsedFrame['datastart'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, 4));\n+\t\t\t$parsedFrame['datastart'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, 4));\n \t\t\t$frame_offset += 4;\n-\t\t\t$parsedFrame['indexeddatalength'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, 4));\n+\t\t\t$parsedFrame['indexeddatalength'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, 4));\n \t\t\t$frame_offset += 4;\n-\t\t\t$parsedFrame['indexpoints'] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, 2));\n+\t\t\t$parsedFrame['indexpoints'] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, 2));\n \t\t\t$frame_offset += 2;\n-\t\t\t$parsedFrame['bitsperpoint'] = ord(substr($parsedFrame['data'], $frame_offset++, 1));\n+\t\t\t$parsedFrame['bitsperpoint'] = ord(substr((string) $parsedFrame['data'], $frame_offset++, 1));\n \t\t\t$frame_bytesperpoint = ceil($parsedFrame['bitsperpoint'] / 8);\n \t\t\tfor ($i = 0; $i < $frame_indexpoints; $i++) {\n-\t\t\t\t$parsedFrame['indexes'][$i] = getid3_lib::BigEndian2Int(substr($parsedFrame['data'], $frame_offset, $frame_bytesperpoint));\n+\t\t\t\t$parsedFrame['indexes'][$i] = getid3_lib::BigEndian2Int(substr((string) $parsedFrame['data'], $frame_offset, $frame_bytesperpoint));\n \t\t\t\t$frame_offset += $frame_bytesperpoint;\n \t\t\t}\n \t\t\tunset($parsedFrame['data']);\n@@ -1904,20 +1885,20 @@\n \t\t\t//   d - replay gain adjustment\n \n \t\t\t$frame_offset = 0;\n-\t\t\t$parsedFrame['peakamplitude'] = getid3_lib::BigEndian2Float(substr($parsedFrame['data'], $frame_offset, 4));\n+\t\t\t$parsedFrame['peakamplitude'] = getid3_lib::BigEndian2Float(substr((string) $parsedFrame['data'], $frame_offset, 4));\n \t\t\t$frame_offset += 4;\n-\t\t\t$rg_track_adjustment = getid3_lib::Dec2Bin(substr($parsedFrame['data'], $frame_offset, 2));\n+\t\t\t$rg_track_adjustment = getid3_lib::Dec2Bin(substr((string) $parsedFrame['data'], $frame_offset, 2));\n \t\t\t$frame_offset += 2;\n-\t\t\t$rg_album_adjustment = getid3_lib::Dec2Bin(substr($parsedFrame['data'], $frame_offset, 2));\n+\t\t\t$rg_album_adjustment = getid3_lib::Dec2Bin(substr((string) $parsedFrame['data'], $frame_offset, 2));\n \t\t\t$frame_offset += 2;\n-\t\t\t$parsedFrame['raw']['track']['name']       = getid3_lib::Bin2Dec(substr($rg_track_adjustment, 0, 3));\n-\t\t\t$parsedFrame['raw']['track']['originator'] = getid3_lib::Bin2Dec(substr($rg_track_adjustment, 3, 3));\n-\t\t\t$parsedFrame['raw']['track']['signbit']    = getid3_lib::Bin2Dec(substr($rg_track_adjustment, 6, 1));\n-\t\t\t$parsedFrame['raw']['track']['adjustment'] = getid3_lib::Bin2Dec(substr($rg_track_adjustment, 7, 9));\n-\t\t\t$parsedFrame['raw']['album']['name']       = getid3_lib::Bin2Dec(substr($rg_album_adjustment, 0, 3));\n-\t\t\t$parsedFrame['raw']['album']['originator'] = getid3_lib::Bin2Dec(substr($rg_album_adjustment, 3, 3));\n-\t\t\t$parsedFrame['raw']['album']['signbit']    = getid3_lib::Bin2Dec(substr($rg_album_adjustment, 6, 1));\n-\t\t\t$parsedFrame['raw']['album']['adjustment'] = getid3_lib::Bin2Dec(substr($rg_album_adjustment, 7, 9));\n+\t\t\t$parsedFrame['raw']['track']['name']       = getid3_lib::Bin2Dec(substr((string) $rg_track_adjustment, 0, 3));\n+\t\t\t$parsedFrame['raw']['track']['originator'] = getid3_lib::Bin2Dec(substr((string) $rg_track_adjustment, 3, 3));\n+\t\t\t$parsedFrame['raw']['track']['signbit']    = getid3_lib::Bin2Dec(substr((string) $rg_track_adjustment, 6, 1));\n+\t\t\t$parsedFrame['raw']['track']['adjustment'] = getid3_lib::Bin2Dec(substr((string) $rg_track_adjustment, 7, 9));\n+\t\t\t$parsedFrame['raw']['album']['name']       = getid3_lib::Bin2Dec(substr((string) $rg_album_adjustment, 0, 3));\n+\t\t\t$parsedFrame['raw']['album']['originator'] = getid3_lib::Bin2Dec(substr((string) $rg_album_adjustment, 3, 3));\n+\t\t\t$parsedFrame['raw']['album']['signbit']    = getid3_lib::Bin2Dec(substr((string) $rg_album_adjustment, 6, 1));\n+\t\t\t$parsedFrame['raw']['album']['adjustment'] = getid3_lib::Bin2Dec(substr((string) $rg_album_adjustment, 7, 9));\n \t\t\t$parsedFrame['track']['name']       = getid3_lib::RGADnameLookup($parsedFrame['raw']['track']['name']);\n \t\t\t$parsedFrame['track']['originator'] = getid3_lib::RGADoriginatorLookup($parsedFrame['raw']['track']['originator']);\n \t\t\t$parsedFrame['track']['adjustment'] = getid3_lib::RGADadjustmentLookup($parsedFrame['raw']['track']['adjustment'], $parsedFrame['raw']['track']['signbit']);\n@@ -1944,49 +1925,49 @@\n \t}\n \n \tpublic function LookupExtendedHeaderRestrictionsTagSizeLimits($index) {\n-\t\tstatic $LookupExtendedHeaderRestrictionsTagSizeLimits = array(\n+\t\tstatic $LookupExtendedHeaderRestrictionsTagSizeLimits = [\n \t\t\t0x00 => 'No more than 128 frames and 1 MB total tag size',\n \t\t\t0x01 => 'No more than 64 frames and 128 KB total tag size',\n \t\t\t0x02 => 'No more than 32 frames and 40 KB total tag size',\n \t\t\t0x03 => 'No more than 32 frames and 4 KB total tag size',\n-\t\t);\n-\t\treturn (isset($LookupExtendedHeaderRestrictionsTagSizeLimits[$index]) ? $LookupExtendedHeaderRestrictionsTagSizeLimits[$index] : '');\n+\t\t];\n+\t\treturn ($LookupExtendedHeaderRestrictionsTagSizeLimits[$index] ?? '');\n \t}\n \n \tpublic function LookupExtendedHeaderRestrictionsTextEncodings($index) {\n-\t\tstatic $LookupExtendedHeaderRestrictionsTextEncodings = array(\n+\t\tstatic $LookupExtendedHeaderRestrictionsTextEncodings = [\n \t\t\t0x00 => 'No restrictions',\n \t\t\t0x01 => 'Strings are only encoded with ISO-8859-1 or UTF-8',\n-\t\t);\n-\t\treturn (isset($LookupExtendedHeaderRestrictionsTextEncodings[$index]) ? $LookupExtendedHeaderRestrictionsTextEncodings[$index] : '');\n+\t\t];\n+\t\treturn ($LookupExtendedHeaderRestrictionsTextEncodings[$index] ?? '');\n \t}\n \n \tpublic function LookupExtendedHeaderRestrictionsTextFieldSize($index) {\n-\t\tstatic $LookupExtendedHeaderRestrictionsTextFieldSize = array(\n+\t\tstatic $LookupExtendedHeaderRestrictionsTextFieldSize = [\n \t\t\t0x00 => 'No restrictions',\n \t\t\t0x01 => 'No string is longer than 1024 characters',\n \t\t\t0x02 => 'No string is longer than 128 characters',\n \t\t\t0x03 => 'No string is longer than 30 characters',\n-\t\t);\n-\t\treturn (isset($LookupExtendedHeaderRestrictionsTextFieldSize[$index]) ? $LookupExtendedHeaderRestrictionsTextFieldSize[$index] : '');\n+\t\t];\n+\t\treturn ($LookupExtendedHeaderRestrictionsTextFieldSize[$index] ?? '');\n \t}\n \n \tpublic function LookupExtendedHeaderRestrictionsImageEncoding($index) {\n-\t\tstatic $LookupExtendedHeaderRestrictionsImageEncoding = array(\n+\t\tstatic $LookupExtendedHeaderRestrictionsImageEncoding = [\n \t\t\t0x00 => 'No restrictions',\n \t\t\t0x01 => 'Images are encoded only with PNG or JPEG',\n-\t\t);\n-\t\treturn (isset($LookupExtendedHeaderRestrictionsImageEncoding[$index]) ? $LookupExtendedHeaderRestrictionsImageEncoding[$index] : '');\n+\t\t];\n+\t\treturn ($LookupExtendedHeaderRestrictionsImageEncoding[$index] ?? '');\n \t}\n \n \tpublic function LookupExtendedHeaderRestrictionsImageSizeSize($index) {\n-\t\tstatic $LookupExtendedHeaderRestrictionsImageSizeSize = array(\n+\t\tstatic $LookupExtendedHeaderRestrictionsImageSizeSize = [\n \t\t\t0x00 => 'No restrictions',\n \t\t\t0x01 => 'All images are 256x256 pixels or smaller',\n \t\t\t0x02 => 'All images are 64x64 pixels or smaller',\n \t\t\t0x03 => 'All images are exactly 64x64 pixels, unless required otherwise',\n-\t\t);\n-\t\treturn (isset($LookupExtendedHeaderRestrictionsImageSizeSize[$index]) ? $LookupExtendedHeaderRestrictionsImageSizeSize[$index] : '');\n+\t\t];\n+\t\treturn ($LookupExtendedHeaderRestrictionsImageSizeSize[$index] ?? '');\n \t}\n \n \tpublic function LookupCurrencyUnits($currencyid) {\n@@ -2386,7 +2367,7 @@\n \tpublic static function LanguageLookup($languagecode, $casesensitive=false) {\n \n \t\tif (!$casesensitive) {\n-\t\t\t$languagecode = strtolower($languagecode);\n+\t\t\t$languagecode = strtolower((string) $languagecode);\n \t\t}\n \n \t\t// http://www.id3.org/id3v2.4.0-structure.txt\n@@ -2850,7 +2831,7 @@\n \t\t\treturn 'reserved for future use';\n \t\t}\n \n-\t\tstatic $EventLookup = array(\n+\t\tstatic $EventLookup = [\n \t\t\t0x00 => 'padding (has no meaning)',\n \t\t\t0x01 => 'end of initial silence',\n \t\t\t0x02 => 'intro start',\n@@ -2877,13 +2858,13 @@\n \t\t\t0xFD => 'audio end (start of silence)',\n \t\t\t0xFE => 'audio file ends',\n \t\t\t0xFF => 'one more byte of events follows'\n-\t\t);\n+\t\t];\n \n-\t\treturn (isset($EventLookup[$index]) ? $EventLookup[$index] : '');\n+\t\treturn ($EventLookup[$index] ?? '');\n \t}\n \n \tpublic static function SYTLContentTypeLookup($index) {\n-\t\tstatic $SYTLContentTypeLookup = array(\n+\t\tstatic $SYTLContentTypeLookup = [\n \t\t\t0x00 => 'other',\n \t\t\t0x01 => 'lyrics',\n \t\t\t0x02 => 'text transcription',\n@@ -2893,13 +2874,13 @@\n \t\t\t0x06 => 'trivia/\\'pop up\\' information',\n \t\t\t0x07 => 'URLs to webpages',\n \t\t\t0x08 => 'URLs to images'\n-\t\t);\n+\t\t];\n \n-\t\treturn (isset($SYTLContentTypeLookup[$index]) ? $SYTLContentTypeLookup[$index] : '');\n+\t\treturn ($SYTLContentTypeLookup[$index] ?? '');\n \t}\n \n \tpublic static function APICPictureTypeLookup($index, $returnarray=false) {\n-\t\tstatic $APICPictureTypeLookup = array(\n+\t\tstatic $APICPictureTypeLookup = [\n \t\t\t0x00 => 'Other',\n \t\t\t0x01 => '32x32 pixels \\'file icon\\' (PNG only)',\n \t\t\t0x02 => 'Other file icon',\n@@ -2921,15 +2902,15 @@\n \t\t\t0x12 => 'Illustration',\n \t\t\t0x13 => 'Band/artist logotype',\n \t\t\t0x14 => 'Publisher/Studio logotype'\n-\t\t);\n+\t\t];\n \t\tif ($returnarray) {\n \t\t\treturn $APICPictureTypeLookup;\n \t\t}\n-\t\treturn (isset($APICPictureTypeLookup[$index]) ? $APICPictureTypeLookup[$index] : '');\n+\t\treturn ($APICPictureTypeLookup[$index] ?? '');\n \t}\n \n \tpublic static function COMRReceivedAsLookup($index) {\n-\t\tstatic $COMRReceivedAsLookup = array(\n+\t\tstatic $COMRReceivedAsLookup = [\n \t\t\t0x00 => 'Other',\n \t\t\t0x01 => 'Standard CD album with other songs',\n \t\t\t0x02 => 'Compressed audio on CD',\n@@ -2939,13 +2920,13 @@\n \t\t\t0x06 => 'As note sheets in a book with other sheets',\n \t\t\t0x07 => 'Music on other media',\n \t\t\t0x08 => 'Non-musical merchandise'\n-\t\t);\n+\t\t];\n \n-\t\treturn (isset($COMRReceivedAsLookup[$index]) ? $COMRReceivedAsLookup[$index] : '');\n+\t\treturn ($COMRReceivedAsLookup[$index] ?? '');\n \t}\n \n \tpublic static function RVA2ChannelTypeLookup($index) {\n-\t\tstatic $RVA2ChannelTypeLookup = array(\n+\t\tstatic $RVA2ChannelTypeLookup = [\n \t\t\t0x00 => 'Other',\n \t\t\t0x01 => 'Master volume',\n \t\t\t0x02 => 'Front right',\n@@ -2955,9 +2936,9 @@\n \t\t\t0x06 => 'Front centre',\n \t\t\t0x07 => 'Back centre',\n \t\t\t0x08 => 'Subwoofer'\n-\t\t);\n+\t\t];\n \n-\t\treturn (isset($RVA2ChannelTypeLookup[$index]) ? $RVA2ChannelTypeLookup[$index] : '');\n+\t\treturn ($RVA2ChannelTypeLookup[$index] ?? '');\n \t}\n \n \tpublic static function FrameNameLongLookup($framename) {\n@@ -3326,49 +3307,44 @@\n \tpublic static function TextEncodingTerminatorLookup($encoding) {\n \t\t// http://www.id3.org/id3v2.4.0-structure.txt\n \t\t// Frames that allow different types of text encoding contains a text encoding description byte. Possible encodings:\n-\t\tstatic $TextEncodingTerminatorLookup = array(\n+\t\tstatic $TextEncodingTerminatorLookup = [\n \t\t\t0   => \"\\x00\",     // $00  ISO-8859-1. Terminated with $00.\n \t\t\t1   => \"\\x00\\x00\", // $01  UTF-16 encoded Unicode with BOM. All strings in the same frame SHALL have the same byteorder. Terminated with $00 00.\n \t\t\t2   => \"\\x00\\x00\", // $02  UTF-16BE encoded Unicode without BOM. Terminated with $00 00.\n \t\t\t3   => \"\\x00\",     // $03  UTF-8 encoded Unicode. Terminated with $00.\n \t\t\t255 => \"\\x00\\x00\"\n-\t\t);\n-\t\treturn (isset($TextEncodingTerminatorLookup[$encoding]) ? $TextEncodingTerminatorLookup[$encoding] : '');\n+\t\t];\n+\t\treturn ($TextEncodingTerminatorLookup[$encoding] ?? '');\n \t}\n \n \tpublic static function TextEncodingNameLookup($encoding) {\n \t\t// http://www.id3.org/id3v2.4.0-structure.txt\n \t\t// Frames that allow different types of text encoding contains a text encoding description byte. Possible encodings:\n-\t\tstatic $TextEncodingNameLookup = array(\n+\t\tstatic $TextEncodingNameLookup = [\n \t\t\t0   => 'ISO-8859-1', // $00  ISO-8859-1. Terminated with $00.\n \t\t\t1   => 'UTF-16',     // $01  UTF-16 encoded Unicode with BOM. All strings in the same frame SHALL have the same byteorder. Terminated with $00 00.\n \t\t\t2   => 'UTF-16BE',   // $02  UTF-16BE encoded Unicode without BOM. Terminated with $00 00.\n \t\t\t3   => 'UTF-8',      // $03  UTF-8 encoded Unicode. Terminated with $00.\n \t\t\t255 => 'UTF-16BE'\n-\t\t);\n-\t\treturn (isset($TextEncodingNameLookup[$encoding]) ? $TextEncodingNameLookup[$encoding] : 'ISO-8859-1');\n+\t\t];\n+\t\treturn ($TextEncodingNameLookup[$encoding] ?? 'ISO-8859-1');\n \t}\n \n-\tpublic static function IsValidID3v2FrameName($framename, $id3v2majorversion) {\n-\t\tswitch ($id3v2majorversion) {\n-\t\t\tcase 2:\n-\t\t\t\treturn preg_match('#[A-Z][A-Z0-9]{2}#', $framename);\n-\t\t\t\tbreak;\n+\tpublic static function IsValidID3v2FrameName($framename, $id3v2majorversion)\n+    {\n+        return match ($id3v2majorversion) {\n+            2 => preg_match('#[A-Z][A-Z0-9]{2}#', (string) $framename),\n+            3, 4 => preg_match('#[A-Z][A-Z0-9]{3}#', (string) $framename),\n+            default => false,\n+        };\n+    }\n \n-\t\t\tcase 3:\n-\t\t\tcase 4:\n-\t\t\t\treturn preg_match('#[A-Z][A-Z0-9]{3}#', $framename);\n-\t\t\t\tbreak;\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n \tpublic static function IsANumber($numberstring, $allowdecimal=false, $allownegative=false) {\n-\t\tfor ($i = 0; $i < strlen($numberstring); $i++) {\n-\t\t\tif ((chr($numberstring{$i}) < chr('0')) || (chr($numberstring{$i}) > chr('9'))) {\n-\t\t\t\tif (($numberstring{$i} == '.') && $allowdecimal) {\n+\t\tfor ($i = 0; $i < strlen((string) $numberstring); $i++) {\n+\t\t\tif ((chr($numberstring[$i]) < chr('0')) || (chr($numberstring[$i]) > chr('9'))) {\n+\t\t\t\tif (($numberstring[$i] == '.') && $allowdecimal) {\n \t\t\t\t\t// allowed\n-\t\t\t\t} elseif (($numberstring{$i} == '-') && $allownegative && ($i == 0)) {\n+\t\t\t\t} elseif (($numberstring[$i] == '-') && $allownegative && ($i == 0)) {\n \t\t\t\t\t// allowed\n \t\t\t\t} else {\n \t\t\t\t\treturn false;\n@@ -3379,15 +3355,15 @@\n \t}\n \n \tpublic static function IsValidDateStampString($datestamp) {\n-\t\tif (strlen($datestamp) != 8) {\n+\t\tif (strlen((string) $datestamp) != 8) {\n \t\t\treturn false;\n \t\t}\n \t\tif (!self::IsANumber($datestamp, false)) {\n \t\t\treturn false;\n \t\t}\n-\t\t$year  = substr($datestamp, 0, 4);\n-\t\t$month = substr($datestamp, 4, 2);\n-\t\t$day   = substr($datestamp, 6, 2);\n+\t\t$year  = substr((string) $datestamp, 0, 4);\n+\t\t$month = substr((string) $datestamp, 4, 2);\n+\t\t$day   = substr((string) $datestamp, 6, 2);\n \t\tif (($year == 0) || ($month == 0) || ($day == 0)) {\n \t\t\treturn false;\n \t\t}\n",
        "applied_rectors": [
          "Rector\\Php54\\Rector\\Array_\\LongArrayToShortArrayRector",
          "Rector\\Php70\\Rector\\Ternary\\TernaryToNullCoalescingRector",
          "Rector\\Php71\\Rector\\List_\\ListToArrayDestructRector",
          "Rector\\Php74\\Rector\\ArrayDimFetch\\CurlyToSquareBracketArrayStringRector",
          "Rector\\Php80\\Rector\\Identical\\StrStartsWithRector",
          "Rector\\Php80\\Rector\\NotIdentical\\StrContainsRector",
          "Rector\\Php80\\Rector\\Switch_\\ChangeSwitchToMatchRector",
          "Rector\\Php81\\Rector\\FuncCall\\NullToStrictStringFuncCallArgRector",
          "Rector\\Php82\\Rector\\FuncCall\\Utf8DecodeEncodeToMbConvertEncodingRector"
        ]
      }
    ],
    "changed_files": [
      "selected_100_files/extra_large_1000_plus/014_module.tag.id3v2.php"
    ]
  }
}