{
  "file_path": "selected_100_files\\extra_large_1000_plus\\002_module.audio-video.asf.php",
  "rector_analysis": {
    "php_version_changes": 12,
    "rules_triggered": [
      "Rector\\Php54\\Rector\\Array_\\LongArrayToShortArrayRector",
      "Rector\\Php70\\Rector\\Break_\\BreakNotInLoopOrSwitchToReturnRector",
      "Rector\\Php70\\Rector\\Ternary\\TernaryToNullCoalescingRector",
      "Rector\\Php71\\Rector\\List_\\ListToArrayDestructRector",
      "Rector\\Php72\\Rector\\FuncCall\\StringifyDefineRector",
      "Rector\\Php73\\Rector\\ConstFetch\\SensitiveConstantNameRector",
      "Rector\\Php74\\Rector\\ArrayDimFetch\\CurlyToSquareBracketArrayStringRector",
      "Rector\\Php74\\Rector\\Assign\\NullCoalescingOperatorRector",
      "Rector\\Php80\\Rector\\Identical\\StrEndsWithRector",
      "Rector\\Php80\\Rector\\Identical\\StrStartsWithRector",
      "Rector\\Php80\\Rector\\NotIdentical\\StrContainsRector",
      "Rector\\Php81\\Rector\\FuncCall\\NullToStrictStringFuncCallArgRector"
    ],
    "changes_by_php_version": {
      "php_54": 1,
      "php_70": 2,
      "php_71": 1,
      "php_72": 1,
      "php_73": 1,
      "php_74": 2,
      "php_80": 3,
      "php_81": 1
    },
    "has_diff": true,
    "diff_line_count": 1653
  },
  "analysis_metadata": {
    "rector_version": "2.1.0",
    "analysis_date": "2025-08-31T05:17:33.079208",
    "file_size_kb": 126.1,
    "analysis_type": "version_specific_only"
  },
  "raw_rector_output": {
    "totals": {
      "changed_files": 1,
      "errors": 0
    },
    "file_diffs": [
      {
        "file": "selected_100_files/extra_large_1000_plus/002_module.audio-video.asf.php",
        "diff": "--- Original\n+++ New\n@@ -36,11 +36,11 @@\n \t\t// Shortcuts\n \t\t$thisfile_audio = &$info['audio'];\n \t\t$thisfile_video = &$info['video'];\n-\t\t$info['asf']  = array();\n+\t\t$info['asf']  = [];\n \t\t$thisfile_asf = &$info['asf'];\n-\t\t$thisfile_asf['comments'] = array();\n+\t\t$thisfile_asf['comments'] = [];\n \t\t$thisfile_asf_comments    = &$thisfile_asf['comments'];\n-\t\t$thisfile_asf['header_object'] = array();\n+\t\t$thisfile_asf['header_object'] = [];\n \t\t$thisfile_asf_headerobject     = &$thisfile_asf['header_object'];\n \n \n@@ -69,19 +69,19 @@\n \t\tfseek($this->getid3->fp, $info['avdataoffset'], SEEK_SET);\n \t\t$HeaderObjectData = fread($this->getid3->fp, 30);\n \n-\t\t$thisfile_asf_headerobject['objectid']      = substr($HeaderObjectData, 0, 16);\n+\t\t$thisfile_asf_headerobject['objectid']      = substr((string) $HeaderObjectData, 0, 16);\n \t\t$thisfile_asf_headerobject['objectid_guid'] = $this->BytestringToGUID($thisfile_asf_headerobject['objectid']);\n-\t\tif ($thisfile_asf_headerobject['objectid'] != GETID3_ASF_Header_Object) {\n-\t\t\t$info['warning'][] = 'ASF header GUID {'.$this->BytestringToGUID($thisfile_asf_headerobject['objectid']).'} does not match expected \"GETID3_ASF_Header_Object\" GUID {'.$this->BytestringToGUID(GETID3_ASF_Header_Object).'}';\n+\t\tif ($thisfile_asf_headerobject['objectid'] != \\GETID3_ASF_HEADER_OBJECT) {\n+\t\t\t$info['warning'][] = 'ASF header GUID {'.$this->BytestringToGUID($thisfile_asf_headerobject['objectid']).'} does not match expected \"GETID3_ASF_Header_Object\" GUID {'.$this->BytestringToGUID(\\GETID3_ASF_HEADER_OBJECT).'}';\n \t\t\tunset($info['fileformat']);\n \t\t\tunset($info['asf']);\n \t\t\treturn false;\n-\t\t\tbreak;\n+\t\t\treturn;\n \t\t}\n-\t\t$thisfile_asf_headerobject['objectsize']    = getid3_lib::LittleEndian2Int(substr($HeaderObjectData, 16, 8));\n-\t\t$thisfile_asf_headerobject['headerobjects'] = getid3_lib::LittleEndian2Int(substr($HeaderObjectData, 24, 4));\n-\t\t$thisfile_asf_headerobject['reserved1']     = getid3_lib::LittleEndian2Int(substr($HeaderObjectData, 28, 1));\n-\t\t$thisfile_asf_headerobject['reserved2']     = getid3_lib::LittleEndian2Int(substr($HeaderObjectData, 29, 1));\n+\t\t$thisfile_asf_headerobject['objectsize']    = getid3_lib::LittleEndian2Int(substr((string) $HeaderObjectData, 16, 8));\n+\t\t$thisfile_asf_headerobject['headerobjects'] = getid3_lib::LittleEndian2Int(substr((string) $HeaderObjectData, 24, 4));\n+\t\t$thisfile_asf_headerobject['reserved1']     = getid3_lib::LittleEndian2Int(substr((string) $HeaderObjectData, 28, 1));\n+\t\t$thisfile_asf_headerobject['reserved2']     = getid3_lib::LittleEndian2Int(substr((string) $HeaderObjectData, 29, 1));\n \n \t\t$NextObjectOffset = ftell($this->getid3->fp);\n \t\t$ASFHeaderData = fread($this->getid3->fp, $thisfile_asf_headerobject['objectsize'] - 30);\n@@ -88,14 +88,14 @@\n \t\t$offset = 0;\n \n \t\tfor ($HeaderObjectsCounter = 0; $HeaderObjectsCounter < $thisfile_asf_headerobject['headerobjects']; $HeaderObjectsCounter++) {\n-\t\t\t$NextObjectGUID = substr($ASFHeaderData, $offset, 16);\n+\t\t\t$NextObjectGUID = substr((string) $ASFHeaderData, $offset, 16);\n \t\t\t$offset += 16;\n \t\t\t$NextObjectGUIDtext = $this->BytestringToGUID($NextObjectGUID);\n-\t\t\t$NextObjectSize = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 8));\n+\t\t\t$NextObjectSize = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 8));\n \t\t\t$offset += 8;\n \t\t\tswitch ($NextObjectGUID) {\n \n-\t\t\t\tcase GETID3_ASF_File_Properties_Object:\n+\t\t\t\tcase \\GETID3_ASF_FILE_PROPERTIES_OBJECT:\n \t\t\t\t\t// File Properties Object: (mandatory, one only)\n \t\t\t\t\t// Field Name                   Field Type   Size (bits)\n \t\t\t\t\t// Object ID                    GUID         128             // GUID for file properties object - GETID3_ASF_File_Properties_Object\n@@ -116,7 +116,7 @@\n \t\t\t\t\t// Maximum Bitrate              DWORD        32              // maximum instantaneous bitrate in bits per second for entire file, including all data streams and ASF overhead\n \n \t\t\t\t\t// shortcut\n-\t\t\t\t\t$thisfile_asf['file_properties_object'] = array();\n+\t\t\t\t\t$thisfile_asf['file_properties_object'] = [];\n \t\t\t\t\t$thisfile_asf_filepropertiesobject      = &$thisfile_asf['file_properties_object'];\n \n \t\t\t\t\t$thisfile_asf_filepropertiesobject['offset']             = $NextObjectOffset + $offset;\n@@ -123,32 +123,32 @@\n \t\t\t\t\t$thisfile_asf_filepropertiesobject['objectid']           = $NextObjectGUID;\n \t\t\t\t\t$thisfile_asf_filepropertiesobject['objectid_guid']      = $NextObjectGUIDtext;\n \t\t\t\t\t$thisfile_asf_filepropertiesobject['objectsize']         = $NextObjectSize;\n-\t\t\t\t\t$thisfile_asf_filepropertiesobject['fileid']             = substr($ASFHeaderData, $offset, 16);\n+\t\t\t\t\t$thisfile_asf_filepropertiesobject['fileid']             = substr((string) $ASFHeaderData, $offset, 16);\n \t\t\t\t\t$offset += 16;\n \t\t\t\t\t$thisfile_asf_filepropertiesobject['fileid_guid']        = $this->BytestringToGUID($thisfile_asf_filepropertiesobject['fileid']);\n-\t\t\t\t\t$thisfile_asf_filepropertiesobject['filesize']           = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 8));\n+\t\t\t\t\t$thisfile_asf_filepropertiesobject['filesize']           = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 8));\n \t\t\t\t\t$offset += 8;\n-\t\t\t\t\t$thisfile_asf_filepropertiesobject['creation_date']      = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 8));\n+\t\t\t\t\t$thisfile_asf_filepropertiesobject['creation_date']      = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 8));\n \t\t\t\t\t$thisfile_asf_filepropertiesobject['creation_date_unix'] = $this->FILETIMEtoUNIXtime($thisfile_asf_filepropertiesobject['creation_date']);\n \t\t\t\t\t$offset += 8;\n-\t\t\t\t\t$thisfile_asf_filepropertiesobject['data_packets']       = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 8));\n+\t\t\t\t\t$thisfile_asf_filepropertiesobject['data_packets']       = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 8));\n \t\t\t\t\t$offset += 8;\n-\t\t\t\t\t$thisfile_asf_filepropertiesobject['play_duration']      = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 8));\n+\t\t\t\t\t$thisfile_asf_filepropertiesobject['play_duration']      = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 8));\n \t\t\t\t\t$offset += 8;\n-\t\t\t\t\t$thisfile_asf_filepropertiesobject['send_duration']      = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 8));\n+\t\t\t\t\t$thisfile_asf_filepropertiesobject['send_duration']      = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 8));\n \t\t\t\t\t$offset += 8;\n-\t\t\t\t\t$thisfile_asf_filepropertiesobject['preroll']            = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 8));\n+\t\t\t\t\t$thisfile_asf_filepropertiesobject['preroll']            = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 8));\n \t\t\t\t\t$offset += 8;\n-\t\t\t\t\t$thisfile_asf_filepropertiesobject['flags_raw']          = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 4));\n+\t\t\t\t\t$thisfile_asf_filepropertiesobject['flags_raw']          = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 4));\n \t\t\t\t\t$offset += 4;\n \t\t\t\t\t$thisfile_asf_filepropertiesobject['flags']['broadcast'] = (bool) ($thisfile_asf_filepropertiesobject['flags_raw'] & 0x0001);\n \t\t\t\t\t$thisfile_asf_filepropertiesobject['flags']['seekable']  = (bool) ($thisfile_asf_filepropertiesobject['flags_raw'] & 0x0002);\n \n-\t\t\t\t\t$thisfile_asf_filepropertiesobject['min_packet_size']    = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 4));\n+\t\t\t\t\t$thisfile_asf_filepropertiesobject['min_packet_size']    = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 4));\n \t\t\t\t\t$offset += 4;\n-\t\t\t\t\t$thisfile_asf_filepropertiesobject['max_packet_size']    = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 4));\n+\t\t\t\t\t$thisfile_asf_filepropertiesobject['max_packet_size']    = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 4));\n \t\t\t\t\t$offset += 4;\n-\t\t\t\t\t$thisfile_asf_filepropertiesobject['max_bitrate']        = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 4));\n+\t\t\t\t\t$thisfile_asf_filepropertiesobject['max_bitrate']        = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 4));\n \t\t\t\t\t$offset += 4;\n \n \t\t\t\t\tif ($thisfile_asf_filepropertiesobject['flags']['broadcast']) {\n@@ -167,11 +167,11 @@\n \t\t\t\t\t\t$info['playtime_seconds'] = ($thisfile_asf_filepropertiesobject['play_duration'] / 10000000) - ($thisfile_asf_filepropertiesobject['preroll'] / 1000);\n \n \t\t\t\t\t\t//$info['bitrate'] = $thisfile_asf_filepropertiesobject['max_bitrate'];\n-\t\t\t\t\t\t$info['bitrate'] = ((isset($thisfile_asf_filepropertiesobject['filesize']) ? $thisfile_asf_filepropertiesobject['filesize'] : $info['filesize']) * 8) / $info['playtime_seconds'];\n+\t\t\t\t\t\t$info['bitrate'] = (($thisfile_asf_filepropertiesobject['filesize'] ?? $info['filesize']) * 8) / $info['playtime_seconds'];\n \t\t\t\t\t}\n \t\t\t\t\tbreak;\n \n-\t\t\t\tcase GETID3_ASF_Stream_Properties_Object:\n+\t\t\t\tcase \\GETID3_ASF_STREAM_PROPERTIES_OBJECT:\n \t\t\t\t\t// Stream Properties Object: (mandatory, one per media stream)\n \t\t\t\t\t// Field Name                   Field Type   Size (bits)\n \t\t\t\t\t// Object ID                    GUID         128             // GUID for stream properties object - GETID3_ASF_Stream_Properties_Object\n@@ -197,46 +197,46 @@\n \t\t\t\t\t$StreamPropertiesObjectData['objectid']           = $NextObjectGUID;\n \t\t\t\t\t$StreamPropertiesObjectData['objectid_guid']      = $NextObjectGUIDtext;\n \t\t\t\t\t$StreamPropertiesObjectData['objectsize']         = $NextObjectSize;\n-\t\t\t\t\t$StreamPropertiesObjectData['stream_type']        = substr($ASFHeaderData, $offset, 16);\n+\t\t\t\t\t$StreamPropertiesObjectData['stream_type']        = substr((string) $ASFHeaderData, $offset, 16);\n \t\t\t\t\t$offset += 16;\n \t\t\t\t\t$StreamPropertiesObjectData['stream_type_guid']   = $this->BytestringToGUID($StreamPropertiesObjectData['stream_type']);\n-\t\t\t\t\t$StreamPropertiesObjectData['error_correct_type'] = substr($ASFHeaderData, $offset, 16);\n+\t\t\t\t\t$StreamPropertiesObjectData['error_correct_type'] = substr((string) $ASFHeaderData, $offset, 16);\n \t\t\t\t\t$offset += 16;\n \t\t\t\t\t$StreamPropertiesObjectData['error_correct_guid'] = $this->BytestringToGUID($StreamPropertiesObjectData['error_correct_type']);\n-\t\t\t\t\t$StreamPropertiesObjectData['time_offset']        = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 8));\n+\t\t\t\t\t$StreamPropertiesObjectData['time_offset']        = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 8));\n \t\t\t\t\t$offset += 8;\n-\t\t\t\t\t$StreamPropertiesObjectData['type_data_length']   = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 4));\n+\t\t\t\t\t$StreamPropertiesObjectData['type_data_length']   = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 4));\n \t\t\t\t\t$offset += 4;\n-\t\t\t\t\t$StreamPropertiesObjectData['error_data_length']  = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 4));\n+\t\t\t\t\t$StreamPropertiesObjectData['error_data_length']  = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 4));\n \t\t\t\t\t$offset += 4;\n-\t\t\t\t\t$StreamPropertiesObjectData['flags_raw']          = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t$StreamPropertiesObjectData['flags_raw']          = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t$offset += 2;\n \t\t\t\t\t$StreamPropertiesObjectStreamNumber               = $StreamPropertiesObjectData['flags_raw'] & 0x007F;\n \t\t\t\t\t$StreamPropertiesObjectData['flags']['encrypted'] = (bool) ($StreamPropertiesObjectData['flags_raw'] & 0x8000);\n \n \t\t\t\t\t$offset += 4; // reserved - DWORD\n-\t\t\t\t\t$StreamPropertiesObjectData['type_specific_data'] = substr($ASFHeaderData, $offset, $StreamPropertiesObjectData['type_data_length']);\n+\t\t\t\t\t$StreamPropertiesObjectData['type_specific_data'] = substr((string) $ASFHeaderData, $offset, $StreamPropertiesObjectData['type_data_length']);\n \t\t\t\t\t$offset += $StreamPropertiesObjectData['type_data_length'];\n-\t\t\t\t\t$StreamPropertiesObjectData['error_correct_data'] = substr($ASFHeaderData, $offset, $StreamPropertiesObjectData['error_data_length']);\n+\t\t\t\t\t$StreamPropertiesObjectData['error_correct_data'] = substr((string) $ASFHeaderData, $offset, $StreamPropertiesObjectData['error_data_length']);\n \t\t\t\t\t$offset += $StreamPropertiesObjectData['error_data_length'];\n \n \t\t\t\t\tswitch ($StreamPropertiesObjectData['stream_type']) {\n \n-\t\t\t\t\t\tcase GETID3_ASF_Audio_Media:\n+\t\t\t\t\t\tcase \\GETID3_ASF_AUDIO_MEDIA:\n \t\t\t\t\t\t\t$thisfile_audio['dataformat']   = (!empty($thisfile_audio['dataformat'])   ? $thisfile_audio['dataformat']   : 'asf');\n \t\t\t\t\t\t\t$thisfile_audio['bitrate_mode'] = (!empty($thisfile_audio['bitrate_mode']) ? $thisfile_audio['bitrate_mode'] : 'cbr');\n \n-\t\t\t\t\t\t\t$audiodata = getid3_riff::parseWAVEFORMATex(substr($StreamPropertiesObjectData['type_specific_data'], 0, 16));\n+\t\t\t\t\t\t\t$audiodata = getid3_riff::parseWAVEFORMATex(substr((string) $StreamPropertiesObjectData['type_specific_data'], 0, 16));\n \t\t\t\t\t\t\tunset($audiodata['raw']);\n \t\t\t\t\t\t\t$thisfile_audio = getid3_lib::array_merge_noclobber($audiodata, $thisfile_audio);\n \t\t\t\t\t\t\tbreak;\n \n-\t\t\t\t\t\tcase GETID3_ASF_Video_Media:\n+\t\t\t\t\t\tcase \\GETID3_ASF_VIDEO_MEDIA:\n \t\t\t\t\t\t\t$thisfile_video['dataformat']   = (!empty($thisfile_video['dataformat'])   ? $thisfile_video['dataformat']   : 'asf');\n \t\t\t\t\t\t\t$thisfile_video['bitrate_mode'] = (!empty($thisfile_video['bitrate_mode']) ? $thisfile_video['bitrate_mode'] : 'cbr');\n \t\t\t\t\t\t\tbreak;\n \n-\t\t\t\t\t\tcase GETID3_ASF_Command_Media:\n+\t\t\t\t\t\tcase \\GETID3_ASF_COMMAND_MEDIA:\n \t\t\t\t\t\tdefault:\n \t\t\t\t\t\t\t// do nothing\n \t\t\t\t\t\t\tbreak;\n@@ -247,7 +247,7 @@\n \t\t\t\t\tunset($StreamPropertiesObjectData); // clear for next stream, if any\n \t\t\t\t\tbreak;\n \n-\t\t\t\tcase GETID3_ASF_Header_Extension_Object:\n+\t\t\t\tcase \\GETID3_ASF_HEADER_EXTENSION_OBJECT:\n \t\t\t\t\t// Header Extension Object: (mandatory, one only)\n \t\t\t\t\t// Field Name                   Field Type   Size (bits)\n \t\t\t\t\t// Object ID                    GUID         128             // GUID for Header Extension object - GETID3_ASF_Header_Extension_Object\n@@ -258,7 +258,7 @@\n \t\t\t\t\t// Header Extension Data        BYTESTREAM   variable        // array of zero or more extended header objects\n \n \t\t\t\t\t// shortcut\n-\t\t\t\t\t$thisfile_asf['header_extension_object'] = array();\n+\t\t\t\t\t$thisfile_asf['header_extension_object'] = [];\n \t\t\t\t\t$thisfile_asf_headerextensionobject      = &$thisfile_asf['header_extension_object'];\n \n \t\t\t\t\t$thisfile_asf_headerextensionobject['offset']              = $NextObjectOffset + $offset;\n@@ -265,15 +265,15 @@\n \t\t\t\t\t$thisfile_asf_headerextensionobject['objectid']            = $NextObjectGUID;\n \t\t\t\t\t$thisfile_asf_headerextensionobject['objectid_guid']       = $NextObjectGUIDtext;\n \t\t\t\t\t$thisfile_asf_headerextensionobject['objectsize']          = $NextObjectSize;\n-\t\t\t\t\t$thisfile_asf_headerextensionobject['reserved_1']          = substr($ASFHeaderData, $offset, 16);\n+\t\t\t\t\t$thisfile_asf_headerextensionobject['reserved_1']          = substr((string) $ASFHeaderData, $offset, 16);\n \t\t\t\t\t$offset += 16;\n \t\t\t\t\t$thisfile_asf_headerextensionobject['reserved_1_guid']     = $this->BytestringToGUID($thisfile_asf_headerextensionobject['reserved_1']);\n-\t\t\t\t\tif ($thisfile_asf_headerextensionobject['reserved_1'] != GETID3_ASF_Reserved_1) {\n-\t\t\t\t\t\t$info['warning'][] = 'header_extension_object.reserved_1 GUID ('.$this->BytestringToGUID($thisfile_asf_headerextensionobject['reserved_1']).') does not match expected \"GETID3_ASF_Reserved_1\" GUID ('.$this->BytestringToGUID(GETID3_ASF_Reserved_1).')';\n+\t\t\t\t\tif ($thisfile_asf_headerextensionobject['reserved_1'] != \\GETID3_ASF_RESERVED_1) {\n+\t\t\t\t\t\t$info['warning'][] = 'header_extension_object.reserved_1 GUID ('.$this->BytestringToGUID($thisfile_asf_headerextensionobject['reserved_1']).') does not match expected \"GETID3_ASF_Reserved_1\" GUID ('.$this->BytestringToGUID(\\GETID3_ASF_RESERVED_1).')';\n \t\t\t\t\t\t//return false;\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n-\t\t\t\t\t$thisfile_asf_headerextensionobject['reserved_2']          = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t$thisfile_asf_headerextensionobject['reserved_2']          = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t$offset += 2;\n \t\t\t\t\tif ($thisfile_asf_headerextensionobject['reserved_2'] != 6) {\n \t\t\t\t\t\t$info['warning'][] = 'header_extension_object.reserved_2 ('.getid3_lib::PrintHexBytes($thisfile_asf_headerextensionobject['reserved_2']).') does not match expected value of \"6\"';\n@@ -280,9 +280,9 @@\n \t\t\t\t\t\t//return false;\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n-\t\t\t\t\t$thisfile_asf_headerextensionobject['extension_data_size'] = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 4));\n+\t\t\t\t\t$thisfile_asf_headerextensionobject['extension_data_size'] = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 4));\n \t\t\t\t\t$offset += 4;\n-\t\t\t\t\t$thisfile_asf_headerextensionobject['extension_data']      =                              substr($ASFHeaderData, $offset, $thisfile_asf_headerextensionobject['extension_data_size']);\n+\t\t\t\t\t$thisfile_asf_headerextensionobject['extension_data']      =                              substr((string) $ASFHeaderData, $offset, $thisfile_asf_headerextensionobject['extension_data_size']);\n \t\t\t\t\t$unhandled_sections = 0;\n \t\t\t\t\t$thisfile_asf_headerextensionobject['extension_data_parsed'] = $this->ASF_HeaderExtensionObjectDataParse($thisfile_asf_headerextensionobject['extension_data'], $unhandled_sections);\n \t\t\t\t\tif ($unhandled_sections === 0) {\n@@ -291,7 +291,7 @@\n \t\t\t\t\t$offset += $thisfile_asf_headerextensionobject['extension_data_size'];\n \t\t\t\t\tbreak;\n \n-\t\t\t\tcase GETID3_ASF_Codec_List_Object:\n+\t\t\t\tcase \\GETID3_ASF_CODEC_LIST_OBJECT:\n \t\t\t\t\t// Codec List Object: (optional, one only)\n \t\t\t\t\t// Field Name                   Field Type   Size (bits)\n \t\t\t\t\t// Object ID                    GUID         128             // GUID for Codec List object - GETID3_ASF_Codec_List_Object\n@@ -308,7 +308,7 @@\n \t\t\t\t\t// * Codec Information          BYTESTREAM   variable        // opaque array of information bytes about the codec used to create the content\n \n \t\t\t\t\t// shortcut\n-\t\t\t\t\t$thisfile_asf['codec_list_object'] = array();\n+\t\t\t\t\t$thisfile_asf['codec_list_object'] = [];\n \t\t\t\t\t$thisfile_asf_codeclistobject      = &$thisfile_asf['codec_list_object'];\n \n \t\t\t\t\t$thisfile_asf_codeclistobject['offset']                    = $NextObjectOffset + $offset;\n@@ -315,7 +315,7 @@\n \t\t\t\t\t$thisfile_asf_codeclistobject['objectid']                  = $NextObjectGUID;\n \t\t\t\t\t$thisfile_asf_codeclistobject['objectid_guid']             = $NextObjectGUIDtext;\n \t\t\t\t\t$thisfile_asf_codeclistobject['objectsize']                = $NextObjectSize;\n-\t\t\t\t\t$thisfile_asf_codeclistobject['reserved']                  = substr($ASFHeaderData, $offset, 16);\n+\t\t\t\t\t$thisfile_asf_codeclistobject['reserved']                  = substr((string) $ASFHeaderData, $offset, 16);\n \t\t\t\t\t$offset += 16;\n \t\t\t\t\t$thisfile_asf_codeclistobject['reserved_guid']             = $this->BytestringToGUID($thisfile_asf_codeclistobject['reserved']);\n \t\t\t\t\tif ($thisfile_asf_codeclistobject['reserved'] != $this->GUIDtoBytestring('86D15241-311D-11D0-A3A4-00A0C90348F6')) {\n@@ -323,42 +323,42 @@\n \t\t\t\t\t\t//return false;\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n-\t\t\t\t\t$thisfile_asf_codeclistobject['codec_entries_count'] = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 4));\n+\t\t\t\t\t$thisfile_asf_codeclistobject['codec_entries_count'] = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 4));\n \t\t\t\t\t$offset += 4;\n \t\t\t\t\tfor ($CodecEntryCounter = 0; $CodecEntryCounter < $thisfile_asf_codeclistobject['codec_entries_count']; $CodecEntryCounter++) {\n \t\t\t\t\t\t// shortcut\n-\t\t\t\t\t\t$thisfile_asf_codeclistobject['codec_entries'][$CodecEntryCounter] = array();\n+\t\t\t\t\t\t$thisfile_asf_codeclistobject['codec_entries'][$CodecEntryCounter] = [];\n \t\t\t\t\t\t$thisfile_asf_codeclistobject_codecentries_current = &$thisfile_asf_codeclistobject['codec_entries'][$CodecEntryCounter];\n \n-\t\t\t\t\t\t$thisfile_asf_codeclistobject_codecentries_current['type_raw'] = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t\t$thisfile_asf_codeclistobject_codecentries_current['type_raw'] = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t\t$offset += 2;\n \t\t\t\t\t\t$thisfile_asf_codeclistobject_codecentries_current['type'] = $this->ASFCodecListObjectTypeLookup($thisfile_asf_codeclistobject_codecentries_current['type_raw']);\n \n-\t\t\t\t\t\t$CodecNameLength = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2)) * 2; // 2 bytes per character\n+\t\t\t\t\t\t$CodecNameLength = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2)) * 2; // 2 bytes per character\n \t\t\t\t\t\t$offset += 2;\n-\t\t\t\t\t\t$thisfile_asf_codeclistobject_codecentries_current['name'] = substr($ASFHeaderData, $offset, $CodecNameLength);\n+\t\t\t\t\t\t$thisfile_asf_codeclistobject_codecentries_current['name'] = substr((string) $ASFHeaderData, $offset, $CodecNameLength);\n \t\t\t\t\t\t$offset += $CodecNameLength;\n \n-\t\t\t\t\t\t$CodecDescriptionLength = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2)) * 2; // 2 bytes per character\n+\t\t\t\t\t\t$CodecDescriptionLength = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2)) * 2; // 2 bytes per character\n \t\t\t\t\t\t$offset += 2;\n-\t\t\t\t\t\t$thisfile_asf_codeclistobject_codecentries_current['description'] = substr($ASFHeaderData, $offset, $CodecDescriptionLength);\n+\t\t\t\t\t\t$thisfile_asf_codeclistobject_codecentries_current['description'] = substr((string) $ASFHeaderData, $offset, $CodecDescriptionLength);\n \t\t\t\t\t\t$offset += $CodecDescriptionLength;\n \n-\t\t\t\t\t\t$CodecInformationLength = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t\t$CodecInformationLength = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t\t$offset += 2;\n-\t\t\t\t\t\t$thisfile_asf_codeclistobject_codecentries_current['information'] = substr($ASFHeaderData, $offset, $CodecInformationLength);\n+\t\t\t\t\t\t$thisfile_asf_codeclistobject_codecentries_current['information'] = substr((string) $ASFHeaderData, $offset, $CodecInformationLength);\n \t\t\t\t\t\t$offset += $CodecInformationLength;\n \n \t\t\t\t\t\tif ($thisfile_asf_codeclistobject_codecentries_current['type_raw'] == 2) { // audio codec\n \n-\t\t\t\t\t\t\tif (strpos($thisfile_asf_codeclistobject_codecentries_current['description'], ',') === false) {\n+\t\t\t\t\t\t\tif (!str_contains((string) $thisfile_asf_codeclistobject_codecentries_current['description'], ',')) {\n \t\t\t\t\t\t\t\t$info['warning'][] = '[asf][codec_list_object][codec_entries]['.$CodecEntryCounter.'][description] expected to contain comma-seperated list of parameters: \"'.$thisfile_asf_codeclistobject_codecentries_current['description'].'\"';\n \t\t\t\t\t\t\t} else {\n \n-\t\t\t\t\t\t\t\tlist($AudioCodecBitrate, $AudioCodecFrequency, $AudioCodecChannels) = explode(',', $this->TrimConvert($thisfile_asf_codeclistobject_codecentries_current['description']));\n+\t\t\t\t\t\t\t\t[$AudioCodecBitrate, $AudioCodecFrequency, $AudioCodecChannels] = explode(',', (string) $this->TrimConvert($thisfile_asf_codeclistobject_codecentries_current['description']));\n \t\t\t\t\t\t\t\t$thisfile_audio['codec'] = $this->TrimConvert($thisfile_asf_codeclistobject_codecentries_current['name']);\n \n-\t\t\t\t\t\t\t\tif (!isset($thisfile_audio['bitrate']) && strstr($AudioCodecBitrate, 'kbps')) {\n+\t\t\t\t\t\t\t\tif (!isset($thisfile_audio['bitrate']) && strstr((string) $AudioCodecBitrate, 'kbps')) {\n \t\t\t\t\t\t\t\t\t$thisfile_audio['bitrate'] = (int) (trim(str_replace('kbps', '', $AudioCodecBitrate)) * 1000);\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t//if (!isset($thisfile_video['bitrate']) && isset($thisfile_audio['bitrate']) && isset($thisfile_asf['file_properties_object']['max_bitrate']) && ($thisfile_asf_codeclistobject['codec_entries_count'] > 1)) {\n@@ -420,9 +420,9 @@\n \t\t\t\t\t\t\t\t}\n \n \t\t\t\t\t\t\t\tif (!isset($thisfile_audio['channels'])) {\n-\t\t\t\t\t\t\t\t\tif (strstr($AudioCodecChannels, 'stereo')) {\n+\t\t\t\t\t\t\t\t\tif (strstr((string) $AudioCodecChannels, 'stereo')) {\n \t\t\t\t\t\t\t\t\t\t$thisfile_audio['channels'] = 2;\n-\t\t\t\t\t\t\t\t\t} elseif (strstr($AudioCodecChannels, 'mono')) {\n+\t\t\t\t\t\t\t\t\t} elseif (strstr((string) $AudioCodecChannels, 'mono')) {\n \t\t\t\t\t\t\t\t\t\t$thisfile_audio['channels'] = 1;\n \t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t}\n@@ -432,7 +432,7 @@\n \t\t\t\t\t}\n \t\t\t\t\tbreak;\n \n-\t\t\t\tcase GETID3_ASF_Script_Command_Object:\n+\t\t\t\tcase \\GETID3_ASF_SCRIPT_COMMAND_OBJECT:\n \t\t\t\t\t// Script Command Object: (optional, one only)\n \t\t\t\t\t// Field Name                   Field Type   Size (bits)\n \t\t\t\t\t// Object ID                    GUID         128             // GUID for Script Command object - GETID3_ASF_Script_Command_Object\n@@ -450,7 +450,7 @@\n \t\t\t\t\t// * Command Name               WCHAR        variable        // array of Unicode characters - name of this command\n \n \t\t\t\t\t// shortcut\n-\t\t\t\t\t$thisfile_asf['script_command_object'] = array();\n+\t\t\t\t\t$thisfile_asf['script_command_object'] = [];\n \t\t\t\t\t$thisfile_asf_scriptcommandobject      = &$thisfile_asf['script_command_object'];\n \n \t\t\t\t\t$thisfile_asf_scriptcommandobject['offset']               = $NextObjectOffset + $offset;\n@@ -457,7 +457,7 @@\n \t\t\t\t\t$thisfile_asf_scriptcommandobject['objectid']             = $NextObjectGUID;\n \t\t\t\t\t$thisfile_asf_scriptcommandobject['objectid_guid']        = $NextObjectGUIDtext;\n \t\t\t\t\t$thisfile_asf_scriptcommandobject['objectsize']           = $NextObjectSize;\n-\t\t\t\t\t$thisfile_asf_scriptcommandobject['reserved']             = substr($ASFHeaderData, $offset, 16);\n+\t\t\t\t\t$thisfile_asf_scriptcommandobject['reserved']             = substr((string) $ASFHeaderData, $offset, 16);\n \t\t\t\t\t$offset += 16;\n \t\t\t\t\t$thisfile_asf_scriptcommandobject['reserved_guid']        = $this->BytestringToGUID($thisfile_asf_scriptcommandobject['reserved']);\n \t\t\t\t\tif ($thisfile_asf_scriptcommandobject['reserved'] != $this->GUIDtoBytestring('4B1ACBE3-100B-11D0-A39B-00A0C90348F6')) {\n@@ -465,30 +465,30 @@\n \t\t\t\t\t\t//return false;\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n-\t\t\t\t\t$thisfile_asf_scriptcommandobject['commands_count']       = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t$thisfile_asf_scriptcommandobject['commands_count']       = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t$offset += 2;\n-\t\t\t\t\t$thisfile_asf_scriptcommandobject['command_types_count']  = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t$thisfile_asf_scriptcommandobject['command_types_count']  = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t$offset += 2;\n \t\t\t\t\tfor ($CommandTypesCounter = 0; $CommandTypesCounter < $thisfile_asf_scriptcommandobject['command_types_count']; $CommandTypesCounter++) {\n-\t\t\t\t\t\t$CommandTypeNameLength = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2)) * 2; // 2 bytes per character\n+\t\t\t\t\t\t$CommandTypeNameLength = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2)) * 2; // 2 bytes per character\n \t\t\t\t\t\t$offset += 2;\n-\t\t\t\t\t\t$thisfile_asf_scriptcommandobject['command_types'][$CommandTypesCounter]['name'] = substr($ASFHeaderData, $offset, $CommandTypeNameLength);\n+\t\t\t\t\t\t$thisfile_asf_scriptcommandobject['command_types'][$CommandTypesCounter]['name'] = substr((string) $ASFHeaderData, $offset, $CommandTypeNameLength);\n \t\t\t\t\t\t$offset += $CommandTypeNameLength;\n \t\t\t\t\t}\n \t\t\t\t\tfor ($CommandsCounter = 0; $CommandsCounter < $thisfile_asf_scriptcommandobject['commands_count']; $CommandsCounter++) {\n-\t\t\t\t\t\t$thisfile_asf_scriptcommandobject['commands'][$CommandsCounter]['presentation_time']  = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 4));\n+\t\t\t\t\t\t$thisfile_asf_scriptcommandobject['commands'][$CommandsCounter]['presentation_time']  = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 4));\n \t\t\t\t\t\t$offset += 4;\n-\t\t\t\t\t\t$thisfile_asf_scriptcommandobject['commands'][$CommandsCounter]['type_index']         = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t\t$thisfile_asf_scriptcommandobject['commands'][$CommandsCounter]['type_index']         = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t\t$offset += 2;\n \n-\t\t\t\t\t\t$CommandTypeNameLength = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2)) * 2; // 2 bytes per character\n+\t\t\t\t\t\t$CommandTypeNameLength = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2)) * 2; // 2 bytes per character\n \t\t\t\t\t\t$offset += 2;\n-\t\t\t\t\t\t$thisfile_asf_scriptcommandobject['commands'][$CommandsCounter]['name'] = substr($ASFHeaderData, $offset, $CommandTypeNameLength);\n+\t\t\t\t\t\t$thisfile_asf_scriptcommandobject['commands'][$CommandsCounter]['name'] = substr((string) $ASFHeaderData, $offset, $CommandTypeNameLength);\n \t\t\t\t\t\t$offset += $CommandTypeNameLength;\n \t\t\t\t\t}\n \t\t\t\t\tbreak;\n \n-\t\t\t\tcase GETID3_ASF_Marker_Object:\n+\t\t\t\tcase \\GETID3_ASF_MARKER_OBJECT:\n \t\t\t\t\t// Marker Object: (optional, one only)\n \t\t\t\t\t// Field Name                   Field Type   Size (bits)\n \t\t\t\t\t// Object ID                    GUID         128             // GUID for Marker object - GETID3_ASF_Marker_Object\n@@ -509,7 +509,7 @@\n \t\t\t\t\t// * Padding                    BYTESTREAM   variable        // optional padding bytes\n \n \t\t\t\t\t// shortcut\n-\t\t\t\t\t$thisfile_asf['marker_object'] = array();\n+\t\t\t\t\t$thisfile_asf['marker_object'] = [];\n \t\t\t\t\t$thisfile_asf_markerobject     = &$thisfile_asf['marker_object'];\n \n \t\t\t\t\t$thisfile_asf_markerobject['offset']               = $NextObjectOffset + $offset;\n@@ -516,7 +516,7 @@\n \t\t\t\t\t$thisfile_asf_markerobject['objectid']             = $NextObjectGUID;\n \t\t\t\t\t$thisfile_asf_markerobject['objectid_guid']        = $NextObjectGUIDtext;\n \t\t\t\t\t$thisfile_asf_markerobject['objectsize']           = $NextObjectSize;\n-\t\t\t\t\t$thisfile_asf_markerobject['reserved']             = substr($ASFHeaderData, $offset, 16);\n+\t\t\t\t\t$thisfile_asf_markerobject['reserved']             = substr((string) $ASFHeaderData, $offset, 16);\n \t\t\t\t\t$offset += 16;\n \t\t\t\t\t$thisfile_asf_markerobject['reserved_guid']        = $this->BytestringToGUID($thisfile_asf_markerobject['reserved']);\n \t\t\t\t\tif ($thisfile_asf_markerobject['reserved'] != $this->GUIDtoBytestring('4CFEDB20-75F6-11CF-9C0F-00A0C90349CB')) {\n@@ -523,42 +523,42 @@\n \t\t\t\t\t\t$info['warning'][] = 'marker_object.reserved GUID {'.$this->BytestringToGUID($thisfile_asf_markerobject['reserved_1']).'} does not match expected \"GETID3_ASF_Reserved_1\" GUID {4CFEDB20-75F6-11CF-9C0F-00A0C90349CB}';\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n-\t\t\t\t\t$thisfile_asf_markerobject['markers_count'] = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 4));\n+\t\t\t\t\t$thisfile_asf_markerobject['markers_count'] = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 4));\n \t\t\t\t\t$offset += 4;\n-\t\t\t\t\t$thisfile_asf_markerobject['reserved_2'] = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t$thisfile_asf_markerobject['reserved_2'] = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t$offset += 2;\n \t\t\t\t\tif ($thisfile_asf_markerobject['reserved_2'] != 0) {\n \t\t\t\t\t\t$info['warning'][] = 'marker_object.reserved_2 ('.getid3_lib::PrintHexBytes($thisfile_asf_markerobject['reserved_2']).') does not match expected value of \"0\"';\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n-\t\t\t\t\t$thisfile_asf_markerobject['name_length'] = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t$thisfile_asf_markerobject['name_length'] = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t$offset += 2;\n-\t\t\t\t\t$thisfile_asf_markerobject['name'] = substr($ASFHeaderData, $offset, $thisfile_asf_markerobject['name_length']);\n+\t\t\t\t\t$thisfile_asf_markerobject['name'] = substr((string) $ASFHeaderData, $offset, $thisfile_asf_markerobject['name_length']);\n \t\t\t\t\t$offset += $thisfile_asf_markerobject['name_length'];\n \t\t\t\t\tfor ($MarkersCounter = 0; $MarkersCounter < $thisfile_asf_markerobject['markers_count']; $MarkersCounter++) {\n-\t\t\t\t\t\t$thisfile_asf_markerobject['markers'][$MarkersCounter]['offset']  = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 8));\n+\t\t\t\t\t\t$thisfile_asf_markerobject['markers'][$MarkersCounter]['offset']  = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 8));\n \t\t\t\t\t\t$offset += 8;\n-\t\t\t\t\t\t$thisfile_asf_markerobject['markers'][$MarkersCounter]['presentation_time']         = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 8));\n+\t\t\t\t\t\t$thisfile_asf_markerobject['markers'][$MarkersCounter]['presentation_time']         = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 8));\n \t\t\t\t\t\t$offset += 8;\n-\t\t\t\t\t\t$thisfile_asf_markerobject['markers'][$MarkersCounter]['entry_length']              = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t\t$thisfile_asf_markerobject['markers'][$MarkersCounter]['entry_length']              = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t\t$offset += 2;\n-\t\t\t\t\t\t$thisfile_asf_markerobject['markers'][$MarkersCounter]['send_time']                 = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 4));\n+\t\t\t\t\t\t$thisfile_asf_markerobject['markers'][$MarkersCounter]['send_time']                 = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 4));\n \t\t\t\t\t\t$offset += 4;\n-\t\t\t\t\t\t$thisfile_asf_markerobject['markers'][$MarkersCounter]['flags']                     = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 4));\n+\t\t\t\t\t\t$thisfile_asf_markerobject['markers'][$MarkersCounter]['flags']                     = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 4));\n \t\t\t\t\t\t$offset += 4;\n-\t\t\t\t\t\t$thisfile_asf_markerobject['markers'][$MarkersCounter]['marker_description_length'] = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 4));\n+\t\t\t\t\t\t$thisfile_asf_markerobject['markers'][$MarkersCounter]['marker_description_length'] = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 4));\n \t\t\t\t\t\t$offset += 4;\n-\t\t\t\t\t\t$thisfile_asf_markerobject['markers'][$MarkersCounter]['marker_description']        = substr($ASFHeaderData, $offset, $thisfile_asf_markerobject['markers'][$MarkersCounter]['marker_description_length']);\n+\t\t\t\t\t\t$thisfile_asf_markerobject['markers'][$MarkersCounter]['marker_description']        = substr((string) $ASFHeaderData, $offset, $thisfile_asf_markerobject['markers'][$MarkersCounter]['marker_description_length']);\n \t\t\t\t\t\t$offset += $thisfile_asf_markerobject['markers'][$MarkersCounter]['marker_description_length'];\n \t\t\t\t\t\t$PaddingLength = $thisfile_asf_markerobject['markers'][$MarkersCounter]['entry_length'] - 4 -  4 - 4 - $thisfile_asf_markerobject['markers'][$MarkersCounter]['marker_description_length'];\n \t\t\t\t\t\tif ($PaddingLength > 0) {\n-\t\t\t\t\t\t\t$thisfile_asf_markerobject['markers'][$MarkersCounter]['padding']               = substr($ASFHeaderData, $offset, $PaddingLength);\n+\t\t\t\t\t\t\t$thisfile_asf_markerobject['markers'][$MarkersCounter]['padding']               = substr((string) $ASFHeaderData, $offset, $PaddingLength);\n \t\t\t\t\t\t\t$offset += $PaddingLength;\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t\tbreak;\n \n-\t\t\t\tcase GETID3_ASF_Bitrate_Mutual_Exclusion_Object:\n+\t\t\t\tcase \\GETID3_ASF_BITRATE_MUTUAL_EXCLUSION_OBJECT:\n \t\t\t\t\t// Bitrate Mutual Exclusion Object: (optional)\n \t\t\t\t\t// Field Name                   Field Type   Size (bits)\n \t\t\t\t\t// Object ID                    GUID         128             // GUID for Bitrate Mutual Exclusion object - GETID3_ASF_Bitrate_Mutual_Exclusion_Object\n@@ -568,7 +568,7 @@\n \t\t\t\t\t// Stream Numbers               WORD         variable        // array of mutually exclusive video stream numbers. 1 <= valid <= 127\n \n \t\t\t\t\t// shortcut\n-\t\t\t\t\t$thisfile_asf['bitrate_mutual_exclusion_object'] = array();\n+\t\t\t\t\t$thisfile_asf['bitrate_mutual_exclusion_object'] = [];\n \t\t\t\t\t$thisfile_asf_bitratemutualexclusionobject       = &$thisfile_asf['bitrate_mutual_exclusion_object'];\n \n \t\t\t\t\t$thisfile_asf_bitratemutualexclusionobject['offset']               = $NextObjectOffset + $offset;\n@@ -575,23 +575,23 @@\n \t\t\t\t\t$thisfile_asf_bitratemutualexclusionobject['objectid']             = $NextObjectGUID;\n \t\t\t\t\t$thisfile_asf_bitratemutualexclusionobject['objectid_guid']        = $NextObjectGUIDtext;\n \t\t\t\t\t$thisfile_asf_bitratemutualexclusionobject['objectsize']           = $NextObjectSize;\n-\t\t\t\t\t$thisfile_asf_bitratemutualexclusionobject['reserved']             = substr($ASFHeaderData, $offset, 16);\n+\t\t\t\t\t$thisfile_asf_bitratemutualexclusionobject['reserved']             = substr((string) $ASFHeaderData, $offset, 16);\n \t\t\t\t\t$thisfile_asf_bitratemutualexclusionobject['reserved_guid']        = $this->BytestringToGUID($thisfile_asf_bitratemutualexclusionobject['reserved']);\n \t\t\t\t\t$offset += 16;\n-\t\t\t\t\tif (($thisfile_asf_bitratemutualexclusionobject['reserved'] != GETID3_ASF_Mutex_Bitrate) && ($thisfile_asf_bitratemutualexclusionobject['reserved'] != GETID3_ASF_Mutex_Unknown)) {\n-\t\t\t\t\t\t$info['warning'][] = 'bitrate_mutual_exclusion_object.reserved GUID {'.$this->BytestringToGUID($thisfile_asf_bitratemutualexclusionobject['reserved']).'} does not match expected \"GETID3_ASF_Mutex_Bitrate\" GUID {'.$this->BytestringToGUID(GETID3_ASF_Mutex_Bitrate).'} or  \"GETID3_ASF_Mutex_Unknown\" GUID {'.$this->BytestringToGUID(GETID3_ASF_Mutex_Unknown).'}';\n+\t\t\t\t\tif (($thisfile_asf_bitratemutualexclusionobject['reserved'] != \\GETID3_ASF_MUTEX_BITRATE) && ($thisfile_asf_bitratemutualexclusionobject['reserved'] != \\GETID3_ASF_MUTEX_UNKNOWN)) {\n+\t\t\t\t\t\t$info['warning'][] = 'bitrate_mutual_exclusion_object.reserved GUID {'.$this->BytestringToGUID($thisfile_asf_bitratemutualexclusionobject['reserved']).'} does not match expected \"GETID3_ASF_Mutex_Bitrate\" GUID {'.$this->BytestringToGUID(\\GETID3_ASF_MUTEX_BITRATE).'} or  \"GETID3_ASF_Mutex_Unknown\" GUID {'.$this->BytestringToGUID(\\GETID3_ASF_MUTEX_UNKNOWN).'}';\n \t\t\t\t\t\t//return false;\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n-\t\t\t\t\t$thisfile_asf_bitratemutualexclusionobject['stream_numbers_count'] = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t$thisfile_asf_bitratemutualexclusionobject['stream_numbers_count'] = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t$offset += 2;\n \t\t\t\t\tfor ($StreamNumberCounter = 0; $StreamNumberCounter < $thisfile_asf_bitratemutualexclusionobject['stream_numbers_count']; $StreamNumberCounter++) {\n-\t\t\t\t\t\t$thisfile_asf_bitratemutualexclusionobject['stream_numbers'][$StreamNumberCounter] = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t\t$thisfile_asf_bitratemutualexclusionobject['stream_numbers'][$StreamNumberCounter] = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t\t$offset += 2;\n \t\t\t\t\t}\n \t\t\t\t\tbreak;\n \n-\t\t\t\tcase GETID3_ASF_Error_Correction_Object:\n+\t\t\t\tcase \\GETID3_ASF_ERROR_CORRECTION_OBJECT:\n \t\t\t\t\t// Error Correction Object: (optional, one only)\n \t\t\t\t\t// Field Name                   Field Type   Size (bits)\n \t\t\t\t\t// Object ID                    GUID         128             // GUID for Error Correction object - GETID3_ASF_Error_Correction_Object\n@@ -601,7 +601,7 @@\n \t\t\t\t\t// Error Correction Data        BYTESTREAM   variable        // structure depends on value of Error Correction Type field\n \n \t\t\t\t\t// shortcut\n-\t\t\t\t\t$thisfile_asf['error_correction_object'] = array();\n+\t\t\t\t\t$thisfile_asf['error_correction_object'] = [];\n \t\t\t\t\t$thisfile_asf_errorcorrectionobject      = &$thisfile_asf['error_correction_object'];\n \n \t\t\t\t\t$thisfile_asf_errorcorrectionobject['offset']                = $NextObjectOffset + $offset;\n@@ -608,18 +608,18 @@\n \t\t\t\t\t$thisfile_asf_errorcorrectionobject['objectid']              = $NextObjectGUID;\n \t\t\t\t\t$thisfile_asf_errorcorrectionobject['objectid_guid']         = $NextObjectGUIDtext;\n \t\t\t\t\t$thisfile_asf_errorcorrectionobject['objectsize']            = $NextObjectSize;\n-\t\t\t\t\t$thisfile_asf_errorcorrectionobject['error_correction_type'] = substr($ASFHeaderData, $offset, 16);\n+\t\t\t\t\t$thisfile_asf_errorcorrectionobject['error_correction_type'] = substr((string) $ASFHeaderData, $offset, 16);\n \t\t\t\t\t$offset += 16;\n \t\t\t\t\t$thisfile_asf_errorcorrectionobject['error_correction_guid'] = $this->BytestringToGUID($thisfile_asf_errorcorrectionobject['error_correction_type']);\n-\t\t\t\t\t$thisfile_asf_errorcorrectionobject['error_correction_data_length'] = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 4));\n+\t\t\t\t\t$thisfile_asf_errorcorrectionobject['error_correction_data_length'] = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 4));\n \t\t\t\t\t$offset += 4;\n \t\t\t\t\tswitch ($thisfile_asf_errorcorrectionobject['error_correction_type']) {\n-\t\t\t\t\t\tcase GETID3_ASF_No_Error_Correction:\n+\t\t\t\t\t\tcase \\GETID3_ASF_NO_ERROR_CORRECTION:\n \t\t\t\t\t\t\t// should be no data, but just in case there is, skip to the end of the field\n \t\t\t\t\t\t\t$offset += $thisfile_asf_errorcorrectionobject['error_correction_data_length'];\n \t\t\t\t\t\t\tbreak;\n \n-\t\t\t\t\t\tcase GETID3_ASF_Audio_Spread:\n+\t\t\t\t\t\tcase \\GETID3_ASF_AUDIO_SPREAD:\n \t\t\t\t\t\t\t// Field Name                   Field Type   Size (bits)\n \t\t\t\t\t\t\t// Span                         BYTE         8               // number of packets over which audio will be spread.\n \t\t\t\t\t\t\t// Virtual Packet Length        WORD         16              // size of largest audio payload found in audio stream\n@@ -627,20 +627,20 @@\n \t\t\t\t\t\t\t// Silence Data Length          WORD         16              // number of bytes in Silence Data field\n \t\t\t\t\t\t\t// Silence Data                 BYTESTREAM   variable        // hardcoded: 0x00 * (Silence Data Length) bytes\n \n-\t\t\t\t\t\t\t$thisfile_asf_errorcorrectionobject['span']                  = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 1));\n+\t\t\t\t\t\t\t$thisfile_asf_errorcorrectionobject['span']                  = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 1));\n \t\t\t\t\t\t\t$offset += 1;\n-\t\t\t\t\t\t\t$thisfile_asf_errorcorrectionobject['virtual_packet_length'] = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t\t\t$thisfile_asf_errorcorrectionobject['virtual_packet_length'] = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t\t\t$offset += 2;\n-\t\t\t\t\t\t\t$thisfile_asf_errorcorrectionobject['virtual_chunk_length']  = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t\t\t$thisfile_asf_errorcorrectionobject['virtual_chunk_length']  = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t\t\t$offset += 2;\n-\t\t\t\t\t\t\t$thisfile_asf_errorcorrectionobject['silence_data_length']   = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t\t\t$thisfile_asf_errorcorrectionobject['silence_data_length']   = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t\t\t$offset += 2;\n-\t\t\t\t\t\t\t$thisfile_asf_errorcorrectionobject['silence_data']          = substr($ASFHeaderData, $offset, $thisfile_asf_errorcorrectionobject['silence_data_length']);\n+\t\t\t\t\t\t\t$thisfile_asf_errorcorrectionobject['silence_data']          = substr((string) $ASFHeaderData, $offset, $thisfile_asf_errorcorrectionobject['silence_data_length']);\n \t\t\t\t\t\t\t$offset += $thisfile_asf_errorcorrectionobject['silence_data_length'];\n \t\t\t\t\t\t\tbreak;\n \n \t\t\t\t\t\tdefault:\n-\t\t\t\t\t\t\t$info['warning'][] = 'error_correction_object.error_correction_type GUID {'.$this->BytestringToGUID($thisfile_asf_errorcorrectionobject['reserved']).'} does not match expected \"GETID3_ASF_No_Error_Correction\" GUID {'.$this->BytestringToGUID(GETID3_ASF_No_Error_Correction).'} or  \"GETID3_ASF_Audio_Spread\" GUID {'.$this->BytestringToGUID(GETID3_ASF_Audio_Spread).'}';\n+\t\t\t\t\t\t\t$info['warning'][] = 'error_correction_object.error_correction_type GUID {'.$this->BytestringToGUID($thisfile_asf_errorcorrectionobject['reserved']).'} does not match expected \"GETID3_ASF_No_Error_Correction\" GUID {'.$this->BytestringToGUID(\\GETID3_ASF_NO_ERROR_CORRECTION).'} or  \"GETID3_ASF_Audio_Spread\" GUID {'.$this->BytestringToGUID(\\GETID3_ASF_AUDIO_SPREAD).'}';\n \t\t\t\t\t\t\t//return false;\n \t\t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n@@ -647,7 +647,7 @@\n \n \t\t\t\t\tbreak;\n \n-\t\t\t\tcase GETID3_ASF_Content_Description_Object:\n+\t\t\t\tcase \\GETID3_ASF_CONTENT_DESCRIPTION_OBJECT:\n \t\t\t\t\t// Content Description Object: (optional, one only)\n \t\t\t\t\t// Field Name                   Field Type   Size (bits)\n \t\t\t\t\t// Object ID                    GUID         128             // GUID for Content Description object - GETID3_ASF_Content_Description_Object\n@@ -664,7 +664,7 @@\n \t\t\t\t\t// Rating                       WCHAR        16              // array of Unicode characters - Rating\n \n \t\t\t\t\t// shortcut\n-\t\t\t\t\t$thisfile_asf['content_description_object'] = array();\n+\t\t\t\t\t$thisfile_asf['content_description_object'] = [];\n \t\t\t\t\t$thisfile_asf_contentdescriptionobject      = &$thisfile_asf['content_description_object'];\n \n \t\t\t\t\t$thisfile_asf_contentdescriptionobject['offset']                = $NextObjectOffset + $offset;\n@@ -671,28 +671,28 @@\n \t\t\t\t\t$thisfile_asf_contentdescriptionobject['objectid']              = $NextObjectGUID;\n \t\t\t\t\t$thisfile_asf_contentdescriptionobject['objectid_guid']         = $NextObjectGUIDtext;\n \t\t\t\t\t$thisfile_asf_contentdescriptionobject['objectsize']            = $NextObjectSize;\n-\t\t\t\t\t$thisfile_asf_contentdescriptionobject['title_length']          = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t$thisfile_asf_contentdescriptionobject['title_length']          = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t$offset += 2;\n-\t\t\t\t\t$thisfile_asf_contentdescriptionobject['author_length']         = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t$thisfile_asf_contentdescriptionobject['author_length']         = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t$offset += 2;\n-\t\t\t\t\t$thisfile_asf_contentdescriptionobject['copyright_length']      = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t$thisfile_asf_contentdescriptionobject['copyright_length']      = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t$offset += 2;\n-\t\t\t\t\t$thisfile_asf_contentdescriptionobject['description_length']    = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t$thisfile_asf_contentdescriptionobject['description_length']    = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t$offset += 2;\n-\t\t\t\t\t$thisfile_asf_contentdescriptionobject['rating_length']         = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t$thisfile_asf_contentdescriptionobject['rating_length']         = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t$offset += 2;\n-\t\t\t\t\t$thisfile_asf_contentdescriptionobject['title']                 = substr($ASFHeaderData, $offset, $thisfile_asf_contentdescriptionobject['title_length']);\n+\t\t\t\t\t$thisfile_asf_contentdescriptionobject['title']                 = substr((string) $ASFHeaderData, $offset, $thisfile_asf_contentdescriptionobject['title_length']);\n \t\t\t\t\t$offset += $thisfile_asf_contentdescriptionobject['title_length'];\n-\t\t\t\t\t$thisfile_asf_contentdescriptionobject['author']                = substr($ASFHeaderData, $offset, $thisfile_asf_contentdescriptionobject['author_length']);\n+\t\t\t\t\t$thisfile_asf_contentdescriptionobject['author']                = substr((string) $ASFHeaderData, $offset, $thisfile_asf_contentdescriptionobject['author_length']);\n \t\t\t\t\t$offset += $thisfile_asf_contentdescriptionobject['author_length'];\n-\t\t\t\t\t$thisfile_asf_contentdescriptionobject['copyright']             = substr($ASFHeaderData, $offset, $thisfile_asf_contentdescriptionobject['copyright_length']);\n+\t\t\t\t\t$thisfile_asf_contentdescriptionobject['copyright']             = substr((string) $ASFHeaderData, $offset, $thisfile_asf_contentdescriptionobject['copyright_length']);\n \t\t\t\t\t$offset += $thisfile_asf_contentdescriptionobject['copyright_length'];\n-\t\t\t\t\t$thisfile_asf_contentdescriptionobject['description']           = substr($ASFHeaderData, $offset, $thisfile_asf_contentdescriptionobject['description_length']);\n+\t\t\t\t\t$thisfile_asf_contentdescriptionobject['description']           = substr((string) $ASFHeaderData, $offset, $thisfile_asf_contentdescriptionobject['description_length']);\n \t\t\t\t\t$offset += $thisfile_asf_contentdescriptionobject['description_length'];\n-\t\t\t\t\t$thisfile_asf_contentdescriptionobject['rating']                = substr($ASFHeaderData, $offset, $thisfile_asf_contentdescriptionobject['rating_length']);\n+\t\t\t\t\t$thisfile_asf_contentdescriptionobject['rating']                = substr((string) $ASFHeaderData, $offset, $thisfile_asf_contentdescriptionobject['rating_length']);\n \t\t\t\t\t$offset += $thisfile_asf_contentdescriptionobject['rating_length'];\n \n-\t\t\t\t\t$ASFcommentKeysToCopy = array('title'=>'title', 'author'=>'artist', 'copyright'=>'copyright', 'description'=>'comment', 'rating'=>'rating');\n+\t\t\t\t\t$ASFcommentKeysToCopy = ['title'=>'title', 'author'=>'artist', 'copyright'=>'copyright', 'description'=>'comment', 'rating'=>'rating'];\n \t\t\t\t\tforeach ($ASFcommentKeysToCopy as $keytocopyfrom => $keytocopyto) {\n \t\t\t\t\t\tif (!empty($thisfile_asf_contentdescriptionobject[$keytocopyfrom])) {\n \t\t\t\t\t\t\t$thisfile_asf_comments[$keytocopyto][] = $this->TrimTerm($thisfile_asf_contentdescriptionobject[$keytocopyfrom]);\n@@ -700,7 +700,7 @@\n \t\t\t\t\t}\n \t\t\t\t\tbreak;\n \n-\t\t\t\tcase GETID3_ASF_Extended_Content_Description_Object:\n+\t\t\t\tcase \\GETID3_ASF_EXTENDED_CONTENT_DESCRIPTION_OBJECT:\n \t\t\t\t\t// Extended Content Description Object: (optional, one only)\n \t\t\t\t\t// Field Name                   Field Type   Size (bits)\n \t\t\t\t\t// Object ID                    GUID         128             // GUID for Extended Content Description object - GETID3_ASF_Extended_Content_Description_Object\n@@ -720,7 +720,7 @@\n \t\t\t\t\t// * Descriptor Value           variable     variable        // value for Content Descriptor\n \n \t\t\t\t\t// shortcut\n-\t\t\t\t\t$thisfile_asf['extended_content_description_object'] = array();\n+\t\t\t\t\t$thisfile_asf['extended_content_description_object'] = [];\n \t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject       = &$thisfile_asf['extended_content_description_object'];\n \n \t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject['offset']                    = $NextObjectOffset + $offset;\n@@ -727,23 +727,23 @@\n \t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject['objectid']                  = $NextObjectGUID;\n \t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject['objectid_guid']             = $NextObjectGUIDtext;\n \t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject['objectsize']                = $NextObjectSize;\n-\t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject['content_descriptors_count'] = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject['content_descriptors_count'] = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t$offset += 2;\n \t\t\t\t\tfor ($ExtendedContentDescriptorsCounter = 0; $ExtendedContentDescriptorsCounter < $thisfile_asf_extendedcontentdescriptionobject['content_descriptors_count']; $ExtendedContentDescriptorsCounter++) {\n \t\t\t\t\t\t// shortcut\n-\t\t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject['content_descriptors'][$ExtendedContentDescriptorsCounter] = array();\n+\t\t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject['content_descriptors'][$ExtendedContentDescriptorsCounter] = [];\n \t\t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current                 = &$thisfile_asf_extendedcontentdescriptionobject['content_descriptors'][$ExtendedContentDescriptorsCounter];\n \n \t\t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['base_offset']  = $offset + 30;\n-\t\t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['name_length']  = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['name_length']  = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t\t$offset += 2;\n-\t\t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['name']         = substr($ASFHeaderData, $offset, $thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['name_length']);\n+\t\t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['name']         = substr((string) $ASFHeaderData, $offset, $thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['name_length']);\n \t\t\t\t\t\t$offset += $thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['name_length'];\n-\t\t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value_type']   = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value_type']   = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t\t$offset += 2;\n-\t\t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value_length'] = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value_length'] = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t\t$offset += 2;\n-\t\t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value']        = substr($ASFHeaderData, $offset, $thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value_length']);\n+\t\t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value']        = substr((string) $ASFHeaderData, $offset, $thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value_length']);\n \t\t\t\t\t\t$offset += $thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value_length'];\n \t\t\t\t\t\tswitch ($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value_type']) {\n \t\t\t\t\t\t\tcase 0x0000: // Unicode string\n@@ -768,34 +768,34 @@\n \t\t\t\t\t\t\t\t//return false;\n \t\t\t\t\t\t\t\tbreak;\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tswitch ($this->TrimConvert(strtolower($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['name']))) {\n+\t\t\t\t\t\tswitch ($this->TrimConvert(strtolower((string) $thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['name']))) {\n \n \t\t\t\t\t\t\tcase 'wm/albumartist':\n \t\t\t\t\t\t\tcase 'artist':\n \t\t\t\t\t\t\t\t// Note: not 'artist', that comes from 'author' tag\n-\t\t\t\t\t\t\t\t$thisfile_asf_comments['albumartist'] = array($this->TrimTerm($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value']));\n+\t\t\t\t\t\t\t\t$thisfile_asf_comments['albumartist'] = [$this->TrimTerm($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value'])];\n \t\t\t\t\t\t\t\tbreak;\n \n \t\t\t\t\t\t\tcase 'wm/albumtitle':\n \t\t\t\t\t\t\tcase 'album':\n-\t\t\t\t\t\t\t\t$thisfile_asf_comments['album']  = array($this->TrimTerm($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value']));\n+\t\t\t\t\t\t\t\t$thisfile_asf_comments['album']  = [$this->TrimTerm($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value'])];\n \t\t\t\t\t\t\t\tbreak;\n \n \t\t\t\t\t\t\tcase 'wm/genre':\n \t\t\t\t\t\t\tcase 'genre':\n-\t\t\t\t\t\t\t\t$thisfile_asf_comments['genre'] = array($this->TrimTerm($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value']));\n+\t\t\t\t\t\t\t\t$thisfile_asf_comments['genre'] = [$this->TrimTerm($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value'])];\n \t\t\t\t\t\t\t\tbreak;\n \n \t\t\t\t\t\t\tcase 'wm/partofset':\n-\t\t\t\t\t\t\t\t$thisfile_asf_comments['partofset'] = array($this->TrimTerm($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value']));\n+\t\t\t\t\t\t\t\t$thisfile_asf_comments['partofset'] = [$this->TrimTerm($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value'])];\n \t\t\t\t\t\t\t\tbreak;\n \n \t\t\t\t\t\t\tcase 'wm/tracknumber':\n \t\t\t\t\t\t\tcase 'tracknumber':\n \t\t\t\t\t\t\t\t// be careful casting to int: casting unicode strings to int gives unexpected results (stops parsing at first non-numeric character)\n-\t\t\t\t\t\t\t\t$thisfile_asf_comments['track'] = array($this->TrimTerm($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value']));\n+\t\t\t\t\t\t\t\t$thisfile_asf_comments['track'] = [$this->TrimTerm($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value'])];\n \t\t\t\t\t\t\t\tforeach ($thisfile_asf_comments['track'] as $key => $value) {\n-\t\t\t\t\t\t\t\t\tif (preg_match('/^[0-9\\x00]+$/', $value)) {\n+\t\t\t\t\t\t\t\t\tif (preg_match('/^[0-9\\x00]+$/', (string) $value)) {\n \t\t\t\t\t\t\t\t\t\t$thisfile_asf_comments['track'][$key] = intval(str_replace(\"\\x00\", '', $value));\n \t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t}\n@@ -803,7 +803,7 @@\n \n \t\t\t\t\t\t\tcase 'wm/track':\n \t\t\t\t\t\t\t\tif (empty($thisfile_asf_comments['track'])) {\n-\t\t\t\t\t\t\t\t\t$thisfile_asf_comments['track'] = array(1 + $this->TrimConvert($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value']));\n+\t\t\t\t\t\t\t\t\t$thisfile_asf_comments['track'] = [1 + $this->TrimConvert($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value'])];\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\tbreak;\n \n@@ -810,12 +810,12 @@\n \t\t\t\t\t\t\tcase 'wm/year':\n \t\t\t\t\t\t\tcase 'year':\n \t\t\t\t\t\t\tcase 'date':\n-\t\t\t\t\t\t\t\t$thisfile_asf_comments['year'] = array( $this->TrimTerm($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value']));\n+\t\t\t\t\t\t\t\t$thisfile_asf_comments['year'] = [ $this->TrimTerm($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value'])];\n \t\t\t\t\t\t\t\tbreak;\n \n \t\t\t\t\t\t\tcase 'wm/lyrics':\n \t\t\t\t\t\t\tcase 'lyrics':\n-\t\t\t\t\t\t\t\t$thisfile_asf_comments['lyrics'] = array($this->TrimTerm($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value']));\n+\t\t\t\t\t\t\t\t$thisfile_asf_comments['lyrics'] = [$this->TrimTerm($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value'])];\n \t\t\t\t\t\t\t\tbreak;\n \n \t\t\t\t\t\t\tcase 'isvbr':\n@@ -830,8 +830,8 @@\n \t\t\t\t\t\t\t\tif (class_exists('getid3_id3v2')) {\n \t\t\t\t\t\t\t\t\t$tempfile         = tempnam(GETID3_TEMP_DIR, 'getID3');\n \t\t\t\t\t\t\t\t\t$tempfilehandle   = fopen($tempfile, 'wb');\n-\t\t\t\t\t\t\t\t\t$tempThisfileInfo = array('encoding'=>$info['encoding']);\n-\t\t\t\t\t\t\t\t\tfwrite($tempfilehandle, $thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value']);\n+\t\t\t\t\t\t\t\t\t$tempThisfileInfo = ['encoding'=>$info['encoding']];\n+\t\t\t\t\t\t\t\t\tfwrite($tempfilehandle, (string) $thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value']);\n \t\t\t\t\t\t\t\t\tfclose($tempfilehandle);\n \n \t\t\t\t\t\t\t\t\t$getid3_temp = new getID3();\n@@ -847,7 +847,7 @@\n \n \t\t\t\t\t\t\tcase 'wm/encodingtime':\n \t\t\t\t\t\t\t\t$thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['encoding_time_unix'] = $this->FILETIMEtoUNIXtime($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value']);\n-\t\t\t\t\t\t\t\t$thisfile_asf_comments['encoding_time_unix'] = array($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['encoding_time_unix']);\n+\t\t\t\t\t\t\t\t$thisfile_asf_comments['encoding_time_unix'] = [$thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['encoding_time_unix']];\n \t\t\t\t\t\t\t\tbreak;\n \n \t\t\t\t\t\t\tcase 'wm/picture':\n@@ -899,8 +899,8 @@\n \t\t\t\t\t\t\tdefault:\n \t\t\t\t\t\t\t\tswitch ($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value_type']) {\n \t\t\t\t\t\t\t\t\tcase 0: // Unicode string\n-\t\t\t\t\t\t\t\t\t\tif (substr($this->TrimConvert($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['name']), 0, 3) == 'WM/') {\n-\t\t\t\t\t\t\t\t\t\t\t$thisfile_asf_comments[str_replace('wm/', '', strtolower($this->TrimConvert($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['name'])))] = array($this->TrimTerm($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value']));\n+\t\t\t\t\t\t\t\t\t\tif (str_starts_with((string) $this->TrimConvert($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['name']), 'WM/')) {\n+\t\t\t\t\t\t\t\t\t\t\t$thisfile_asf_comments[str_replace('wm/', '', strtolower((string) $this->TrimConvert($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['name'])))] = [$this->TrimTerm($thisfile_asf_extendedcontentdescriptionobject_contentdescriptor_current['value'])];\n \t\t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t\t\tbreak;\n \n@@ -913,7 +913,7 @@\n \t\t\t\t\t}\n \t\t\t\t\tbreak;\n \n-\t\t\t\tcase GETID3_ASF_Stream_Bitrate_Properties_Object:\n+\t\t\t\tcase \\GETID3_ASF_STREAM_BITRATE_PROPERTIES_OBJECT:\n \t\t\t\t\t// Stream Bitrate Properties Object: (optional, one only)\n \t\t\t\t\t// Field Name                   Field Type   Size (bits)\n \t\t\t\t\t// Object ID                    GUID         128             // GUID for Stream Bitrate Properties object - GETID3_ASF_Stream_Bitrate_Properties_Object\n@@ -926,7 +926,7 @@\n \t\t\t\t\t// * Average Bitrate            DWORD        32              // in bits per second\n \n \t\t\t\t\t// shortcut\n-\t\t\t\t\t$thisfile_asf['stream_bitrate_properties_object'] = array();\n+\t\t\t\t\t$thisfile_asf['stream_bitrate_properties_object'] = [];\n \t\t\t\t\t$thisfile_asf_streambitratepropertiesobject       = &$thisfile_asf['stream_bitrate_properties_object'];\n \n \t\t\t\t\t$thisfile_asf_streambitratepropertiesobject['offset']                    = $NextObjectOffset + $offset;\n@@ -933,18 +933,18 @@\n \t\t\t\t\t$thisfile_asf_streambitratepropertiesobject['objectid']                  = $NextObjectGUID;\n \t\t\t\t\t$thisfile_asf_streambitratepropertiesobject['objectid_guid']             = $NextObjectGUIDtext;\n \t\t\t\t\t$thisfile_asf_streambitratepropertiesobject['objectsize']                = $NextObjectSize;\n-\t\t\t\t\t$thisfile_asf_streambitratepropertiesobject['bitrate_records_count']     = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t$thisfile_asf_streambitratepropertiesobject['bitrate_records_count']     = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t$offset += 2;\n \t\t\t\t\tfor ($BitrateRecordsCounter = 0; $BitrateRecordsCounter < $thisfile_asf_streambitratepropertiesobject['bitrate_records_count']; $BitrateRecordsCounter++) {\n-\t\t\t\t\t\t$thisfile_asf_streambitratepropertiesobject['bitrate_records'][$BitrateRecordsCounter]['flags_raw'] = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 2));\n+\t\t\t\t\t\t$thisfile_asf_streambitratepropertiesobject['bitrate_records'][$BitrateRecordsCounter]['flags_raw'] = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 2));\n \t\t\t\t\t\t$offset += 2;\n \t\t\t\t\t\t$thisfile_asf_streambitratepropertiesobject['bitrate_records'][$BitrateRecordsCounter]['flags']['stream_number'] = $thisfile_asf_streambitratepropertiesobject['bitrate_records'][$BitrateRecordsCounter]['flags_raw'] & 0x007F;\n-\t\t\t\t\t\t$thisfile_asf_streambitratepropertiesobject['bitrate_records'][$BitrateRecordsCounter]['bitrate'] = getid3_lib::LittleEndian2Int(substr($ASFHeaderData, $offset, 4));\n+\t\t\t\t\t\t$thisfile_asf_streambitratepropertiesobject['bitrate_records'][$BitrateRecordsCounter]['bitrate'] = getid3_lib::LittleEndian2Int(substr((string) $ASFHeaderData, $offset, 4));\n \t\t\t\t\t\t$offset += 4;\n \t\t\t\t\t}\n \t\t\t\t\tbreak;\n \n-\t\t\t\tcase GETID3_ASF_Padding_Object:\n+\t\t\t\tcase \\GETID3_ASF_PADDING_OBJECT:\n \t\t\t\t\t// Padding Object: (optional)\n \t\t\t\t\t// Field Name                   Field Type   Size (bits)\n \t\t\t\t\t// Object ID                    GUID         128             // GUID for Padding object - GETID3_ASF_Padding_Object\n@@ -952,7 +952,7 @@\n \t\t\t\t\t// Padding Data                 BYTESTREAM   variable        // ignore\n \n \t\t\t\t\t// shortcut\n-\t\t\t\t\t$thisfile_asf['padding_object'] = array();\n+\t\t\t\t\t$thisfile_asf['padding_object'] = [];\n \t\t\t\t\t$thisfile_asf_paddingobject     = &$thisfile_asf['padding_object'];\n \n \t\t\t\t\t$thisfile_asf_paddingobject['offset']                    = $NextObjectOffset + $offset;\n@@ -960,12 +960,12 @@\n \t\t\t\t\t$thisfile_asf_paddingobject['objectid_guid']             = $NextObjectGUIDtext;\n \t\t\t\t\t$thisfile_asf_paddingobject['objectsize']                = $NextObjectSize;\n \t\t\t\t\t$thisfile_asf_paddingobject['padding_length']            = $thisfile_asf_paddingobject['objectsize'] - 16 - 8;\n-\t\t\t\t\t$thisfile_asf_paddingobject['padding']                   = substr($ASFHeaderData, $offset, $thisfile_asf_paddingobject['padding_length']);\n+\t\t\t\t\t$thisfile_asf_paddingobject['padding']                   = substr((string) $ASFHeaderData, $offset, $thisfile_asf_paddingobject['padding_length']);\n \t\t\t\t\t$offset += ($NextObjectSize - 16 - 8);\n \t\t\t\t\tbreak;\n \n-\t\t\t\tcase GETID3_ASF_Extended_Content_Encryption_Object:\n-\t\t\t\tcase GETID3_ASF_Content_Encryption_Object:\n+\t\t\t\tcase \\GETID3_ASF_EXTENDED_CONTENT_ENCRYPTION_OBJECT:\n+\t\t\t\tcase \\GETID3_ASF_CONTENT_ENCRYPTION_OBJECT:\n \t\t\t\t\t// WMA DRM - just ignore\n \t\t\t\t\t$offset += ($NextObjectSize - 16 - 8);\n \t\t\t\t\tbreak;\n@@ -1016,7 +1016,7 @@\n \t\t\tforeach ($thisfile_asf['stream_properties_object'] as $streamnumber => $streamdata) {\n \n \t\t\t\tswitch ($streamdata['stream_type']) {\n-\t\t\t\t\tcase GETID3_ASF_Audio_Media:\n+\t\t\t\t\tcase \\GETID3_ASF_AUDIO_MEDIA:\n \t\t\t\t\t\t// Field Name                   Field Type   Size (bits)\n \t\t\t\t\t\t// Codec ID / Format Tag        WORD         16              // unique ID of audio codec - defined as wFormatTag field of WAVEFORMATEX structure\n \t\t\t\t\t\t// Number of Channels           WORD         16              // number of channels of audio - defined as nChannels field of WAVEFORMATEX structure\n@@ -1028,12 +1028,12 @@\n \t\t\t\t\t\t// Codec Specific Data          BYTESTREAM   variable        // array of codec-specific data bytes\n \n \t\t\t\t\t\t// shortcut\n-\t\t\t\t\t\t$thisfile_asf['audio_media'][$streamnumber] = array();\n+\t\t\t\t\t\t$thisfile_asf['audio_media'][$streamnumber] = [];\n \t\t\t\t\t\t$thisfile_asf_audiomedia_currentstream      = &$thisfile_asf['audio_media'][$streamnumber];\n \n \t\t\t\t\t\t$audiomediaoffset = 0;\n \n-\t\t\t\t\t\t$thisfile_asf_audiomedia_currentstream = getid3_riff::parseWAVEFORMATex(substr($streamdata['type_specific_data'], $audiomediaoffset, 16));\n+\t\t\t\t\t\t$thisfile_asf_audiomedia_currentstream = getid3_riff::parseWAVEFORMATex(substr((string) $streamdata['type_specific_data'], $audiomediaoffset, 16));\n \t\t\t\t\t\t$audiomediaoffset += 16;\n \n \t\t\t\t\t\t$thisfile_audio['lossless'] = false;\n@@ -1066,14 +1066,14 @@\n \t\t\t\t\t\t$thisfile_audio['streams'][$streamnumber]['dataformat']  = 'wma';\n \t\t\t\t\t\tunset($thisfile_audio['streams'][$streamnumber]['raw']);\n \n-\t\t\t\t\t\t$thisfile_asf_audiomedia_currentstream['codec_data_size'] = getid3_lib::LittleEndian2Int(substr($streamdata['type_specific_data'], $audiomediaoffset, 2));\n+\t\t\t\t\t\t$thisfile_asf_audiomedia_currentstream['codec_data_size'] = getid3_lib::LittleEndian2Int(substr((string) $streamdata['type_specific_data'], $audiomediaoffset, 2));\n \t\t\t\t\t\t$audiomediaoffset += 2;\n-\t\t\t\t\t\t$thisfile_asf_audiomedia_currentstream['codec_data']      = substr($streamdata['type_specific_data'], $audiomediaoffset, $thisfile_asf_audiomedia_currentstream['codec_data_size']);\n+\t\t\t\t\t\t$thisfile_asf_audiomedia_currentstream['codec_data']      = substr((string) $streamdata['type_specific_data'], $audiomediaoffset, $thisfile_asf_audiomedia_currentstream['codec_data_size']);\n \t\t\t\t\t\t$audiomediaoffset += $thisfile_asf_audiomedia_currentstream['codec_data_size'];\n \n \t\t\t\t\t\tbreak;\n \n-\t\t\t\t\tcase GETID3_ASF_Video_Media:\n+\t\t\t\t\tcase \\GETID3_ASF_VIDEO_MEDIA:\n \t\t\t\t\t\t// Field Name                   Field Type   Size (bits)\n \t\t\t\t\t\t// Encoded Image Width          DWORD        32              // width of image in pixels\n \t\t\t\t\t\t// Encoded Image Height         DWORD        32              // height of image in pixels\n@@ -1094,41 +1094,41 @@\n \t\t\t\t\t\t// * Codec Specific Data        BYTESTREAM   variable        // array of codec-specific data bytes\n \n \t\t\t\t\t\t// shortcut\n-\t\t\t\t\t\t$thisfile_asf['video_media'][$streamnumber] = array();\n+\t\t\t\t\t\t$thisfile_asf['video_media'][$streamnumber] = [];\n \t\t\t\t\t\t$thisfile_asf_videomedia_currentstream      = &$thisfile_asf['video_media'][$streamnumber];\n \n \t\t\t\t\t\t$videomediaoffset = 0;\n-\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['image_width']                     = getid3_lib::LittleEndian2Int(substr($streamdata['type_specific_data'], $videomediaoffset, 4));\n+\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['image_width']                     = getid3_lib::LittleEndian2Int(substr((string) $streamdata['type_specific_data'], $videomediaoffset, 4));\n \t\t\t\t\t\t$videomediaoffset += 4;\n-\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['image_height']                    = getid3_lib::LittleEndian2Int(substr($streamdata['type_specific_data'], $videomediaoffset, 4));\n+\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['image_height']                    = getid3_lib::LittleEndian2Int(substr((string) $streamdata['type_specific_data'], $videomediaoffset, 4));\n \t\t\t\t\t\t$videomediaoffset += 4;\n-\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['flags']                           = getid3_lib::LittleEndian2Int(substr($streamdata['type_specific_data'], $videomediaoffset, 1));\n+\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['flags']                           = getid3_lib::LittleEndian2Int(substr((string) $streamdata['type_specific_data'], $videomediaoffset, 1));\n \t\t\t\t\t\t$videomediaoffset += 1;\n-\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data_size']                = getid3_lib::LittleEndian2Int(substr($streamdata['type_specific_data'], $videomediaoffset, 2));\n+\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data_size']                = getid3_lib::LittleEndian2Int(substr((string) $streamdata['type_specific_data'], $videomediaoffset, 2));\n \t\t\t\t\t\t$videomediaoffset += 2;\n-\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['format_data_size'] = getid3_lib::LittleEndian2Int(substr($streamdata['type_specific_data'], $videomediaoffset, 4));\n+\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['format_data_size'] = getid3_lib::LittleEndian2Int(substr((string) $streamdata['type_specific_data'], $videomediaoffset, 4));\n \t\t\t\t\t\t$videomediaoffset += 4;\n-\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['image_width']      = getid3_lib::LittleEndian2Int(substr($streamdata['type_specific_data'], $videomediaoffset, 4));\n+\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['image_width']      = getid3_lib::LittleEndian2Int(substr((string) $streamdata['type_specific_data'], $videomediaoffset, 4));\n \t\t\t\t\t\t$videomediaoffset += 4;\n-\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['image_height']     = getid3_lib::LittleEndian2Int(substr($streamdata['type_specific_data'], $videomediaoffset, 4));\n+\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['image_height']     = getid3_lib::LittleEndian2Int(substr((string) $streamdata['type_specific_data'], $videomediaoffset, 4));\n \t\t\t\t\t\t$videomediaoffset += 4;\n-\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['reserved']         = getid3_lib::LittleEndian2Int(substr($streamdata['type_specific_data'], $videomediaoffset, 2));\n+\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['reserved']         = getid3_lib::LittleEndian2Int(substr((string) $streamdata['type_specific_data'], $videomediaoffset, 2));\n \t\t\t\t\t\t$videomediaoffset += 2;\n-\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['bits_per_pixel']   = getid3_lib::LittleEndian2Int(substr($streamdata['type_specific_data'], $videomediaoffset, 2));\n+\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['bits_per_pixel']   = getid3_lib::LittleEndian2Int(substr((string) $streamdata['type_specific_data'], $videomediaoffset, 2));\n \t\t\t\t\t\t$videomediaoffset += 2;\n-\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['codec_fourcc']     = substr($streamdata['type_specific_data'], $videomediaoffset, 4);\n+\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['codec_fourcc']     = substr((string) $streamdata['type_specific_data'], $videomediaoffset, 4);\n \t\t\t\t\t\t$videomediaoffset += 4;\n-\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['image_size']       = getid3_lib::LittleEndian2Int(substr($streamdata['type_specific_data'], $videomediaoffset, 4));\n+\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['image_size']       = getid3_lib::LittleEndian2Int(substr((string) $streamdata['type_specific_data'], $videomediaoffset, 4));\n \t\t\t\t\t\t$videomediaoffset += 4;\n-\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['horizontal_pels']  = getid3_lib::LittleEndian2Int(substr($streamdata['type_specific_data'], $videomediaoffset, 4));\n+\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['horizontal_pels']  = getid3_lib::LittleEndian2Int(substr((string) $streamdata['type_specific_data'], $videomediaoffset, 4));\n \t\t\t\t\t\t$videomediaoffset += 4;\n-\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['vertical_pels']    = getid3_lib::LittleEndian2Int(substr($streamdata['type_specific_data'], $videomediaoffset, 4));\n+\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['vertical_pels']    = getid3_lib::LittleEndian2Int(substr((string) $streamdata['type_specific_data'], $videomediaoffset, 4));\n \t\t\t\t\t\t$videomediaoffset += 4;\n-\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['colors_used']      = getid3_lib::LittleEndian2Int(substr($streamdata['type_specific_data'], $videomediaoffset, 4));\n+\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['colors_used']      = getid3_lib::LittleEndian2Int(substr((string) $streamdata['type_specific_data'], $videomediaoffset, 4));\n \t\t\t\t\t\t$videomediaoffset += 4;\n-\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['colors_important'] = getid3_lib::LittleEndian2Int(substr($streamdata['type_specific_data'], $videomediaoffset, 4));\n+\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['colors_important'] = getid3_lib::LittleEndian2Int(substr((string) $streamdata['type_specific_data'], $videomediaoffset, 4));\n \t\t\t\t\t\t$videomediaoffset += 4;\n-\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['codec_data']       = substr($streamdata['type_specific_data'], $videomediaoffset);\n+\t\t\t\t\t\t$thisfile_asf_videomedia_currentstream['format_data']['codec_data']       = substr((string) $streamdata['type_specific_data'], $videomediaoffset);\n \n \t\t\t\t\t\tif (!empty($thisfile_asf['stream_bitrate_properties_object']['bitrate_records'])) {\n \t\t\t\t\t\t\tforeach ($thisfile_asf['stream_bitrate_properties_object']['bitrate_records'] as $dummy => $dataarray) {\n@@ -1159,14 +1159,14 @@\n \t\twhile (ftell($this->getid3->fp) < $info['avdataend']) {\n \t\t\t$NextObjectDataHeader = fread($this->getid3->fp, 24);\n \t\t\t$offset = 0;\n-\t\t\t$NextObjectGUID = substr($NextObjectDataHeader, 0, 16);\n+\t\t\t$NextObjectGUID = substr((string) $NextObjectDataHeader, 0, 16);\n \t\t\t$offset += 16;\n \t\t\t$NextObjectGUIDtext = $this->BytestringToGUID($NextObjectGUID);\n-\t\t\t$NextObjectSize = getid3_lib::LittleEndian2Int(substr($NextObjectDataHeader, $offset, 8));\n+\t\t\t$NextObjectSize = getid3_lib::LittleEndian2Int(substr((string) $NextObjectDataHeader, $offset, 8));\n \t\t\t$offset += 8;\n \n \t\t\tswitch ($NextObjectGUID) {\n-\t\t\t\tcase GETID3_ASF_Data_Object:\n+\t\t\t\tcase \\GETID3_ASF_DATA_OBJECT:\n \t\t\t\t\t// Data Object: (mandatory, one only)\n \t\t\t\t\t// Field Name                       Field Type   Size (bits)\n \t\t\t\t\t// Object ID                        GUID         128             // GUID for Data object - GETID3_ASF_Data_Object\n@@ -1176,7 +1176,7 @@\n \t\t\t\t\t// Reserved                         WORD         16              // hardcoded: 0x0101\n \n \t\t\t\t\t// shortcut\n-\t\t\t\t\t$thisfile_asf['data_object'] = array();\n+\t\t\t\t\t$thisfile_asf['data_object'] = [];\n \t\t\t\t\t$thisfile_asf_dataobject     = &$thisfile_asf['data_object'];\n \n \t\t\t\t\t$DataObjectData = $NextObjectDataHeader.fread($this->getid3->fp, 50 - 24);\n@@ -1186,12 +1186,12 @@\n \t\t\t\t\t$thisfile_asf_dataobject['objectid_guid']      = $NextObjectGUIDtext;\n \t\t\t\t\t$thisfile_asf_dataobject['objectsize']         = $NextObjectSize;\n \n-\t\t\t\t\t$thisfile_asf_dataobject['fileid']             = substr($DataObjectData, $offset, 16);\n+\t\t\t\t\t$thisfile_asf_dataobject['fileid']             = substr((string) $DataObjectData, $offset, 16);\n \t\t\t\t\t$offset += 16;\n \t\t\t\t\t$thisfile_asf_dataobject['fileid_guid']        = $this->BytestringToGUID($thisfile_asf_dataobject['fileid']);\n-\t\t\t\t\t$thisfile_asf_dataobject['total_data_packets'] = getid3_lib::LittleEndian2Int(substr($DataObjectData, $offset, 8));\n+\t\t\t\t\t$thisfile_asf_dataobject['total_data_packets'] = getid3_lib::LittleEndian2Int(substr((string) $DataObjectData, $offset, 8));\n \t\t\t\t\t$offset += 8;\n-\t\t\t\t\t$thisfile_asf_dataobject['reserved']           = getid3_lib::LittleEndian2Int(substr($DataObjectData, $offset, 2));\n+\t\t\t\t\t$thisfile_asf_dataobject['reserved']           = getid3_lib::LittleEndian2Int(substr((string) $DataObjectData, $offset, 2));\n \t\t\t\t\t$offset += 2;\n \t\t\t\t\tif ($thisfile_asf_dataobject['reserved'] != 0x0101) {\n \t\t\t\t\t\t$info['warning'][] = 'data_object.reserved ('.getid3_lib::PrintHexBytes($thisfile_asf_dataobject['reserved']).') does not match expected value of \"0x0101\"';\n@@ -1212,7 +1212,7 @@\n \t\t\t\t\t$info['avdataend'] = ftell($this->getid3->fp);\n \t\t\t\t\tbreak;\n \n-\t\t\t\tcase GETID3_ASF_Simple_Index_Object:\n+\t\t\t\tcase \\GETID3_ASF_SIMPLE_INDEX_OBJECT:\n \t\t\t\t\t// Simple Index Object: (optional, recommended, one per video stream)\n \t\t\t\t\t// Field Name                       Field Type   Size (bits)\n \t\t\t\t\t// Object ID                        GUID         128             // GUID for Simple Index object - GETID3_ASF_Data_Object\n@@ -1226,7 +1226,7 @@\n \t\t\t\t\t// * Packet Count                   WORD         16              // number of Data Packets to sent at this index entry\n \n \t\t\t\t\t// shortcut\n-\t\t\t\t\t$thisfile_asf['simple_index_object'] = array();\n+\t\t\t\t\t$thisfile_asf['simple_index_object'] = [];\n \t\t\t\t\t$thisfile_asf_simpleindexobject      = &$thisfile_asf['simple_index_object'];\n \n \t\t\t\t\t$SimpleIndexObjectData = $NextObjectDataHeader.fread($this->getid3->fp, 56 - 24);\n@@ -1236,27 +1236,27 @@\n \t\t\t\t\t$thisfile_asf_simpleindexobject['objectid_guid']             = $NextObjectGUIDtext;\n \t\t\t\t\t$thisfile_asf_simpleindexobject['objectsize']                = $NextObjectSize;\n \n-\t\t\t\t\t$thisfile_asf_simpleindexobject['fileid']                    =                  substr($SimpleIndexObjectData, $offset, 16);\n+\t\t\t\t\t$thisfile_asf_simpleindexobject['fileid']                    =                  substr((string) $SimpleIndexObjectData, $offset, 16);\n \t\t\t\t\t$offset += 16;\n \t\t\t\t\t$thisfile_asf_simpleindexobject['fileid_guid']               = $this->BytestringToGUID($thisfile_asf_simpleindexobject['fileid']);\n-\t\t\t\t\t$thisfile_asf_simpleindexobject['index_entry_time_interval'] = getid3_lib::LittleEndian2Int(substr($SimpleIndexObjectData, $offset, 8));\n+\t\t\t\t\t$thisfile_asf_simpleindexobject['index_entry_time_interval'] = getid3_lib::LittleEndian2Int(substr((string) $SimpleIndexObjectData, $offset, 8));\n \t\t\t\t\t$offset += 8;\n-\t\t\t\t\t$thisfile_asf_simpleindexobject['maximum_packet_count']      = getid3_lib::LittleEndian2Int(substr($SimpleIndexObjectData, $offset, 4));\n+\t\t\t\t\t$thisfile_asf_simpleindexobject['maximum_packet_count']      = getid3_lib::LittleEndian2Int(substr((string) $SimpleIndexObjectData, $offset, 4));\n \t\t\t\t\t$offset += 4;\n-\t\t\t\t\t$thisfile_asf_simpleindexobject['index_entries_count']       = getid3_lib::LittleEndian2Int(substr($SimpleIndexObjectData, $offset, 4));\n+\t\t\t\t\t$thisfile_asf_simpleindexobject['index_entries_count']       = getid3_lib::LittleEndian2Int(substr((string) $SimpleIndexObjectData, $offset, 4));\n \t\t\t\t\t$offset += 4;\n \n \t\t\t\t\t$IndexEntriesData = $SimpleIndexObjectData.fread($this->getid3->fp, 6 * $thisfile_asf_simpleindexobject['index_entries_count']);\n \t\t\t\t\tfor ($IndexEntriesCounter = 0; $IndexEntriesCounter < $thisfile_asf_simpleindexobject['index_entries_count']; $IndexEntriesCounter++) {\n-\t\t\t\t\t\t$thisfile_asf_simpleindexobject['index_entries'][$IndexEntriesCounter]['packet_number'] = getid3_lib::LittleEndian2Int(substr($IndexEntriesData, $offset, 4));\n+\t\t\t\t\t\t$thisfile_asf_simpleindexobject['index_entries'][$IndexEntriesCounter]['packet_number'] = getid3_lib::LittleEndian2Int(substr((string) $IndexEntriesData, $offset, 4));\n \t\t\t\t\t\t$offset += 4;\n-\t\t\t\t\t\t$thisfile_asf_simpleindexobject['index_entries'][$IndexEntriesCounter]['packet_count']  = getid3_lib::LittleEndian2Int(substr($IndexEntriesData, $offset, 4));\n+\t\t\t\t\t\t$thisfile_asf_simpleindexobject['index_entries'][$IndexEntriesCounter]['packet_count']  = getid3_lib::LittleEndian2Int(substr((string) $IndexEntriesData, $offset, 4));\n \t\t\t\t\t\t$offset += 2;\n \t\t\t\t\t}\n \n \t\t\t\t\tbreak;\n \n-\t\t\t\tcase GETID3_ASF_Index_Object:\n+\t\t\t\tcase \\GETID3_ASF_INDEX_OBJECT:\n \t\t\t\t\t// 6.2 ASF top-level Index Object (optional but recommended when appropriate, 0 or 1)\n \t\t\t\t\t// Field Name                       Field Type   Size (bits)\n \t\t\t\t\t// Object ID                        GUID         128             // GUID for the Index Object - GETID3_ASF_Index_Object\n@@ -1280,7 +1280,7 @@\n \t\t\t\t\t// * * Offsets                      DWORD        varies          // An offset value of 0xffffffff indicates an invalid offset value\n \n \t\t\t\t\t// shortcut\n-\t\t\t\t\t$thisfile_asf['asf_index_object'] = array();\n+\t\t\t\t\t$thisfile_asf['asf_index_object'] = [];\n \t\t\t\t\t$thisfile_asf_asfindexobject      = &$thisfile_asf['asf_index_object'];\n \n \t\t\t\t\t$ASFIndexObjectData = $NextObjectDataHeader.fread($this->getid3->fp, 34 - 24);\n@@ -1290,30 +1290,30 @@\n \t\t\t\t\t$thisfile_asf_asfindexobject['objectid_guid']             = $NextObjectGUIDtext;\n \t\t\t\t\t$thisfile_asf_asfindexobject['objectsize']                = $NextObjectSize;\n \n-\t\t\t\t\t$thisfile_asf_asfindexobject['entry_time_interval']       = getid3_lib::LittleEndian2Int(substr($ASFIndexObjectData, $offset, 4));\n+\t\t\t\t\t$thisfile_asf_asfindexobject['entry_time_interval']       = getid3_lib::LittleEndian2Int(substr((string) $ASFIndexObjectData, $offset, 4));\n \t\t\t\t\t$offset += 4;\n-\t\t\t\t\t$thisfile_asf_asfindexobject['index_specifiers_count']    = getid3_lib::LittleEndian2Int(substr($ASFIndexObjectData, $offset, 2));\n+\t\t\t\t\t$thisfile_asf_asfindexobject['index_specifiers_count']    = getid3_lib::LittleEndian2Int(substr((string) $ASFIndexObjectData, $offset, 2));\n \t\t\t\t\t$offset += 2;\n-\t\t\t\t\t$thisfile_asf_asfindexobject['index_blocks_count']        = getid3_lib::LittleEndian2Int(substr($ASFIndexObjectData, $offset, 4));\n+\t\t\t\t\t$thisfile_asf_asfindexobject['index_blocks_count']        = getid3_lib::LittleEndian2Int(substr((string) $ASFIndexObjectData, $offset, 4));\n \t\t\t\t\t$offset += 4;\n \n \t\t\t\t\t$ASFIndexObjectData .= fread($this->getid3->fp, 4 * $thisfile_asf_asfindexobject['index_specifiers_count']);\n \t\t\t\t\tfor ($IndexSpecifiersCounter = 0; $IndexSpecifiersCounter < $thisfile_asf_asfindexobject['index_specifiers_count']; $IndexSpecifiersCounter++) {\n-\t\t\t\t\t\t$IndexSpecifierStreamNumber = getid3_lib::LittleEndian2Int(substr($ASFIndexObjectData, $offset, 2));\n+\t\t\t\t\t\t$IndexSpecifierStreamNumber = getid3_lib::LittleEndian2Int(substr((string) $ASFIndexObjectData, $offset, 2));\n \t\t\t\t\t\t$offset += 2;\n \t\t\t\t\t\t$thisfile_asf_asfindexobject['index_specifiers'][$IndexSpecifiersCounter]['stream_number']   = $IndexSpecifierStreamNumber;\n-\t\t\t\t\t\t$thisfile_asf_asfindexobject['index_specifiers'][$IndexSpecifiersCounter]['index_type']      = getid3_lib::LittleEndian2Int(substr($ASFIndexObjectData, $offset, 2));\n+\t\t\t\t\t\t$thisfile_asf_asfindexobject['index_specifiers'][$IndexSpecifiersCounter]['index_type']      = getid3_lib::LittleEndian2Int(substr((string) $ASFIndexObjectData, $offset, 2));\n \t\t\t\t\t\t$offset += 2;\n \t\t\t\t\t\t$thisfile_asf_asfindexobject['index_specifiers'][$IndexSpecifiersCounter]['index_type_text'] = $this->ASFIndexObjectIndexTypeLookup($thisfile_asf_asfindexobject['index_specifiers'][$IndexSpecifiersCounter]['index_type']);\n \t\t\t\t\t}\n \n \t\t\t\t\t$ASFIndexObjectData .= fread($this->getid3->fp, 4);\n-\t\t\t\t\t$thisfile_asf_asfindexobject['index_entry_count'] = getid3_lib::LittleEndian2Int(substr($ASFIndexObjectData, $offset, 4));\n+\t\t\t\t\t$thisfile_asf_asfindexobject['index_entry_count'] = getid3_lib::LittleEndian2Int(substr((string) $ASFIndexObjectData, $offset, 4));\n \t\t\t\t\t$offset += 4;\n \n \t\t\t\t\t$ASFIndexObjectData .= fread($this->getid3->fp, 8 * $thisfile_asf_asfindexobject['index_specifiers_count']);\n \t\t\t\t\tfor ($IndexSpecifiersCounter = 0; $IndexSpecifiersCounter < $thisfile_asf_asfindexobject['index_specifiers_count']; $IndexSpecifiersCounter++) {\n-\t\t\t\t\t\t$thisfile_asf_asfindexobject['block_positions'][$IndexSpecifiersCounter] = getid3_lib::LittleEndian2Int(substr($ASFIndexObjectData, $offset, 8));\n+\t\t\t\t\t\t$thisfile_asf_asfindexobject['block_positions'][$IndexSpecifiersCounter] = getid3_lib::LittleEndian2Int(substr((string) $ASFIndexObjectData, $offset, 8));\n \t\t\t\t\t\t$offset += 8;\n \t\t\t\t\t}\n \n@@ -1320,7 +1320,7 @@\n \t\t\t\t\t$ASFIndexObjectData .= fread($this->getid3->fp, 4 * $thisfile_asf_asfindexobject['index_specifiers_count'] * $thisfile_asf_asfindexobject['index_entry_count']);\n \t\t\t\t\tfor ($IndexEntryCounter = 0; $IndexEntryCounter < $thisfile_asf_asfindexobject['index_entry_count']; $IndexEntryCounter++) {\n \t\t\t\t\t\tfor ($IndexSpecifiersCounter = 0; $IndexSpecifiersCounter < $thisfile_asf_asfindexobject['index_specifiers_count']; $IndexSpecifiersCounter++) {\n-\t\t\t\t\t\t\t$thisfile_asf_asfindexobject['offsets'][$IndexSpecifiersCounter][$IndexEntryCounter] = getid3_lib::LittleEndian2Int(substr($ASFIndexObjectData, $offset, 4));\n+\t\t\t\t\t\t\t$thisfile_asf_asfindexobject['offsets'][$IndexSpecifiersCounter][$IndexEntryCounter] = getid3_lib::LittleEndian2Int(substr((string) $ASFIndexObjectData, $offset, 4));\n \t\t\t\t\t\t\t$offset += 4;\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n@@ -1366,7 +1366,7 @@\n \t\t\t\t\tdefault:\n \t\t\t\t\t\tswitch ($streamdata['type_raw']) {\n \t\t\t\t\t\t\tcase 1:\n-\t\t\t\t\t\t\t\tif (strstr($this->TrimConvert($streamdata['name']), 'Windows Media')) {\n+\t\t\t\t\t\t\t\tif (strstr((string) $this->TrimConvert($streamdata['name']), 'Windows Media')) {\n \t\t\t\t\t\t\t\t\t$thisfile_video['dataformat'] = 'wmv';\n \t\t\t\t\t\t\t\t\tif ($info['mime_type'] == 'video/x-ms-asf') {\n \t\t\t\t\t\t\t\t\t\t$info['mime_type'] = 'video/x-ms-wmv';\n@@ -1375,7 +1375,7 @@\n \t\t\t\t\t\t\t\tbreak;\n \n \t\t\t\t\t\t\tcase 2:\n-\t\t\t\t\t\t\t\tif (strstr($this->TrimConvert($streamdata['name']), 'Windows Media')) {\n+\t\t\t\t\t\t\t\tif (strstr((string) $this->TrimConvert($streamdata['name']), 'Windows Media')) {\n \t\t\t\t\t\t\t\t\t$thisfile_audio['dataformat'] = 'wma';\n \t\t\t\t\t\t\t\t\tif ($info['mime_type'] == 'video/x-ms-asf') {\n \t\t\t\t\t\t\t\t\t\t$info['mime_type'] = 'audio/x-ms-wma';\n@@ -1389,7 +1389,7 @@\n \t\t\t}\n \t\t}\n \n-\t\tswitch (isset($thisfile_audio['codec']) ? $thisfile_audio['codec'] : '') {\n+\t\tswitch ($thisfile_audio['codec'] ?? '') {\n \t\t\tcase 'MPEG Layer-3':\n \t\t\t\t$thisfile_audio['dataformat'] = 'mp3';\n \t\t\t\tbreak;\n@@ -1424,12 +1424,12 @@\n \t\t}\n \n \t\tif (isset($info['audio'])) {\n-\t\t\t$thisfile_audio['lossless']           = (isset($thisfile_audio['lossless'])           ? $thisfile_audio['lossless']           : false);\n+\t\t\t$thisfile_audio['lossless'] ??= false;\n \t\t\t$thisfile_audio['dataformat']         = (!empty($thisfile_audio['dataformat'])        ? $thisfile_audio['dataformat']         : 'asf');\n \t\t}\n \t\tif (!empty($thisfile_video['dataformat'])) {\n-\t\t\t$thisfile_video['lossless']           = (isset($thisfile_audio['lossless'])           ? $thisfile_audio['lossless']           : false);\n-\t\t\t$thisfile_video['pixel_aspect_ratio'] = (isset($thisfile_audio['pixel_aspect_ratio']) ? $thisfile_audio['pixel_aspect_ratio'] : (float) 1);\n+\t\t\t$thisfile_video['lossless']           = ($thisfile_audio['lossless'] ?? false);\n+\t\t\t$thisfile_video['pixel_aspect_ratio'] = ($thisfile_audio['pixel_aspect_ratio'] ?? (float) 1);\n \t\t\t$thisfile_video['dataformat']         = (!empty($thisfile_video['dataformat'])        ? $thisfile_video['dataformat']         : 'asf');\n \t\t}\n \t\tif (!empty($thisfile_video['streams'])) {\n@@ -1442,7 +1442,7 @@\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\t$info['bitrate'] = (isset($thisfile_audio['bitrate']) ? $thisfile_audio['bitrate'] : 0) + (isset($thisfile_video['bitrate']) ? $thisfile_video['bitrate'] : 0);\n+\t\t$info['bitrate'] = ($thisfile_audio['bitrate'] ?? 0) + ($thisfile_video['bitrate'] ?? 0);\n \n \t\tif ((!isset($info['playtime_seconds']) || ($info['playtime_seconds'] <= 0)) && ($info['bitrate'] > 0)) {\n \t\t\t$info['playtime_seconds'] = ($info['filesize'] - $info['avdataoffset']) / ($info['bitrate'] / 8);\n@@ -1452,7 +1452,7 @@\n \t}\n \n \tpublic static function ASFCodecListObjectTypeLookup($CodecListType) {\n-\t\tstatic $ASFCodecListObjectTypeLookup = array();\n+\t\tstatic $ASFCodecListObjectTypeLookup = [];\n \t\tif (empty($ASFCodecListObjectTypeLookup)) {\n \t\t\t$ASFCodecListObjectTypeLookup[0x0001] = 'Video Codec';\n \t\t\t$ASFCodecListObjectTypeLookup[0x0002] = 'Audio Codec';\n@@ -1459,11 +1459,11 @@\n \t\t\t$ASFCodecListObjectTypeLookup[0xFFFF] = 'Unknown Codec';\n \t\t}\n \n-\t\treturn (isset($ASFCodecListObjectTypeLookup[$CodecListType]) ? $ASFCodecListObjectTypeLookup[$CodecListType] : 'Invalid Codec Type');\n+\t\treturn ($ASFCodecListObjectTypeLookup[$CodecListType] ?? 'Invalid Codec Type');\n \t}\n \n \tpublic static function KnownGUIDs() {\n-\t\tstatic $GUIDarray = array(\n+\t\tstatic $GUIDarray = [\n \t\t\t'GETID3_ASF_Extended_Stream_Properties_Object'   => '14E6A5CB-C672-4332-8399-A96952065B5A',\n \t\t\t'GETID3_ASF_Padding_Object'                      => '1806D474-CADF-4509-A4BA-9AABCB96AAE8',\n \t\t\t'GETID3_ASF_Payload_Ext_Syst_Pixel_Aspect_Ratio' => '1B1EE554-F9EA-4BC8-821A-376B74E4C4B8',\n@@ -1572,12 +1572,12 @@\n \t\t\t'GETID3_ASF_Alt_Extended_Content_Encryption_Obj' => 'FF889EF1-ADEE-40DA-9E71-98704BB928CE',\n \t\t\t'GETID3_ASF_Index_Placeholder_Object'            => 'D9AADE20-7C17-4F9C-BC28-8555DD98E2A2', // http://cpan.uwinnipeg.ca/htdocs/Audio-WMA/Audio/WMA.pm.html\n \t\t\t'GETID3_ASF_Compatibility_Object'                => '26F18B5D-4584-47EC-9F5F-0E651F0452C9', // http://cpan.uwinnipeg.ca/htdocs/Audio-WMA/Audio/WMA.pm.html\n-\t\t);\n+\t\t];\n \t\treturn $GUIDarray;\n \t}\n \n \tpublic static function GUIDname($GUIDstring) {\n-\t\tstatic $GUIDarray = array();\n+\t\tstatic $GUIDarray = [];\n \t\tif (empty($GUIDarray)) {\n \t\t\t$GUIDarray = self::KnownGUIDs();\n \t\t}\n@@ -1585,13 +1585,13 @@\n \t}\n \n \tpublic static function ASFIndexObjectIndexTypeLookup($id) {\n-\t\tstatic $ASFIndexObjectIndexTypeLookup = array();\n+\t\tstatic $ASFIndexObjectIndexTypeLookup = [];\n \t\tif (empty($ASFIndexObjectIndexTypeLookup)) {\n \t\t\t$ASFIndexObjectIndexTypeLookup[1] = 'Nearest Past Data Packet';\n \t\t\t$ASFIndexObjectIndexTypeLookup[2] = 'Nearest Past Media Object';\n \t\t\t$ASFIndexObjectIndexTypeLookup[3] = 'Nearest Past Cleanpoint';\n \t\t}\n-\t\treturn (isset($ASFIndexObjectIndexTypeLookup[$id]) ? $ASFIndexObjectIndexTypeLookup[$id] : 'invalid');\n+\t\treturn ($ASFIndexObjectIndexTypeLookup[$id] ?? 'invalid');\n \t}\n \n \tpublic static function GUIDtoBytestring($GUIDstring) {\n@@ -1605,53 +1605,53 @@\n \t\t// AaBbCcDd-EeFf-GgHh-IiJj-KkLlMmNnOoPp is stored as this 16-byte string:\n \t\t// $Dd $Cc $Bb $Aa $Ff $Ee $Hh $Gg $Ii $Jj $Kk $Ll $Mm $Nn $Oo $Pp\n \n-\t\t$hexbytecharstring  = chr(hexdec(substr($GUIDstring,  6, 2)));\n-\t\t$hexbytecharstring .= chr(hexdec(substr($GUIDstring,  4, 2)));\n-\t\t$hexbytecharstring .= chr(hexdec(substr($GUIDstring,  2, 2)));\n-\t\t$hexbytecharstring .= chr(hexdec(substr($GUIDstring,  0, 2)));\n+\t\t$hexbytecharstring  = chr(hexdec(substr((string) $GUIDstring,  6, 2)));\n+\t\t$hexbytecharstring .= chr(hexdec(substr((string) $GUIDstring,  4, 2)));\n+\t\t$hexbytecharstring .= chr(hexdec(substr((string) $GUIDstring,  2, 2)));\n+\t\t$hexbytecharstring .= chr(hexdec(substr((string) $GUIDstring,  0, 2)));\n \n-\t\t$hexbytecharstring .= chr(hexdec(substr($GUIDstring, 11, 2)));\n-\t\t$hexbytecharstring .= chr(hexdec(substr($GUIDstring,  9, 2)));\n+\t\t$hexbytecharstring .= chr(hexdec(substr((string) $GUIDstring, 11, 2)));\n+\t\t$hexbytecharstring .= chr(hexdec(substr((string) $GUIDstring,  9, 2)));\n \n-\t\t$hexbytecharstring .= chr(hexdec(substr($GUIDstring, 16, 2)));\n-\t\t$hexbytecharstring .= chr(hexdec(substr($GUIDstring, 14, 2)));\n+\t\t$hexbytecharstring .= chr(hexdec(substr((string) $GUIDstring, 16, 2)));\n+\t\t$hexbytecharstring .= chr(hexdec(substr((string) $GUIDstring, 14, 2)));\n \n-\t\t$hexbytecharstring .= chr(hexdec(substr($GUIDstring, 19, 2)));\n-\t\t$hexbytecharstring .= chr(hexdec(substr($GUIDstring, 21, 2)));\n+\t\t$hexbytecharstring .= chr(hexdec(substr((string) $GUIDstring, 19, 2)));\n+\t\t$hexbytecharstring .= chr(hexdec(substr((string) $GUIDstring, 21, 2)));\n \n-\t\t$hexbytecharstring .= chr(hexdec(substr($GUIDstring, 24, 2)));\n-\t\t$hexbytecharstring .= chr(hexdec(substr($GUIDstring, 26, 2)));\n-\t\t$hexbytecharstring .= chr(hexdec(substr($GUIDstring, 28, 2)));\n-\t\t$hexbytecharstring .= chr(hexdec(substr($GUIDstring, 30, 2)));\n-\t\t$hexbytecharstring .= chr(hexdec(substr($GUIDstring, 32, 2)));\n-\t\t$hexbytecharstring .= chr(hexdec(substr($GUIDstring, 34, 2)));\n+\t\t$hexbytecharstring .= chr(hexdec(substr((string) $GUIDstring, 24, 2)));\n+\t\t$hexbytecharstring .= chr(hexdec(substr((string) $GUIDstring, 26, 2)));\n+\t\t$hexbytecharstring .= chr(hexdec(substr((string) $GUIDstring, 28, 2)));\n+\t\t$hexbytecharstring .= chr(hexdec(substr((string) $GUIDstring, 30, 2)));\n+\t\t$hexbytecharstring .= chr(hexdec(substr((string) $GUIDstring, 32, 2)));\n+\t\t$hexbytecharstring .= chr(hexdec(substr((string) $GUIDstring, 34, 2)));\n \n \t\treturn $hexbytecharstring;\n \t}\n \n \tpublic static function BytestringToGUID($Bytestring) {\n-\t\t$GUIDstring  = str_pad(dechex(ord($Bytestring{3})),  2, '0', STR_PAD_LEFT);\n-\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring{2})),  2, '0', STR_PAD_LEFT);\n-\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring{1})),  2, '0', STR_PAD_LEFT);\n-\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring{0})),  2, '0', STR_PAD_LEFT);\n+\t\t$GUIDstring  = str_pad(dechex(ord($Bytestring[3])),  2, '0', STR_PAD_LEFT);\n+\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring[2])),  2, '0', STR_PAD_LEFT);\n+\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring[1])),  2, '0', STR_PAD_LEFT);\n+\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring[0])),  2, '0', STR_PAD_LEFT);\n \t\t$GUIDstring .= '-';\n-\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring{5})),  2, '0', STR_PAD_LEFT);\n-\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring{4})),  2, '0', STR_PAD_LEFT);\n+\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring[5])),  2, '0', STR_PAD_LEFT);\n+\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring[4])),  2, '0', STR_PAD_LEFT);\n \t\t$GUIDstring .= '-';\n-\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring{7})),  2, '0', STR_PAD_LEFT);\n-\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring{6})),  2, '0', STR_PAD_LEFT);\n+\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring[7])),  2, '0', STR_PAD_LEFT);\n+\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring[6])),  2, '0', STR_PAD_LEFT);\n \t\t$GUIDstring .= '-';\n-\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring{8})),  2, '0', STR_PAD_LEFT);\n-\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring{9})),  2, '0', STR_PAD_LEFT);\n+\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring[8])),  2, '0', STR_PAD_LEFT);\n+\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring[9])),  2, '0', STR_PAD_LEFT);\n \t\t$GUIDstring .= '-';\n-\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring{10})), 2, '0', STR_PAD_LEFT);\n-\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring{11})), 2, '0', STR_PAD_LEFT);\n-\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring{12})), 2, '0', STR_PAD_LEFT);\n-\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring{13})), 2, '0', STR_PAD_LEFT);\n-\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring{14})), 2, '0', STR_PAD_LEFT);\n-\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring{15})), 2, '0', STR_PAD_LEFT);\n+\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring[10])), 2, '0', STR_PAD_LEFT);\n+\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring[11])), 2, '0', STR_PAD_LEFT);\n+\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring[12])), 2, '0', STR_PAD_LEFT);\n+\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring[13])), 2, '0', STR_PAD_LEFT);\n+\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring[14])), 2, '0', STR_PAD_LEFT);\n+\t\t$GUIDstring .= str_pad(dechex(ord($Bytestring[15])), 2, '0', STR_PAD_LEFT);\n \n-\t\treturn strtoupper($GUIDstring);\n+\t\treturn strtoupper((string) $GUIDstring);\n \t}\n \n \tpublic static function FILETIMEtoUNIXtime($FILETIME, $round=true) {\n@@ -1666,7 +1666,7 @@\n \t}\n \n \tpublic static function WMpictureTypeLookup($WMpictureType) {\n-\t\tstatic $WMpictureTypeLookup = array();\n+\t\tstatic $WMpictureTypeLookup = [];\n \t\tif (empty($WMpictureTypeLookup)) {\n \t\t\t$WMpictureTypeLookup[0x03] = getid3_lib::iconv_fallback('ISO-8859-1', 'UTF-16LE', 'Front Cover');\n \t\t\t$WMpictureTypeLookup[0x04] = getid3_lib::iconv_fallback('ISO-8859-1', 'UTF-16LE', 'Back Cover');\n@@ -1687,7 +1687,7 @@\n \t\t\t$WMpictureTypeLookup[0x13] = getid3_lib::iconv_fallback('ISO-8859-1', 'UTF-16LE', 'Band Logotype');\n \t\t\t$WMpictureTypeLookup[0x14] = getid3_lib::iconv_fallback('ISO-8859-1', 'UTF-16LE', 'Publisher Logotype');\n \t\t}\n-\t\treturn (isset($WMpictureTypeLookup[$WMpictureType]) ? $WMpictureTypeLookup[$WMpictureType] : '');\n+\t\treturn ($WMpictureTypeLookup[$WMpictureType] ?? '');\n \t}\n \n \tpublic function ASF_HeaderExtensionObjectDataParse(&$asf_header_extension_object_data, &$unhandled_sections) {\n@@ -1695,17 +1695,17 @@\n \n \t\t$offset = 0;\n \t\t$objectOffset = 0;\n-\t\t$HeaderExtensionObjectParsed = array();\n-\t\twhile ($objectOffset < strlen($asf_header_extension_object_data)) {\n+\t\t$HeaderExtensionObjectParsed = [];\n+\t\twhile ($objectOffset < strlen((string) $asf_header_extension_object_data)) {\n \t\t\t$offset = $objectOffset;\n-\t\t\t$thisObject = array();\n+\t\t\t$thisObject = [];\n \n-\t\t\t$thisObject['guid']                              =                              substr($asf_header_extension_object_data, $offset, 16);\n+\t\t\t$thisObject['guid']                              =                              substr((string) $asf_header_extension_object_data, $offset, 16);\n \t\t\t$offset += 16;\n \t\t\t$thisObject['guid_text'] = $this->BytestringToGUID($thisObject['guid']);\n \t\t\t$thisObject['guid_name'] = $this->GUIDname($thisObject['guid_text']);\n \n-\t\t\t$thisObject['size']                              = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  8));\n+\t\t\t$thisObject['size']                              = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  8));\n \t\t\t$offset += 8;\n \t\t\tif ($thisObject['size'] <= 0) {\n \t\t\t\tbreak;\n@@ -1712,37 +1712,37 @@\n \t\t\t}\n \n \t\t\tswitch ($thisObject['guid']) {\n-\t\t\t\tcase GETID3_ASF_Extended_Stream_Properties_Object:\n-\t\t\t\t\t$thisObject['start_time']                        = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  8));\n+\t\t\t\tcase \\GETID3_ASF_EXTENDED_STREAM_PROPERTIES_OBJECT:\n+\t\t\t\t\t$thisObject['start_time']                        = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  8));\n \t\t\t\t\t$offset += 8;\n \t\t\t\t\t$thisObject['start_time_unix']                   = $this->FILETIMEtoUNIXtime($thisObject['start_time']);\n \n-\t\t\t\t\t$thisObject['end_time']                          = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  8));\n+\t\t\t\t\t$thisObject['end_time']                          = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  8));\n \t\t\t\t\t$offset += 8;\n \t\t\t\t\t$thisObject['end_time_unix']                     = $this->FILETIMEtoUNIXtime($thisObject['end_time']);\n \n-\t\t\t\t\t$thisObject['data_bitrate']                      = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  4));\n+\t\t\t\t\t$thisObject['data_bitrate']                      = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  4));\n \t\t\t\t\t$offset += 4;\n \n-\t\t\t\t\t$thisObject['buffer_size']                       = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  4));\n+\t\t\t\t\t$thisObject['buffer_size']                       = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  4));\n \t\t\t\t\t$offset += 4;\n \n-\t\t\t\t\t$thisObject['initial_buffer_fullness']           = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  4));\n+\t\t\t\t\t$thisObject['initial_buffer_fullness']           = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  4));\n \t\t\t\t\t$offset += 4;\n \n-\t\t\t\t\t$thisObject['alternate_data_bitrate']            = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  4));\n+\t\t\t\t\t$thisObject['alternate_data_bitrate']            = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  4));\n \t\t\t\t\t$offset += 4;\n \n-\t\t\t\t\t$thisObject['alternate_buffer_size']             = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  4));\n+\t\t\t\t\t$thisObject['alternate_buffer_size']             = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  4));\n \t\t\t\t\t$offset += 4;\n \n-\t\t\t\t\t$thisObject['alternate_initial_buffer_fullness'] = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  4));\n+\t\t\t\t\t$thisObject['alternate_initial_buffer_fullness'] = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  4));\n \t\t\t\t\t$offset += 4;\n \n-\t\t\t\t\t$thisObject['maximum_object_size']               = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  4));\n+\t\t\t\t\t$thisObject['maximum_object_size']               = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  4));\n \t\t\t\t\t$offset += 4;\n \n-\t\t\t\t\t$thisObject['flags_raw']                         = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  4));\n+\t\t\t\t\t$thisObject['flags_raw']                         = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  4));\n \t\t\t\t\t$offset += 4;\n \t\t\t\t\t$thisObject['flags']['reliable']                = (bool) $thisObject['flags_raw'] & 0x00000001;\n \t\t\t\t\t$thisObject['flags']['seekable']                = (bool) $thisObject['flags_raw'] & 0x00000002;\n@@ -1749,31 +1749,31 @@\n \t\t\t\t\t$thisObject['flags']['no_cleanpoints']          = (bool) $thisObject['flags_raw'] & 0x00000004;\n \t\t\t\t\t$thisObject['flags']['resend_live_cleanpoints'] = (bool) $thisObject['flags_raw'] & 0x00000008;\n \n-\t\t\t\t\t$thisObject['stream_number']                     = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  2));\n+\t\t\t\t\t$thisObject['stream_number']                     = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  2));\n \t\t\t\t\t$offset += 2;\n \n-\t\t\t\t\t$thisObject['stream_language_id_index']          = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  2));\n+\t\t\t\t\t$thisObject['stream_language_id_index']          = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  2));\n \t\t\t\t\t$offset += 2;\n \n-\t\t\t\t\t$thisObject['average_time_per_frame']            = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  4));\n+\t\t\t\t\t$thisObject['average_time_per_frame']            = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  4));\n \t\t\t\t\t$offset += 4;\n \n-\t\t\t\t\t$thisObject['stream_name_count']                 = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  2));\n+\t\t\t\t\t$thisObject['stream_name_count']                 = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  2));\n \t\t\t\t\t$offset += 2;\n \n-\t\t\t\t\t$thisObject['payload_extension_system_count']    = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  2));\n+\t\t\t\t\t$thisObject['payload_extension_system_count']    = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  2));\n \t\t\t\t\t$offset += 2;\n \n \t\t\t\t\tfor ($i = 0; $i < $thisObject['stream_name_count']; $i++) {\n-\t\t\t\t\t\t$streamName = array();\n+\t\t\t\t\t\t$streamName = [];\n \n-\t\t\t\t\t\t$streamName['language_id_index']             = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  2));\n+\t\t\t\t\t\t$streamName['language_id_index']             = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  2));\n \t\t\t\t\t\t$offset += 2;\n \n-\t\t\t\t\t\t$streamName['stream_name_length']            = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  2));\n+\t\t\t\t\t\t$streamName['stream_name_length']            = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  2));\n \t\t\t\t\t\t$offset += 2;\n \n-\t\t\t\t\t\t$streamName['stream_name']                   = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  $streamName['stream_name_length']));\n+\t\t\t\t\t\t$streamName['stream_name']                   = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  $streamName['stream_name_length']));\n \t\t\t\t\t\t$offset += $streamName['stream_name_length'];\n \n \t\t\t\t\t\t$thisObject['stream_names'][$i] = $streamName;\n@@ -1780,22 +1780,22 @@\n \t\t\t\t\t}\n \n \t\t\t\t\tfor ($i = 0; $i < $thisObject['payload_extension_system_count']; $i++) {\n-\t\t\t\t\t\t$payloadExtensionSystem = array();\n+\t\t\t\t\t\t$payloadExtensionSystem = [];\n \n-\t\t\t\t\t\t$payloadExtensionSystem['extension_system_id']   =                              substr($asf_header_extension_object_data, $offset, 16);\n+\t\t\t\t\t\t$payloadExtensionSystem['extension_system_id']   =                              substr((string) $asf_header_extension_object_data, $offset, 16);\n \t\t\t\t\t\t$offset += 16;\n \t\t\t\t\t\t$payloadExtensionSystem['extension_system_id_text'] = $this->BytestringToGUID($payloadExtensionSystem['extension_system_id']);\n \n-\t\t\t\t\t\t$payloadExtensionSystem['extension_system_size'] = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  2));\n+\t\t\t\t\t\t$payloadExtensionSystem['extension_system_size'] = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  2));\n \t\t\t\t\t\t$offset += 2;\n \t\t\t\t\t\tif ($payloadExtensionSystem['extension_system_size'] <= 0) {\n \t\t\t\t\t\t\tbreak 2;\n \t\t\t\t\t\t}\n \n-\t\t\t\t\t\t$payloadExtensionSystem['extension_system_info_length'] = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  4));\n+\t\t\t\t\t\t$payloadExtensionSystem['extension_system_info_length'] = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  4));\n \t\t\t\t\t\t$offset += 4;\n \n-\t\t\t\t\t\t$payloadExtensionSystem['extension_system_info_length'] = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  $payloadExtensionSystem['extension_system_info_length']));\n+\t\t\t\t\t\t$payloadExtensionSystem['extension_system_info_length'] = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  $payloadExtensionSystem['extension_system_info_length']));\n \t\t\t\t\t\t$offset += $payloadExtensionSystem['extension_system_info_length'];\n \n \t\t\t\t\t\t$thisObject['payload_extension_systems'][$i] = $payloadExtensionSystem;\n@@ -1803,37 +1803,37 @@\n \n \t\t\t\t\tbreak;\n \n-\t\t\t\tcase GETID3_ASF_Padding_Object:\n+\t\t\t\tcase \\GETID3_ASF_PADDING_OBJECT:\n \t\t\t\t\t// padding, skip it\n \t\t\t\t\tbreak;\n \n-\t\t\t\tcase GETID3_ASF_Metadata_Object:\n-\t\t\t\t\t$thisObject['description_record_counts'] = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  2));\n+\t\t\t\tcase \\GETID3_ASF_METADATA_OBJECT:\n+\t\t\t\t\t$thisObject['description_record_counts'] = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  2));\n \t\t\t\t\t$offset += 2;\n \n \t\t\t\t\tfor ($i = 0; $i < $thisObject['description_record_counts']; $i++) {\n-\t\t\t\t\t\t$descriptionRecord = array();\n+\t\t\t\t\t\t$descriptionRecord = [];\n \n-\t\t\t\t\t\t$descriptionRecord['reserved_1']         = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  2)); // must be zero\n+\t\t\t\t\t\t$descriptionRecord['reserved_1']         = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  2)); // must be zero\n \t\t\t\t\t\t$offset += 2;\n \n-\t\t\t\t\t\t$descriptionRecord['stream_number']      = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  2));\n+\t\t\t\t\t\t$descriptionRecord['stream_number']      = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  2));\n \t\t\t\t\t\t$offset += 2;\n \n-\t\t\t\t\t\t$descriptionRecord['name_length']        = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  2));\n+\t\t\t\t\t\t$descriptionRecord['name_length']        = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  2));\n \t\t\t\t\t\t$offset += 2;\n \n-\t\t\t\t\t\t$descriptionRecord['data_type']          = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  2));\n+\t\t\t\t\t\t$descriptionRecord['data_type']          = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  2));\n \t\t\t\t\t\t$offset += 2;\n \t\t\t\t\t\t$descriptionRecord['data_type_text'] = $this->ASFmetadataLibraryObjectDataTypeLookup($descriptionRecord['data_type']);\n \n-\t\t\t\t\t\t$descriptionRecord['data_length']        = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  4));\n+\t\t\t\t\t\t$descriptionRecord['data_length']        = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  4));\n \t\t\t\t\t\t$offset += 4;\n \n-\t\t\t\t\t\t$descriptionRecord['name']               =                              substr($asf_header_extension_object_data, $offset,  $descriptionRecord['name_length']);\n+\t\t\t\t\t\t$descriptionRecord['name']               =                              substr((string) $asf_header_extension_object_data, $offset,  $descriptionRecord['name_length']);\n \t\t\t\t\t\t$offset += $descriptionRecord['name_length'];\n \n-\t\t\t\t\t\t$descriptionRecord['data']               =                              substr($asf_header_extension_object_data, $offset,  $descriptionRecord['data_length']);\n+\t\t\t\t\t\t$descriptionRecord['data']               =                              substr((string) $asf_header_extension_object_data, $offset,  $descriptionRecord['data_length']);\n \t\t\t\t\t\t$offset += $descriptionRecord['data_length'];\n \t\t\t\t\t\tswitch ($descriptionRecord['data_type']) {\n \t\t\t\t\t\t\tcase 0x0000: // Unicode string\n@@ -1862,17 +1862,17 @@\n \t\t\t\t\t}\n \t\t\t\t\tbreak;\n \n-\t\t\t\tcase GETID3_ASF_Language_List_Object:\n-\t\t\t\t\t$thisObject['language_id_record_counts'] = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  2));\n+\t\t\t\tcase \\GETID3_ASF_LANGUAGE_LIST_OBJECT:\n+\t\t\t\t\t$thisObject['language_id_record_counts'] = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  2));\n \t\t\t\t\t$offset += 2;\n \n \t\t\t\t\tfor ($i = 0; $i < $thisObject['language_id_record_counts']; $i++) {\n-\t\t\t\t\t\t$languageIDrecord = array();\n+\t\t\t\t\t\t$languageIDrecord = [];\n \n-\t\t\t\t\t\t$languageIDrecord['language_id_length']         = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  1));\n+\t\t\t\t\t\t$languageIDrecord['language_id_length']         = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  1));\n \t\t\t\t\t\t$offset += 1;\n \n-\t\t\t\t\t\t$languageIDrecord['language_id']                =                              substr($asf_header_extension_object_data, $offset,  $languageIDrecord['language_id_length']);\n+\t\t\t\t\t\t$languageIDrecord['language_id']                =                              substr((string) $asf_header_extension_object_data, $offset,  $languageIDrecord['language_id_length']);\n \t\t\t\t\t\t$offset += $languageIDrecord['language_id_length'];\n \n \t\t\t\t\t\t$thisObject['language_id_record'][$i] = $languageIDrecord;\n@@ -1879,36 +1879,36 @@\n \t\t\t\t\t}\n \t\t\t\t\tbreak;\n \n-\t\t\t\tcase GETID3_ASF_Metadata_Library_Object:\n-\t\t\t\t\t$thisObject['description_records_count'] = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  2));\n+\t\t\t\tcase \\GETID3_ASF_METADATA_LIBRARY_OBJECT:\n+\t\t\t\t\t$thisObject['description_records_count'] = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  2));\n \t\t\t\t\t$offset += 2;\n \n \t\t\t\t\tfor ($i = 0; $i < $thisObject['description_records_count']; $i++) {\n-\t\t\t\t\t\t$descriptionRecord = array();\n+\t\t\t\t\t\t$descriptionRecord = [];\n \n-\t\t\t\t\t\t$descriptionRecord['language_list_index'] = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  2));\n+\t\t\t\t\t\t$descriptionRecord['language_list_index'] = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  2));\n \t\t\t\t\t\t$offset += 2;\n \n-\t\t\t\t\t\t$descriptionRecord['stream_number']       = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  2));\n+\t\t\t\t\t\t$descriptionRecord['stream_number']       = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  2));\n \t\t\t\t\t\t$offset += 2;\n \n-\t\t\t\t\t\t$descriptionRecord['name_length']         = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  2));\n+\t\t\t\t\t\t$descriptionRecord['name_length']         = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  2));\n \t\t\t\t\t\t$offset += 2;\n \n-\t\t\t\t\t\t$descriptionRecord['data_type']           = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  2));\n+\t\t\t\t\t\t$descriptionRecord['data_type']           = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  2));\n \t\t\t\t\t\t$offset += 2;\n \t\t\t\t\t\t$descriptionRecord['data_type_text'] = $this->ASFmetadataLibraryObjectDataTypeLookup($descriptionRecord['data_type']);\n \n-\t\t\t\t\t\t$descriptionRecord['data_length']         = getid3_lib::LittleEndian2Int(substr($asf_header_extension_object_data, $offset,  4));\n+\t\t\t\t\t\t$descriptionRecord['data_length']         = getid3_lib::LittleEndian2Int(substr((string) $asf_header_extension_object_data, $offset,  4));\n \t\t\t\t\t\t$offset += 4;\n \n-\t\t\t\t\t\t$descriptionRecord['name']                =                              substr($asf_header_extension_object_data, $offset,  $descriptionRecord['name_length']);\n+\t\t\t\t\t\t$descriptionRecord['name']                =                              substr((string) $asf_header_extension_object_data, $offset,  $descriptionRecord['name_length']);\n \t\t\t\t\t\t$offset += $descriptionRecord['name_length'];\n \n-\t\t\t\t\t\t$descriptionRecord['data']                =                              substr($asf_header_extension_object_data, $offset,  $descriptionRecord['data_length']);\n+\t\t\t\t\t\t$descriptionRecord['data']                =                              substr((string) $asf_header_extension_object_data, $offset,  $descriptionRecord['data_length']);\n \t\t\t\t\t\t$offset += $descriptionRecord['data_length'];\n \n-\t\t\t\t\t\tif (preg_match('#^WM/Picture$#', str_replace(\"\\x00\", '', trim($descriptionRecord['name'])))) {\n+\t\t\t\t\t\tif (preg_match('#^WM/Picture$#', str_replace(\"\\x00\", '', trim((string) $descriptionRecord['name'])))) {\n \t\t\t\t\t\t\t$WMpicture = $this->ASF_WMpicture($descriptionRecord['data']);\n \t\t\t\t\t\t\tforeach ($WMpicture as $key => $value) {\n \t\t\t\t\t\t\t\t$descriptionRecord['data'] = $WMpicture;\n@@ -1938,7 +1938,7 @@\n \n \n \tpublic static function ASFmetadataLibraryObjectDataTypeLookup($id) {\n-\t\tstatic $ASFmetadataLibraryObjectDataTypeLookup = array(\n+\t\tstatic $ASFmetadataLibraryObjectDataTypeLookup = [\n \t\t\t0x0000 => 'Unicode string', // The data consists of a sequence of Unicode characters\n \t\t\t0x0001 => 'BYTE array',     // The type of the data is implementation-specific\n \t\t\t0x0002 => 'BOOL',           // The data is 2 bytes long and should be interpreted as a 16-bit unsigned integer. Only 0x0000 or 0x0001 are permitted values\n@@ -1946,8 +1946,8 @@\n \t\t\t0x0004 => 'QWORD',          // The data is 8 bytes long and should be interpreted as a 64-bit unsigned integer\n \t\t\t0x0005 => 'WORD',           // The data is 2 bytes long and should be interpreted as a 16-bit unsigned integer\n \t\t\t0x0006 => 'GUID',           // The data is 16 bytes long and should be interpreted as a 128-bit GUID\n-\t\t);\n-\t\treturn (isset($ASFmetadataLibraryObjectDataTypeLookup[$id]) ? $ASFmetadataLibraryObjectDataTypeLookup[$id] : 'invalid');\n+\t\t];\n+\t\treturn ($ASFmetadataLibraryObjectDataTypeLookup[$id] ?? 'invalid');\n \t}\n \n \tpublic function ASF_WMpicture(&$data) {\n@@ -1959,18 +1959,18 @@\n \t\t//  BYTE*  pbData;\n \t\t//} WM_PICTURE;\n \n-\t\t$WMpicture = array();\n+\t\t$WMpicture = [];\n \n \t\t$offset = 0;\n-\t\t$WMpicture['image_type_id'] = getid3_lib::LittleEndian2Int(substr($data, $offset, 1));\n+\t\t$WMpicture['image_type_id'] = getid3_lib::LittleEndian2Int(substr((string) $data, $offset, 1));\n \t\t$offset += 1;\n \t\t$WMpicture['image_type']    = $this->WMpictureTypeLookup($WMpicture['image_type_id']);\n-\t\t$WMpicture['image_size']    = getid3_lib::LittleEndian2Int(substr($data, $offset, 4));\n+\t\t$WMpicture['image_size']    = getid3_lib::LittleEndian2Int(substr((string) $data, $offset, 4));\n \t\t$offset += 4;\n \n \t\t$WMpicture['image_mime'] = '';\n \t\tdo {\n-\t\t\t$next_byte_pair = substr($data, $offset, 2);\n+\t\t\t$next_byte_pair = substr((string) $data, $offset, 2);\n \t\t\t$offset += 2;\n \t\t\t$WMpicture['image_mime'] .= $next_byte_pair;\n \t\t} while ($next_byte_pair !== \"\\x00\\x00\");\n@@ -1977,15 +1977,15 @@\n \n \t\t$WMpicture['image_description'] = '';\n \t\tdo {\n-\t\t\t$next_byte_pair = substr($data, $offset, 2);\n+\t\t\t$next_byte_pair = substr((string) $data, $offset, 2);\n \t\t\t$offset += 2;\n \t\t\t$WMpicture['image_description'] .= $next_byte_pair;\n \t\t} while ($next_byte_pair !== \"\\x00\\x00\");\n \n \t\t$WMpicture['dataoffset'] = $offset;\n-\t\t$WMpicture['data'] = substr($data, $offset);\n+\t\t$WMpicture['data'] = substr((string) $data, $offset);\n \n-\t\t$imageinfo = array();\n+\t\t$imageinfo = [];\n \t\t$WMpicture['image_mime'] = '';\n \t\t$imagechunkcheck = getid3_lib::GetDataImageSize($WMpicture['data'], $imageinfo);\n \t\tunset($imageinfo);\n@@ -1993,9 +1993,9 @@\n \t\t\t$WMpicture['image_mime'] = image_type_to_mime_type($imagechunkcheck[2]);\n \t\t}\n \t\tif (!isset($this->getid3->info['asf']['comments']['picture'])) {\n-\t\t\t$this->getid3->info['asf']['comments']['picture'] = array();\n+\t\t\t$this->getid3->info['asf']['comments']['picture'] = [];\n \t\t}\n-\t\t$this->getid3->info['asf']['comments']['picture'][] = array('data'=>$WMpicture['data'], 'image_mime'=>$WMpicture['image_mime']);\n+\t\t$this->getid3->info['asf']['comments']['picture'][] = ['data'=>$WMpicture['data'], 'image_mime'=>$WMpicture['image_mime']];\n \n \t\treturn $WMpicture;\n \t}\n@@ -2010,8 +2010,8 @@\n \t// Remove terminator 00 00\n \tpublic static function TrimTerm($string) {\n \t\t// remove terminator, only if present (it should be, but...)\n-\t\tif (substr($string, -2) === \"\\x00\\x00\") {\n-\t\t\t$string = substr($string, 0, -2);\n+\t\tif (str_ends_with((string) $string, \"\\x00\\x00\")) {\n+\t\t\t$string = substr((string) $string, 0, -2);\n \t\t}\n \t\treturn $string;\n \t}\n",
        "applied_rectors": [
          "Rector\\Php54\\Rector\\Array_\\LongArrayToShortArrayRector",
          "Rector\\Php70\\Rector\\Break_\\BreakNotInLoopOrSwitchToReturnRector",
          "Rector\\Php70\\Rector\\Ternary\\TernaryToNullCoalescingRector",
          "Rector\\Php71\\Rector\\List_\\ListToArrayDestructRector",
          "Rector\\Php72\\Rector\\FuncCall\\StringifyDefineRector",
          "Rector\\Php73\\Rector\\ConstFetch\\SensitiveConstantNameRector",
          "Rector\\Php74\\Rector\\ArrayDimFetch\\CurlyToSquareBracketArrayStringRector",
          "Rector\\Php74\\Rector\\Assign\\NullCoalescingOperatorRector",
          "Rector\\Php80\\Rector\\Identical\\StrEndsWithRector",
          "Rector\\Php80\\Rector\\Identical\\StrStartsWithRector",
          "Rector\\Php80\\Rector\\NotIdentical\\StrContainsRector",
          "Rector\\Php81\\Rector\\FuncCall\\NullToStrictStringFuncCallArgRector"
        ]
      }
    ],
    "changed_files": [
      "selected_100_files/extra_large_1000_plus/002_module.audio-video.asf.php"
    ]
  }
}