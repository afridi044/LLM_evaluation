{
  "file_path": "selected_100_files\\medium_201_500\\019_atomlib.php",
  "rector_analysis": {
    "php_version_changes": 8,
    "rules_triggered": [
      "Rector\\Php52\\Rector\\Property\\VarToPublicPropertyRector",
      "Rector\\Php54\\Rector\\Array_\\LongArrayToShortArrayRector",
      "Rector\\Php70\\Rector\\ClassMethod\\Php4ConstructorRector",
      "Rector\\Php70\\Rector\\FuncCall\\EregToPregMatchRector",
      "Rector\\Php72\\Rector\\FuncCall\\CreateFunctionToAnonymousFunctionRector",
      "Rector\\Php74\\Rector\\Closure\\ClosureToArrowFunctionRector",
      "Rector\\Php81\\Rector\\Array_\\FirstClassCallableRector",
      "Rector\\Php81\\Rector\\FuncCall\\NullToStrictStringFuncCallArgRector"
    ],
    "changes_by_php_version": {
      "php_52": 1,
      "php_54": 1,
      "php_70": 2,
      "php_72": 1,
      "php_74": 1,
      "php_81": 2
    },
    "has_diff": true,
    "diff_line_count": 277
  },
  "analysis_metadata": {
    "rector_version": "2.1.0",
    "analysis_date": "2025-08-31T05:18:52.554399",
    "file_size_kb": 10.7,
    "analysis_type": "version_specific_only"
  },
  "raw_rector_output": {
    "totals": {
      "changed_files": 1,
      "errors": 0
    },
    "file_diffs": [
      {
        "file": "selected_100_files/medium_201_500/019_atomlib.php",
        "diff": "--- Original\n+++ New\n@@ -21,13 +21,13 @@\n \t * @var array\n \t * @access public\n \t */\n-    var $links = array();\n+    public $links = [];\n     /**\n      * Stores Categories\n      * @var array\n      * @access public\n      */\n-    var $categories = array();\n+    public $categories = [];\n \t/**\n \t * Stores Entries\n \t *\n@@ -34,7 +34,7 @@\n \t * @var array\n \t * @access public\n \t */\n-    var $entries = array();\n+    public $entries = [];\n }\n \n /**\n@@ -48,13 +48,13 @@\n \t * @var array\n \t * @access public\n \t */\n-    var $links = array();\n+    public $links = [];\n     /**\n      * Stores Categories\n      * @var array\n \t * @access public\n      */\n-    var $categories = array();\n+    public $categories = [];\n }\n \n /**\n@@ -64,35 +64,41 @@\n  */\n class AtomParser {\n \n-    var $NS = 'http://www.w3.org/2005/Atom';\n-    var $ATOM_CONTENT_ELEMENTS = array('content','summary','title','subtitle','rights');\n-    var $ATOM_SIMPLE_ELEMENTS = array('id','updated','published','draft');\n+    public $NS = 'http://www.w3.org/2005/Atom';\n+    public $ATOM_CONTENT_ELEMENTS = ['content','summary','title','subtitle','rights'];\n+    public $ATOM_SIMPLE_ELEMENTS = ['id','updated','published','draft'];\n \n-    var $debug = false;\n+    public $debug = false;\n \n-    var $depth = 0;\n-    var $indent = 2;\n-    var $in_content;\n-    var $ns_contexts = array();\n-    var $ns_decls = array();\n-    var $content_ns_decls = array();\n-    var $content_ns_contexts = array();\n-    var $is_xhtml = false;\n-    var $is_html = false;\n-    var $is_text = true;\n-    var $skipped_div = false;\n+    public $depth = 0;\n+    public $indent = 2;\n+    public $in_content;\n+    public $ns_contexts = [];\n+    public $ns_decls = [];\n+    public $content_ns_decls = [];\n+    public $content_ns_contexts = [];\n+    public $is_xhtml = false;\n+    public $is_html = false;\n+    public $is_text = true;\n+    public $skipped_div = false;\n \n-    var $FILE = \"php://input\";\n+    public $FILE = \"php://input\";\n \n-    var $feed;\n-    var $current;\n+    public $feed;\n+    public $current;\n \n-    function AtomParser() {\n+    function __construct() {\n \n         $this->feed = new AtomFeed();\n         $this->current = null;\n-        $this->map_attrs_func = create_function('$k,$v', 'return \"$k=\\\"$v\\\"\";');\n-        $this->map_xmlns_func = create_function('$p,$n', '$xd = \"xmlns\"; if(strlen($n[0])>0) $xd .= \":{$n[0]}\"; return \"{$xd}=\\\"{$n[1]}\\\"\";');\n+        $this->map_attrs_func = (fn($k, $v) => \"{$k}=\\\"{$v}\\\"\");\n+        $this->map_xmlns_func = function ($p, $n) {\n+            $xd = \"xmlns\";\n+            if (strlen($n[0]) > 0) {\n+                $xd .= \":{$n[0]}\";\n+            }\n+            return \"{$xd}=\\\"{$n[1]}\\\"\";\n+        };\n     }\n \n     function _p($msg) {\n@@ -107,9 +113,9 @@\n \n     function parse() {\n \n-        set_error_handler(array(&$this, 'error_handler'));\n+        set_error_handler($this->error_handler(...));\n \n-        array_unshift($this->ns_contexts, array());\n+        array_unshift($this->ns_contexts, []);\n \n         $parser = xml_parser_create_ns();\n         xml_set_object($parser, $this);\n@@ -148,7 +154,7 @@\n \n     function start_element($parser, $name, $attrs) {\n \n-        $tag = array_pop(split(\":\", $name));\n+        $tag = array_pop(preg_split(\"#:#m\", (string) $name));\n \n         switch($name) {\n             case $this->NS . ':feed':\n@@ -169,12 +175,12 @@\n \n         if(!empty($this->in_content)) {\n \n-            $this->content_ns_decls = array();\n+            $this->content_ns_decls = [];\n \n             if($this->is_html || $this->is_text)\n                 trigger_error(\"Invalid content in element found. Content must not be of type text or html if it contains markup.\");\n \n-            $attrs_prefix = array();\n+            $attrs_prefix = [];\n \n             // resolve prefixes for attributes\n             foreach($attrs as $key => $value) {\n@@ -202,10 +208,10 @@\n                 }\n             }\n \n-            array_push($this->in_content, array($tag, $this->depth, \"<\". $with_prefix[1] .\"{$xmlns_str}{$attrs_str}\" . \">\"));\n+            array_push($this->in_content, [$tag, $this->depth, \"<\". $with_prefix[1] .\"{$xmlns_str}{$attrs_str}\" . \">\"]);\n \n         } else if(in_array($tag, $this->ATOM_CONTENT_ELEMENTS) || in_array($tag, $this->ATOM_SIMPLE_ELEMENTS)) {\n-            $this->in_content = array();\n+            $this->in_content = [];\n             $this->is_xhtml = $attrs['type'] == 'xhtml';\n             $this->is_html = $attrs['type'] == 'html' || $attrs['type'] == 'text/html';\n             $this->is_text = !in_array('type',array_keys($attrs)) || $attrs['type'] == 'text';\n@@ -214,7 +220,7 @@\n             if(in_array('src',array_keys($attrs))) {\n                 $this->current->$tag = $attrs;\n             } else {\n-                array_push($this->in_content, array($tag,$this->depth, $type));\n+                array_push($this->in_content, [$tag,$this->depth, $type]);\n             }\n         } else if($tag == 'link') {\n             array_push($this->current->links, $attrs);\n@@ -222,12 +228,12 @@\n             array_push($this->current->categories, $attrs);\n         }\n \n-        $this->ns_decls = array();\n+        $this->ns_decls = [];\n     }\n \n     function end_element($parser, $name) {\n \n-        $tag = array_pop(split(\":\", $name));\n+        $tag = array_pop(preg_split(\"#:#m\", (string) $name));\n \n         $ccount = count($this->in_content);\n \n@@ -239,7 +245,7 @@\n                 $this->in_content[0][1] == $this->depth) {\n                 $origtype = $this->in_content[0][2];\n                 array_shift($this->in_content);\n-                $newcontent = array();\n+                $newcontent = [];\n                 foreach($this->in_content as $c) {\n                     if(count($c) == 3) {\n                         array_push($newcontent, $c[2]);\n@@ -252,18 +258,18 @@\n                     }\n                 }\n                 if(in_array($tag, $this->ATOM_CONTENT_ELEMENTS)) {\n-                    $this->current->$tag = array($origtype, join('',$newcontent));\n+                    $this->current->$tag = [$origtype, join('',$newcontent)];\n                 } else {\n                     $this->current->$tag = join('',$newcontent);\n                 }\n-                $this->in_content = array();\n+                $this->in_content = [];\n             } else if($this->in_content[$ccount-1][0] == $tag &&\n                 $this->in_content[$ccount-1][1] == $this->depth) {\n-                $this->in_content[$ccount-1][2] = substr($this->in_content[$ccount-1][2],0,-1) . \"/>\";\n+                $this->in_content[$ccount-1][2] = substr((string) $this->in_content[$ccount-1][2],0,-1) . \"/>\";\n             } else {\n                 # else, just finalize the current element's content\n                 $endtag = $this->ns_to_prefix($name);\n-                array_push($this->in_content, array($tag, $this->depth, \"</$endtag[1]>\"));\n+                array_push($this->in_content, [$tag, $this->depth, \"</$endtag[1]>\"]);\n             }\n         }\n \n@@ -281,7 +287,7 @@\n \n     function start_ns($parser, $prefix, $uri) {\n         $this->_p(\"starting: \" . $prefix . \":\" . $uri);\n-        array_push($this->ns_decls, array($prefix,$uri));\n+        array_push($this->ns_decls, [$prefix,$uri]);\n     }\n \n     function end_ns($parser, $prefix) {\n@@ -289,7 +295,7 @@\n     }\n \n     function cdata($parser, $data) {\n-        $this->_p(\"data: #\" . str_replace(array(\"\\n\"), array(\"\\\\n\"), trim($data)) . \"#\");\n+        $this->_p(\"data: #\" . str_replace([\"\\n\"], [\"\\\\n\"], trim((string) $data)) . \"#\");\n         if(!empty($this->in_content)) {\n             array_push($this->in_content, $data);\n         }\n@@ -302,7 +308,7 @@\n \n     function ns_to_prefix($qname, $attr=false) {\n         # split 'http://www.w3.org/1999/xhtml:div' into ('http','//www.w3.org/1999/xhtml','div')\n-        $components = split(\":\", $qname);\n+        $components = preg_split(\"#:#m\", (string) $qname);\n \n         # grab the last one (e.g 'div')\n         $name = array_pop($components);\n@@ -312,8 +318,8 @@\n             $ns = join(\":\",$components);\n             foreach($this->ns_contexts as $context) {\n                 foreach($context as $mapping) {\n-                    if($mapping[1] == $ns && strlen($mapping[0]) > 0) {\n-                        return array($mapping, \"$mapping[0]:$name\");\n+                    if($mapping[1] == $ns && strlen((string) $mapping[0]) > 0) {\n+                        return [$mapping, \"$mapping[0]:$name\"];\n                     }\n                 }\n             }\n@@ -320,12 +326,12 @@\n         }\n \n         if($attr) {\n-            return array(null, $name);\n+            return [null, $name];\n         } else {\n             foreach($this->ns_contexts as $context) {\n                 foreach($context as $mapping) {\n-                    if(strlen($mapping[0]) == 0) {\n-                        return array($mapping, $name);\n+                    if(strlen((string) $mapping[0]) == 0) {\n+                        return [$mapping, $name];\n                     }\n                 }\n             }\n@@ -345,8 +351,8 @@\n \n     function xml_escape($string)\n     {\n-             return str_replace(array('&','\"',\"'\",'<','>'),\n-                array('&amp;','&quot;','&apos;','&lt;','&gt;'),\n+             return str_replace(['&','\"',\"'\",'<','>'],\n+                ['&amp;','&quot;','&apos;','&lt;','&gt;'],\n                 $string );\n     }\n }\n",
        "applied_rectors": [
          "Rector\\Php52\\Rector\\Property\\VarToPublicPropertyRector",
          "Rector\\Php54\\Rector\\Array_\\LongArrayToShortArrayRector",
          "Rector\\Php70\\Rector\\ClassMethod\\Php4ConstructorRector",
          "Rector\\Php70\\Rector\\FuncCall\\EregToPregMatchRector",
          "Rector\\Php72\\Rector\\FuncCall\\CreateFunctionToAnonymousFunctionRector",
          "Rector\\Php74\\Rector\\Closure\\ClosureToArrowFunctionRector",
          "Rector\\Php81\\Rector\\Array_\\FirstClassCallableRector",
          "Rector\\Php81\\Rector\\FuncCall\\NullToStrictStringFuncCallArgRector"
        ]
      }
    ],
    "changed_files": [
      "selected_100_files/medium_201_500/019_atomlib.php"
    ]
  }
}