{
  "file_path": "selected_100_files\\extra_large_1000_plus\\013_file.php",
  "rector_analysis": {
    "php_version_changes": 8,
    "rules_triggered": [
      "Rector\\Php54\\Rector\\Array_\\LongArrayToShortArrayRector",
      "Rector\\Php70\\Rector\\Ternary\\TernaryToNullCoalescingRector",
      "Rector\\Php71\\Rector\\List_\\ListToArrayDestructRector",
      "Rector\\Php73\\Rector\\FuncCall\\StringifyStrNeedlesRector",
      "Rector\\Php80\\Rector\\Identical\\StrEndsWithRector",
      "Rector\\Php80\\Rector\\Identical\\StrStartsWithRector",
      "Rector\\Php80\\Rector\\NotIdentical\\StrContainsRector",
      "Rector\\Php81\\Rector\\FuncCall\\NullToStrictStringFuncCallArgRector"
    ],
    "changes_by_php_version": {
      "php_54": 1,
      "php_70": 1,
      "php_71": 1,
      "php_73": 1,
      "php_80": 3,
      "php_81": 1
    },
    "has_diff": true,
    "diff_line_count": 348
  },
  "analysis_metadata": {
    "rector_version": "2.1.0",
    "analysis_date": "2025-08-31T05:18:29.657977",
    "file_size_kb": 44.1,
    "analysis_type": "version_specific_only"
  },
  "raw_rector_output": {
    "totals": {
      "changed_files": 1,
      "errors": 0
    },
    "file_diffs": [
      {
        "file": "selected_100_files/extra_large_1000_plus/013_file.php",
        "diff": "--- Original\n+++ New\n@@ -9,7 +9,7 @@\n  */\n \n /** The descriptions for theme files. */\n-$wp_file_descriptions = array(\n+$wp_file_descriptions = [\n \t'index.php' => __( 'Main Index Template' ),\n \t'style.css' => __( 'Stylesheet' ),\n \t'editor-style.css' => __( 'Visual Editor Stylesheet' ),\n@@ -42,7 +42,7 @@\n \t'wp-layout.css' => __( 'Stylesheet' ),\n \t'wp-comments.php' => __( 'Comments Template' ),\n \t'wp-comments-popup.php' => __( 'Popup Comments Template' ),\n-);\n+];\n \n /**\n  * Get the description for standard WordPress theme files and other various standard\n@@ -83,8 +83,8 @@\n \t$siteurl = set_url_scheme( get_option( 'siteurl' ), 'http' );\n \tif ( ! empty( $home ) && 0 !== strcasecmp( $home, $siteurl ) ) {\n \t\t$wp_path_rel_to_home = str_ireplace( $home, '', $siteurl ); /* $siteurl - $home */\n-\t\t$pos = strripos( str_replace( '\\\\', '/', $_SERVER['SCRIPT_FILENAME'] ), trailingslashit( $wp_path_rel_to_home ) );\n-\t\t$home_path = substr( $_SERVER['SCRIPT_FILENAME'], 0, $pos );\n+\t\t$pos = strripos( str_replace( '\\\\', '/', $_SERVER['SCRIPT_FILENAME'] ), (string) trailingslashit( $wp_path_rel_to_home ) );\n+\t\t$home_path = substr( (string) $_SERVER['SCRIPT_FILENAME'], 0, $pos );\n \t\t$home_path = trailingslashit( $home_path );\n \t} else {\n \t\t$home_path = ABSPATH;\n@@ -110,10 +110,10 @@\n \tif ( ! $levels )\n \t\treturn false;\n \n-\t$files = array();\n+\t$files = [];\n \tif ( $dir = @opendir( $folder ) ) {\n \t\twhile (($file = readdir( $dir ) ) !== false ) {\n-\t\t\tif ( in_array($file, array('.', '..') ) )\n+\t\t\tif ( in_array($file, ['.', '..'] ) )\n \t\t\t\tcontinue;\n \t\t\tif ( is_dir( $folder . '/' . $file ) ) {\n \t\t\t\t$files2 = list_files( $folder . '/' . $file, $levels - 1);\n@@ -207,7 +207,7 @@\n \t// The default error handler.\n \tif ( ! function_exists( 'wp_handle_upload_error' ) ) {\n \t\tfunction wp_handle_upload_error( &$file, $message ) {\n-\t\t\treturn array( 'error' => $message );\n+\t\t\treturn [ 'error' => $message ];\n \t\t}\n \t}\n \n@@ -248,7 +248,7 @@\n \t\t$upload_error_strings = $overrides['upload_error_strings'];\n \t} else {\n \t\t// Courtesy of php.net, the strings that describe the error indicated in $_FILES[{form field}]['error'].\n-\t\t$upload_error_strings = array(\n+\t\t$upload_error_strings = [\n \t\t\tfalse,\n \t\t\t__( 'The uploaded file exceeds the upload_max_filesize directive in php.ini.' ),\n \t\t\t__( 'The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form.' ),\n@@ -258,18 +258,18 @@\n \t\t\t__( 'Missing a temporary folder.' ),\n \t\t\t__( 'Failed to write file to disk.' ),\n \t\t\t__( 'File upload stopped by extension.' )\n-\t\t);\n+\t\t];\n \t}\n \n \t// All tests are on by default. Most can be turned off by $overrides[{test_name}] = false;\n-\t$test_form = isset( $overrides['test_form'] ) ? $overrides['test_form'] : true;\n-\t$test_size = isset( $overrides['test_size'] ) ? $overrides['test_size'] : true;\n+\t$test_form = $overrides['test_form'] ?? true;\n+\t$test_size = $overrides['test_size'] ?? true;\n \n \t// If you override this, you must provide $ext and $type!!\n-\t$test_type = isset( $overrides['test_type'] ) ? $overrides['test_type'] : true;\n-\t$mimes = isset( $overrides['mimes'] ) ? $overrides['mimes'] : false;\n+\t$test_type = $overrides['test_type'] ?? true;\n+\t$mimes = $overrides['mimes'] ?? false;\n \n-\t$test_upload = isset( $overrides['test_upload'] ) ? $overrides['test_upload'] : true;\n+\t$test_upload = $overrides['test_upload'] ?? true;\n \n \t// A correct form post will pass this test.\n \tif ( $test_form && ( ! isset( $_POST['action'] ) || ( $_POST['action'] != $action ) ) ) {\n@@ -337,10 +337,10 @@\n \t}\n \n \tif ( false === $move_new_file ) {\n-\t\tif ( 0 === strpos( $uploads['basedir'], ABSPATH ) ) {\n+\t\tif ( str_starts_with((string) $uploads['basedir'], ABSPATH) ) {\n \t\t\t$error_path = str_replace( ABSPATH, '', $uploads['basedir'] ) . $uploads['subdir'];\n \t\t} else {\n-\t\t\t$error_path = basename( $uploads['basedir'] ) . $uploads['subdir'];\n+\t\t\t$error_path = basename( (string) $uploads['basedir'] ) . $uploads['subdir'];\n \t\t}\n \t\treturn $upload_error_handler( $file, sprintf( __('The uploaded file could not be moved to %s.' ), $error_path ) );\n \t}\n@@ -371,11 +371,11 @@\n \t * }\n \t * @param string $context The type of upload action. Values include 'upload' or 'sideload'.\n \t */\n-\treturn apply_filters( 'wp_handle_upload', array(\n+\treturn apply_filters( 'wp_handle_upload', [\n \t\t'file' => $new_file,\n \t\t'url'  => $url,\n \t\t'type' => $type\n-\t), 'wp_handle_sideload' === $action ? 'sideload' : 'upload' ); }\n+\t], 'wp_handle_sideload' === $action ? 'sideload' : 'upload' ); }\n \n /**\n  * Wrapper for _wp_handle_upload(), passes 'wp_handle_upload' action.\n@@ -451,7 +451,7 @@\n \tif ( ! $tmpfname )\n \t\treturn new WP_Error('http_no_file', __('Could not create Temporary file.'));\n \n-\t$response = wp_safe_remote_get( $url, array( 'timeout' => $timeout, 'stream' => true, 'filename' => $tmpfname ) );\n+\t$response = wp_safe_remote_get( $url, [ 'timeout' => $timeout, 'stream' => true, 'filename' => $tmpfname ] );\n \n \tif ( is_wp_error( $response ) ) {\n \t\tunlink( $tmpfname );\n@@ -523,7 +523,7 @@\n \t/** This filter is documented in wp-admin/admin.php */\n \t@ini_set( 'memory_limit', apply_filters( 'admin_memory_limit', WP_MAX_MEMORY_LIMIT ) );\n \n-\t$needed_dirs = array();\n+\t$needed_dirs = [];\n \t$to = trailingslashit($to);\n \n \t// Determine any parent dir's needed (of the upgrade directory)\n@@ -577,7 +577,7 @@\n  * @param array $needed_dirs A partial list of required folders needed to be created.\n  * @return mixed WP_Error on failure, True on success\n  */\n-function _unzip_file_ziparchive($file, $to, $needed_dirs = array() ) {\n+function _unzip_file_ziparchive($file, $to, $needed_dirs = [] ) {\n \tglobal $wp_filesystem;\n \n \t$z = new ZipArchive();\n@@ -584,7 +584,7 @@\n \n \t$zopen = $z->open( $file, ZIPARCHIVE::CHECKCONS );\n \tif ( true !== $zopen )\n-\t\treturn new WP_Error( 'incompatible_archive', __( 'Incompatible Archive.' ), array( 'ziparchive_error' => $zopen ) );\n+\t\treturn new WP_Error( 'incompatible_archive', __( 'Incompatible Archive.' ), [ 'ziparchive_error' => $zopen ] );\n \n \t$uncompressed_size = 0;\n \n@@ -592,12 +592,12 @@\n \t\tif ( ! $info = $z->statIndex($i) )\n \t\t\treturn new WP_Error( 'stat_failed_ziparchive', __( 'Could not retrieve file from archive.' ) );\n \n-\t\tif ( '__MACOSX/' === substr($info['name'], 0, 9) ) // Skip the OS X-created __MACOSX directory\n+\t\tif ( str_starts_with($info['name'], '__MACOSX/') ) // Skip the OS X-created __MACOSX directory\n \t\t\tcontinue;\n \n \t\t$uncompressed_size += $info['size'];\n \n-\t\tif ( '/' == substr($info['name'], -1) ) // directory\n+\t\tif ( str_ends_with($info['name'], '/') ) // directory\n \t\t\t$needed_dirs[] = $to . untrailingslashit($info['name']);\n \t\telse\n \t\t\t$needed_dirs[] = $to . untrailingslashit(dirname($info['name']));\n@@ -619,10 +619,10 @@\n \t\t// Check the parent folders of the folders all exist within the creation array.\n \t\tif ( untrailingslashit($to) == $dir ) // Skip over the working directory, We know this exists (or will exist)\n \t\t\tcontinue;\n-\t\tif ( strpos($dir, $to) === false ) // If the directory is not within the working directory, Skip it\n+\t\tif ( !str_contains((string) $dir, $to) ) // If the directory is not within the working directory, Skip it\n \t\t\tcontinue;\n \n-\t\t$parent_folder = dirname($dir);\n+\t\t$parent_folder = dirname((string) $dir);\n \t\twhile ( !empty($parent_folder) && untrailingslashit($to) != $parent_folder && !in_array($parent_folder, $needed_dirs) ) {\n \t\t\t$needed_dirs[] = $parent_folder;\n \t\t\t$parent_folder = dirname($parent_folder);\n@@ -633,7 +633,7 @@\n \t// Create those directories if need be:\n \tforeach ( $needed_dirs as $_dir ) {\n \t\tif ( ! $wp_filesystem->mkdir($_dir, FS_CHMOD_DIR) && ! $wp_filesystem->is_dir($_dir) ) // Only check to see if the Dir exists upon creation failure. Less I/O this way.\n-\t\t\treturn new WP_Error( 'mkdir_failed_ziparchive', __( 'Could not create directory.' ), substr( $_dir, strlen( $to ) ) );\n+\t\t\treturn new WP_Error( 'mkdir_failed_ziparchive', __( 'Could not create directory.' ), substr( (string) $_dir, strlen( $to ) ) );\n \t}\n \tunset($needed_dirs);\n \n@@ -641,10 +641,10 @@\n \t\tif ( ! $info = $z->statIndex($i) )\n \t\t\treturn new WP_Error( 'stat_failed_ziparchive', __( 'Could not retrieve file from archive.' ) );\n \n-\t\tif ( '/' == substr($info['name'], -1) ) // directory\n+\t\tif ( str_ends_with($info['name'], '/') ) // directory\n \t\t\tcontinue;\n \n-\t\tif ( '__MACOSX/' === substr($info['name'], 0, 9) ) // Don't extract the OS X-created __MACOSX directory files\n+\t\tif ( str_starts_with($info['name'], '__MACOSX/') ) // Don't extract the OS X-created __MACOSX directory files\n \t\t\tcontinue;\n \n \t\t$contents = $z->getFromIndex($i);\n@@ -673,7 +673,7 @@\n  * @param array $needed_dirs A partial list of required folders needed to be created.\n  * @return mixed WP_Error on failure, True on success\n  */\n-function _unzip_file_pclzip($file, $to, $needed_dirs = array()) {\n+function _unzip_file_pclzip($file, $to, $needed_dirs = []) {\n \tglobal $wp_filesystem;\n \n \tmbstring_binary_safe_encoding();\n@@ -697,12 +697,12 @@\n \n \t// Determine any children directories needed (From within the archive)\n \tforeach ( $archive_files as $file ) {\n-\t\tif ( '__MACOSX/' === substr($file['filename'], 0, 9) ) // Skip the OS X-created __MACOSX directory\n+\t\tif ( str_starts_with((string) $file['filename'], '__MACOSX/') ) // Skip the OS X-created __MACOSX directory\n \t\t\tcontinue;\n \n \t\t$uncompressed_size += $file['size'];\n \n-\t\t$needed_dirs[] = $to . untrailingslashit( $file['folder'] ? $file['filename'] : dirname($file['filename']) );\n+\t\t$needed_dirs[] = $to . untrailingslashit( $file['folder'] ? $file['filename'] : dirname((string) $file['filename']) );\n \t}\n \n \t/*\n@@ -721,10 +721,10 @@\n \t\t// Check the parent folders of the folders all exist within the creation array.\n \t\tif ( untrailingslashit($to) == $dir ) // Skip over the working directory, We know this exists (or will exist)\n \t\t\tcontinue;\n-\t\tif ( strpos($dir, $to) === false ) // If the directory is not within the working directory, Skip it\n+\t\tif ( !str_contains((string) $dir, $to) ) // If the directory is not within the working directory, Skip it\n \t\t\tcontinue;\n \n-\t\t$parent_folder = dirname($dir);\n+\t\t$parent_folder = dirname((string) $dir);\n \t\twhile ( !empty($parent_folder) && untrailingslashit($to) != $parent_folder && !in_array($parent_folder, $needed_dirs) ) {\n \t\t\t$needed_dirs[] = $parent_folder;\n \t\t\t$parent_folder = dirname($parent_folder);\n@@ -736,7 +736,7 @@\n \tforeach ( $needed_dirs as $_dir ) {\n \t\t// Only check to see if the dir exists upon creation failure. Less I/O this way.\n \t\tif ( ! $wp_filesystem->mkdir( $_dir, FS_CHMOD_DIR ) && ! $wp_filesystem->is_dir( $_dir ) )\n-\t\t\treturn new WP_Error( 'mkdir_failed_pclzip', __( 'Could not create directory.' ), substr( $_dir, strlen( $to ) ) );\n+\t\t\treturn new WP_Error( 'mkdir_failed_pclzip', __( 'Could not create directory.' ), substr( (string) $_dir, strlen( $to ) ) );\n \t}\n \tunset($needed_dirs);\n \n@@ -745,7 +745,7 @@\n \t\tif ( $file['folder'] )\n \t\t\tcontinue;\n \n-\t\tif ( '__MACOSX/' === substr($file['filename'], 0, 9) ) // Don't extract the OS X-created __MACOSX directory files\n+\t\tif ( str_starts_with((string) $file['filename'], '__MACOSX/') ) // Don't extract the OS X-created __MACOSX directory files\n \t\t\tcontinue;\n \n \t\tif ( ! $wp_filesystem->put_contents( $to . $file['filename'], $file['content'], FS_CHMOD_FILE) )\n@@ -765,7 +765,7 @@\n  * @param array $skip_list a list of files/folders to skip copying\n  * @return mixed WP_Error on failure, True on success.\n  */\n-function copy_dir($from, $to, $skip_list = array() ) {\n+function copy_dir($from, $to, $skip_list = [] ) {\n \tglobal $wp_filesystem;\n \n \t$dirlist = $wp_filesystem->dirlist($from);\n@@ -791,10 +791,10 @@\n \t\t\t}\n \n \t\t\t// generate the $sub_skip_list for the subdirectory as a sub-set of the existing $skip_list\n-\t\t\t$sub_skip_list = array();\n+\t\t\t$sub_skip_list = [];\n \t\t\tforeach ( $skip_list as $skip_item ) {\n-\t\t\t\tif ( 0 === strpos( $skip_item, $filename . '/' ) )\n-\t\t\t\t\t$sub_skip_list[] = preg_replace( '!^' . preg_quote( $filename, '!' ) . '/!i', '', $skip_item );\n+\t\t\t\tif ( str_starts_with((string) $skip_item, $filename . '/') )\n+\t\t\t\t\t$sub_skip_list[] = preg_replace( '!^' . preg_quote( $filename, '!' ) . '/!i', '', (string) $skip_item );\n \t\t\t}\n \n \t\t\t$result = copy_dir($from . $filename, $to . $filename, $sub_skip_list);\n@@ -887,7 +887,7 @@\n  * @param string $context Full path to the directory that is tested for being writable.\n  * @return string The transport to use, see description for valid return values.\n  */\n-function get_filesystem_method($args = array(), $context = false) {\n+function get_filesystem_method($args = [], $context = false) {\n \t$method = defined('FS_METHOD') ? FS_METHOD : false; // Please ensure that this is either 'direct', 'ssh2', 'ftpext' or 'ftpsockets'\n \n \tif ( ! $method && function_exists('getmyuid') && function_exists('fileowner') ){\n@@ -965,15 +965,15 @@\n \t\treturn $req_cred;\n \n \tif ( empty($type) )\n-\t\t$type = get_filesystem_method(array(), $context);\n+\t\t$type = get_filesystem_method([], $context);\n \n \tif ( 'direct' == $type )\n \t\treturn true;\n \n \tif ( is_null( $extra_fields ) )\n-\t\t$extra_fields = array( 'version', 'locale' );\n+\t\t$extra_fields = [ 'version', 'locale' ];\n \n-\t$credentials = get_option('ftp_credentials', array( 'hostname' => '', 'username' => ''));\n+\t$credentials = get_option('ftp_credentials', [ 'hostname' => '', 'username' => '']);\n \n \t// If defined, set it to that, Else, If POST'd, set it to that, If not, Set it to whatever it previously was(saved details in option)\n \t$credentials['hostname'] = defined('FTP_HOST') ? FTP_HOST : (!empty($_POST['hostname']) ? wp_unslash( $_POST['hostname'] ) : $credentials['hostname']);\n@@ -985,10 +985,10 @@\n \t$credentials['private_key'] = defined('FTP_PRIKEY') ? FTP_PRIKEY : (!empty($_POST['private_key']) ? wp_unslash( $_POST['private_key'] ) : '');\n \n \t// Sanitize the hostname, Some people might pass in odd-data:\n-\t$credentials['hostname'] = preg_replace('|\\w+://|', '', $credentials['hostname']); //Strip any schemes off\n+\t$credentials['hostname'] = preg_replace('|\\w+://|', '', (string) $credentials['hostname']); //Strip any schemes off\n \n \tif ( strpos($credentials['hostname'], ':') ) {\n-\t\tlist( $credentials['hostname'], $credentials['port'] ) = explode(':', $credentials['hostname'], 2);\n+\t\t[$credentials['hostname'], $credentials['port']] = explode(':', $credentials['hostname'], 2);\n \t\tif ( ! is_numeric($credentials['port']) )\n \t\t\tunset($credentials['port']);\n \t} else {\n@@ -1017,12 +1017,12 @@\n \t\tupdate_option('ftp_credentials', $stored_credentials);\n \t\treturn $credentials;\n \t}\n-\t$hostname = isset( $credentials['hostname'] ) ? $credentials['hostname'] : '';\n-\t$username = isset( $credentials['username'] ) ? $credentials['username'] : '';\n-\t$public_key = isset( $credentials['public_key'] ) ? $credentials['public_key'] : '';\n-\t$private_key = isset( $credentials['private_key'] ) ? $credentials['private_key'] : '';\n-\t$port = isset( $credentials['port'] ) ? $credentials['port'] : '';\n-\t$connection_type = isset( $credentials['connection_type'] ) ? $credentials['connection_type'] : '';\n+\t$hostname = $credentials['hostname'] ?? '';\n+\t$username = $credentials['username'] ?? '';\n+\t$public_key = $credentials['public_key'] ?? '';\n+\t$private_key = $credentials['private_key'] ?? '';\n+\t$port = $credentials['port'] ?? '';\n+\t$connection_type = $credentials['connection_type'] ?? '';\n \n \tif ( $error ) {\n \t\t$error_string = __('<strong>ERROR:</strong> There was an error connecting to the server, Please verify the settings are correct.');\n@@ -1031,7 +1031,7 @@\n \t\techo '<div id=\"message\" class=\"error\"><p>' . $error_string . '</p></div>';\n \t}\n \n-\t$types = array();\n+\t$types = [];\n \tif ( extension_loaded('ftp') || extension_loaded('sockets') || function_exists('fsockopen') )\n \t\t$types[ 'ftp' ] = __('FTP');\n \tif ( extension_loaded('ftp') ) //Only this supports FTPS\n",
        "applied_rectors": [
          "Rector\\Php54\\Rector\\Array_\\LongArrayToShortArrayRector",
          "Rector\\Php70\\Rector\\Ternary\\TernaryToNullCoalescingRector",
          "Rector\\Php71\\Rector\\List_\\ListToArrayDestructRector",
          "Rector\\Php73\\Rector\\FuncCall\\StringifyStrNeedlesRector",
          "Rector\\Php80\\Rector\\Identical\\StrEndsWithRector",
          "Rector\\Php80\\Rector\\Identical\\StrStartsWithRector",
          "Rector\\Php80\\Rector\\NotIdentical\\StrContainsRector",
          "Rector\\Php81\\Rector\\FuncCall\\NullToStrictStringFuncCallArgRector"
        ]
      }
    ],
    "changed_files": [
      "selected_100_files/extra_large_1000_plus/013_file.php"
    ]
  }
}