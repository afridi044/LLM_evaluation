{
  "file_path": "selected_100_files\\large_500_1000\\046_module.audio-video.flv.php",
  "rector_analysis": {
    "php_version_changes": 5,
    "rules_triggered": [
      "Rector\\Php54\\Rector\\Array_\\LongArrayToShortArrayRector",
      "Rector\\Php70\\Rector\\ClassMethod\\Php4ConstructorRector",
      "Rector\\Php70\\Rector\\Ternary\\TernaryToNullCoalescingRector",
      "Rector\\Php80\\Rector\\Class_\\ClassPropertyAssignToConstructorPromotionRector",
      "Rector\\Php81\\Rector\\FuncCall\\NullToStrictStringFuncCallArgRector"
    ],
    "changes_by_php_version": {
      "php_54": 1,
      "php_70": 2,
      "php_80": 1,
      "php_81": 1
    },
    "has_diff": true,
    "diff_line_count": 181
  },
  "analysis_metadata": {
    "rector_version": "2.1.0",
    "analysis_date": "2025-08-31T05:20:19.519207",
    "file_size_kb": 22.7,
    "analysis_type": "version_specific_only"
  },
  "raw_rector_output": {
    "totals": {
      "changed_files": 1,
      "errors": 0
    },
    "file_diffs": [
      {
        "file": "selected_100_files/large_500_1000/046_module.audio-video.flv.php",
        "diff": "--- Original\n+++ New\n@@ -106,7 +106,7 @@\n \t\t$found_meta  = false;\n \t\t$found_valid_meta_playtime = false;\n \t\t$tagParseCount = 0;\n-\t\t$info['flv']['framecount'] = array('total'=>0, 'audio'=>0, 'video'=>0);\n+\t\t$info['flv']['framecount'] = ['total'=>0, 'audio'=>0, 'video'=>0];\n \t\t$flv_framecount = &$info['flv']['framecount'];\n \t\twhile (((ftell($this->getid3->fp) + 16) < $info['avdataend']) && (($tagParseCount++ <= $this->max_frames) || !$found_valid_meta_playtime))  {\n \t\t\t$ThisTagHeader = fread($this->getid3->fp, 16);\n@@ -250,7 +250,7 @@\n \t\t\t\t\t\t$info['flv']['meta'][$eventName] = $reader->readData();\n \t\t\t\t\t\tunset($reader);\n \n-\t\t\t\t\t\t$copykeys = array('framerate'=>'frame_rate', 'width'=>'resolution_x', 'height'=>'resolution_y', 'audiodatarate'=>'bitrate', 'videodatarate'=>'bitrate');\n+\t\t\t\t\t\t$copykeys = ['framerate'=>'frame_rate', 'width'=>'resolution_x', 'height'=>'resolution_y', 'audiodatarate'=>'bitrate', 'videodatarate'=>'bitrate'];\n \t\t\t\t\t\tforeach ($copykeys as $sourcekey => $destkey) {\n \t\t\t\t\t\t\tif (isset($info['flv']['meta']['onMetaData'][$sourcekey])) {\n \t\t\t\t\t\t\t\tswitch ($sourcekey) {\n@@ -318,7 +318,7 @@\n \n \n \tpublic function FLVaudioFormat($id) {\n-\t\t$FLVaudioFormat = array(\n+\t\t$FLVaudioFormat = [\n \t\t\t0  => 'Linear PCM, platform endian',\n \t\t\t1  => 'ADPCM',\n \t\t\t2  => 'mp3',\n@@ -335,30 +335,30 @@\n \t\t\t13 => false, // unknown?\n \t\t\t14 => 'mp3 8kHz',\n \t\t\t15 => 'Device-specific sound',\n-\t\t);\n-\t\treturn (isset($FLVaudioFormat[$id]) ? $FLVaudioFormat[$id] : false);\n+\t\t];\n+\t\treturn ($FLVaudioFormat[$id] ?? false);\n \t}\n \n \tpublic function FLVaudioRate($id) {\n-\t\t$FLVaudioRate = array(\n+\t\t$FLVaudioRate = [\n \t\t\t0 =>  5500,\n \t\t\t1 => 11025,\n \t\t\t2 => 22050,\n \t\t\t3 => 44100,\n-\t\t);\n-\t\treturn (isset($FLVaudioRate[$id]) ? $FLVaudioRate[$id] : false);\n+\t\t];\n+\t\treturn ($FLVaudioRate[$id] ?? false);\n \t}\n \n \tpublic function FLVaudioBitDepth($id) {\n-\t\t$FLVaudioBitDepth = array(\n+\t\t$FLVaudioBitDepth = [\n \t\t\t0 =>  8,\n \t\t\t1 => 16,\n-\t\t);\n-\t\treturn (isset($FLVaudioBitDepth[$id]) ? $FLVaudioBitDepth[$id] : false);\n+\t\t];\n+\t\treturn ($FLVaudioBitDepth[$id] ?? false);\n \t}\n \n \tpublic function FLVvideoCodec($id) {\n-\t\t$FLVvideoCodec = array(\n+\t\t$FLVvideoCodec = [\n \t\t\tGETID3_FLV_VIDEO_H263         => 'Sorenson H.263',\n \t\t\tGETID3_FLV_VIDEO_SCREEN       => 'Screen video',\n \t\t\tGETID3_FLV_VIDEO_VP6FLV       => 'On2 VP6',\n@@ -365,8 +365,8 @@\n \t\t\tGETID3_FLV_VIDEO_VP6FLV_ALPHA => 'On2 VP6 with alpha channel',\n \t\t\tGETID3_FLV_VIDEO_SCREENV2     => 'Screen video v2',\n \t\t\tGETID3_FLV_VIDEO_H264         => 'Sorenson H.264',\n-\t\t);\n-\t\treturn (isset($FLVvideoCodec[$id]) ? $FLVvideoCodec[$id] : false);\n+\t\t];\n+\t\treturn ($FLVvideoCodec[$id] ?? false);\n \t}\n }\n \n@@ -374,13 +374,13 @@\n \tpublic $bytes;\n \tpublic $pos;\n \n-\tpublic function AMFStream(&$bytes) {\n+\tpublic function __construct(&$bytes) {\n \t\t$this->bytes =& $bytes;\n \t\t$this->pos = 0;\n \t}\n \n \tpublic function readByte() {\n-\t\treturn getid3_lib::BigEndian2Int(substr($this->bytes, $this->pos++, 1));\n+\t\treturn getid3_lib::BigEndian2Int(substr((string) $this->bytes, $this->pos++, 1));\n \t}\n \n \tpublic function readInt() {\n@@ -406,7 +406,7 @@\n \t}\n \n \tpublic function read($length) {\n-\t\t$val = substr($this->bytes, $this->pos, $length);\n+\t\t$val = substr((string) $this->bytes, $this->pos, $length);\n \t\t$this->pos += $length;\n \t\treturn $val;\n \t}\n@@ -457,7 +457,7 @@\n class AMFReader {\n \tpublic $stream;\n \n-\tpublic function AMFReader(&$stream) {\n+\tpublic function __construct(&$stream) {\n \t\t$this->stream =& $stream;\n \t}\n \n@@ -547,7 +547,7 @@\n \t\t// Get highest numerical index - ignored\n //\t\t$highestIndex = $this->stream->readLong();\n \n-\t\t$data = array();\n+\t\t$data = [];\n \n \t\twhile ($key = $this->stream->readUTF()) {\n \t\t\t$data[$key] = $this->readData();\n@@ -564,7 +564,7 @@\n \t\t// Get highest numerical index - ignored\n \t\t$highestIndex = $this->stream->readLong();\n \n-\t\t$data = array();\n+\t\t$data = [];\n \n \t\twhile ($key = $this->stream->readUTF()) {\n \t\t\tif (is_numeric($key)) {\n@@ -583,7 +583,7 @@\n \n \tpublic function readArray() {\n \t\t$length = $this->stream->readLong();\n-\t\t$data = array();\n+\t\t$data = [];\n \n \t\tfor ($i = 0; $i < $length; $i++) {\n \t\t\t$data[] = $this->readData();\n@@ -612,7 +612,6 @@\n }\n \n class AVCSequenceParameterSetReader {\n-\tpublic $sps;\n \tpublic $start = 0;\n \tpublic $currentBytes = 0;\n \tpublic $currentBits = 0;\n@@ -619,9 +618,9 @@\n \tpublic $width;\n \tpublic $height;\n \n-\tpublic function AVCSequenceParameterSetReader($sps) {\n-\t\t$this->sps = $sps;\n-\t}\n+\tpublic function __construct(public $sps)\n+    {\n+    }\n \n \tpublic function readData() {\n \t\t$this->skipBits(8);\n@@ -629,7 +628,7 @@\n \t\t$profile = $this->getBits(8);\t//\tread profile\n \t\t$this->skipBits(16);\n \t\t$this->expGolombUe();\t//\tread sps id\n-\t\tif (in_array($profile, array(H264_PROFILE_HIGH, H264_PROFILE_HIGH10, H264_PROFILE_HIGH422, H264_PROFILE_HIGH444, H264_PROFILE_HIGH444_PREDICTIVE))) {\n+\t\tif (in_array($profile, [H264_PROFILE_HIGH, H264_PROFILE_HIGH10, H264_PROFILE_HIGH422, H264_PROFILE_HIGH444, H264_PROFILE_HIGH444_PREDICTIVE])) {\n \t\t\tif ($this->expGolombUe() == 3) {\n \t\t\t\t$this->skipBits(1);\n \t\t\t}\n@@ -682,7 +681,7 @@\n \t}\n \n \tpublic function getBit() {\n-\t\t$result = (getid3_lib::BigEndian2Int(substr($this->sps, $this->currentBytes, 1)) >> (7 - $this->currentBits)) & 0x01;\n+\t\t$result = (getid3_lib::BigEndian2Int(substr((string) $this->sps, $this->currentBytes, 1)) >> (7 - $this->currentBits)) & 0x01;\n \t\t$this->skipBits(1);\n \t\treturn $result;\n \t}\n",
        "applied_rectors": [
          "Rector\\Php54\\Rector\\Array_\\LongArrayToShortArrayRector",
          "Rector\\Php70\\Rector\\ClassMethod\\Php4ConstructorRector",
          "Rector\\Php70\\Rector\\Ternary\\TernaryToNullCoalescingRector",
          "Rector\\Php80\\Rector\\Class_\\ClassPropertyAssignToConstructorPromotionRector",
          "Rector\\Php81\\Rector\\FuncCall\\NullToStrictStringFuncCallArgRector"
        ]
      }
    ],
    "changed_files": [
      "selected_100_files/large_500_1000/046_module.audio-video.flv.php"
    ]
  }
}