{
  "file_path": "selected_100_files\\extra_large_1000_plus\\012_module.audio-video.riff.php",
  "rector_analysis": {
    "php_version_changes": 9,
    "rules_triggered": [
      "Rector\\Php53\\Rector\\Ternary\\TernaryToElvisRector",
      "Rector\\Php54\\Rector\\Array_\\LongArrayToShortArrayRector",
      "Rector\\Php70\\Rector\\Ternary\\TernaryToNullCoalescingRector",
      "Rector\\Php71\\Rector\\List_\\ListToArrayDestructRector",
      "Rector\\Php73\\Rector\\ConstFetch\\SensitiveConstantNameRector",
      "Rector\\Php80\\Rector\\Identical\\StrEndsWithRector",
      "Rector\\Php80\\Rector\\Identical\\StrStartsWithRector",
      "Rector\\Php80\\Rector\\Switch_\\ChangeSwitchToMatchRector",
      "Rector\\Php81\\Rector\\FuncCall\\NullToStrictStringFuncCallArgRector"
    ],
    "changes_by_php_version": {
      "php_53": 1,
      "php_54": 1,
      "php_70": 1,
      "php_71": 1,
      "php_73": 1,
      "php_80": 3,
      "php_81": 1
    },
    "has_diff": true,
    "diff_line_count": 753
  },
  "analysis_metadata": {
    "rector_version": "2.1.0",
    "analysis_date": "2025-08-31T05:18:24.506274",
    "file_size_kb": 108.6,
    "analysis_type": "version_specific_only"
  },
  "raw_rector_output": {
    "totals": {
      "changed_files": 1,
      "errors": 0
    },
    "file_diffs": [
      {
        "file": "selected_100_files/extra_large_1000_plus/012_module.audio-video.riff.php",
        "diff": "--- Original\n+++ New\n@@ -34,7 +34,7 @@\n \n \t\t// initialize these values to an empty array, otherwise they default to NULL\n \t\t// and you can't append array values to a NULL value\n-\t\t$info['riff'] = array('raw'=>array());\n+\t\t$info['riff'] = ['raw'=>[]];\n \n \t\t// Shortcuts\n \t\t$thisfile_riff             = &$info['riff'];\n@@ -96,7 +96,7 @@\n \t\t\t\t\t}\n \t\t\t\t\t$nextRIFFheader = $this->fread(12);\n \t\t\t\t\tif ($nextRIFFoffset == ($info['avdataend'] - 1)) {\n-\t\t\t\t\t\tif (substr($nextRIFFheader, 0, 1) == \"\\x00\") {\n+\t\t\t\t\t\tif (str_starts_with($nextRIFFheader, \"\\x00\")) {\n \t\t\t\t\t\t\t// RIFF padded to WORD boundary, we're actually already at the end\n \t\t\t\t\t\t\tbreak;\n \t\t\t\t\t\t}\n@@ -104,7 +104,7 @@\n \t\t\t\t\t$nextRIFFheaderID =                         substr($nextRIFFheader, 0, 4);\n \t\t\t\t\t$nextRIFFsize     = $this->EitherEndian2Int(substr($nextRIFFheader, 4, 4));\n \t\t\t\t\t$nextRIFFtype     =                         substr($nextRIFFheader, 8, 4);\n-\t\t\t\t\t$chunkdata = array();\n+\t\t\t\t\t$chunkdata = [];\n \t\t\t\t\t$chunkdata['offset'] = $nextRIFFoffset + 8;\n \t\t\t\t\t$chunkdata['size']   = $nextRIFFsize;\n \t\t\t\t\t$nextRIFFoffset = $chunkdata['offset'] + $chunkdata['size'];\n@@ -115,7 +115,7 @@\n \t\t\t\t\t\t\t$chunkdata['chunks'] = $this->ParseRIFF($chunkdata['offset'] + 4, $nextRIFFoffset);\n \n \t\t\t\t\t\t\tif (!isset($thisfile_riff[$nextRIFFtype])) {\n-\t\t\t\t\t\t\t\t$thisfile_riff[$nextRIFFtype] = array();\n+\t\t\t\t\t\t\t\t$thisfile_riff[$nextRIFFtype] = [];\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t$thisfile_riff[$nextRIFFtype][] = $chunkdata;\n \t\t\t\t\t\t\tbreak;\n@@ -132,7 +132,7 @@\n \t\t\t\t\t\tdefault:\n \t\t\t\t\t\t\tif ($info['filesize'] == ($chunkdata['offset'] - 8 + 128)) {\n \t\t\t\t\t\t\t\t$DIVXTAG = $nextRIFFheader.$this->fread(128 - 12);\n-\t\t\t\t\t\t\t\tif (substr($DIVXTAG, -7) == 'DIVXTAG') {\n+\t\t\t\t\t\t\t\tif (str_ends_with($DIVXTAG, 'DIVXTAG')) {\n \t\t\t\t\t\t\t\t\t// DIVXTAG is supposed to be inside an IDVX chunk in a LIST chunk, but some bad encoders just slap it on the end of a file\n \t\t\t\t\t\t\t\t\t$this->warning('Found wrongly-structured DIVXTAG at offset '.($this->ftell() - 128).', parsing anyway');\n \t\t\t\t\t\t\t\t\t$info['divxtag']['comments'] = self::ParseDIVXTAG($DIVXTAG);\n@@ -183,7 +183,7 @@\n \t\t\t\t\t$thisfile_audio['streams'][$streamindex] = $thisfile_riff_audio[$streamindex];\n \n \t\t\t\t\t$thisfile_audio = getid3_lib::array_merge_noclobber($thisfile_audio, $thisfile_riff_audio[$streamindex]);\n-\t\t\t\t\tif (substr($thisfile_audio['codec'], 0, strlen('unknown: 0x')) == 'unknown: 0x') {\n+\t\t\t\t\tif (str_starts_with((string) $thisfile_audio['codec'], 'unknown: 0x')) {\n \t\t\t\t\t\t$info['warning'][] = 'Audio codec = '.$thisfile_audio['codec'];\n \t\t\t\t\t}\n \t\t\t\t\t$thisfile_audio['bitrate'] = $thisfile_riff_audio[$streamindex]['bitrate'];\n@@ -220,7 +220,7 @@\n \n \t\t\t\t\t// shortcuts\n \t\t\t\t\t$rgadData = &$thisfile_riff_WAVE['rgad'][0]['data'];\n-\t\t\t\t\t$thisfile_riff_raw['rgad']    = array('track'=>array(), 'album'=>array());\n+\t\t\t\t\t$thisfile_riff_raw['rgad']    = ['track'=>[], 'album'=>[]];\n \t\t\t\t\t$thisfile_riff_raw_rgad       = &$thisfile_riff_raw['rgad'];\n \t\t\t\t\t$thisfile_riff_raw_rgad_track = &$thisfile_riff_raw_rgad['track'];\n \t\t\t\t\t$thisfile_riff_raw_rgad_album = &$thisfile_riff_raw_rgad['album'];\n@@ -272,19 +272,19 @@\n \t\t\t\t\t// shortcut\n \t\t\t\t\t$thisfile_riff_WAVE_bext_0 = &$thisfile_riff_WAVE['bext'][0];\n \n-\t\t\t\t\t$thisfile_riff_WAVE_bext_0['title']          =                         trim(substr($thisfile_riff_WAVE_bext_0['data'],   0, 256));\n-\t\t\t\t\t$thisfile_riff_WAVE_bext_0['author']         =                         trim(substr($thisfile_riff_WAVE_bext_0['data'], 256,  32));\n-\t\t\t\t\t$thisfile_riff_WAVE_bext_0['reference']      =                         trim(substr($thisfile_riff_WAVE_bext_0['data'], 288,  32));\n-\t\t\t\t\t$thisfile_riff_WAVE_bext_0['origin_date']    =                              substr($thisfile_riff_WAVE_bext_0['data'], 320,  10);\n-\t\t\t\t\t$thisfile_riff_WAVE_bext_0['origin_time']    =                              substr($thisfile_riff_WAVE_bext_0['data'], 330,   8);\n-\t\t\t\t\t$thisfile_riff_WAVE_bext_0['time_reference'] = getid3_lib::LittleEndian2Int(substr($thisfile_riff_WAVE_bext_0['data'], 338,   8));\n-\t\t\t\t\t$thisfile_riff_WAVE_bext_0['bwf_version']    = getid3_lib::LittleEndian2Int(substr($thisfile_riff_WAVE_bext_0['data'], 346,   1));\n-\t\t\t\t\t$thisfile_riff_WAVE_bext_0['reserved']       =                              substr($thisfile_riff_WAVE_bext_0['data'], 347, 254);\n-\t\t\t\t\t$thisfile_riff_WAVE_bext_0['coding_history'] =         explode(\"\\r\\n\", trim(substr($thisfile_riff_WAVE_bext_0['data'], 601)));\n-\t\t\t\t\tif (preg_match('#^([0-9]{4}).([0-9]{2}).([0-9]{2})$#', $thisfile_riff_WAVE_bext_0['origin_date'], $matches_bext_date)) {\n-\t\t\t\t\t\tif (preg_match('#^([0-9]{2}).([0-9]{2}).([0-9]{2})$#', $thisfile_riff_WAVE_bext_0['origin_time'], $matches_bext_time)) {\n-\t\t\t\t\t\t\tlist($dummy, $bext_timestamp['year'], $bext_timestamp['month'],  $bext_timestamp['day'])    = $matches_bext_date;\n-\t\t\t\t\t\t\tlist($dummy, $bext_timestamp['hour'], $bext_timestamp['minute'], $bext_timestamp['second']) = $matches_bext_time;\n+\t\t\t\t\t$thisfile_riff_WAVE_bext_0['title']          =                         trim(substr((string) $thisfile_riff_WAVE_bext_0['data'],   0, 256));\n+\t\t\t\t\t$thisfile_riff_WAVE_bext_0['author']         =                         trim(substr((string) $thisfile_riff_WAVE_bext_0['data'], 256,  32));\n+\t\t\t\t\t$thisfile_riff_WAVE_bext_0['reference']      =                         trim(substr((string) $thisfile_riff_WAVE_bext_0['data'], 288,  32));\n+\t\t\t\t\t$thisfile_riff_WAVE_bext_0['origin_date']    =                              substr((string) $thisfile_riff_WAVE_bext_0['data'], 320,  10);\n+\t\t\t\t\t$thisfile_riff_WAVE_bext_0['origin_time']    =                              substr((string) $thisfile_riff_WAVE_bext_0['data'], 330,   8);\n+\t\t\t\t\t$thisfile_riff_WAVE_bext_0['time_reference'] = getid3_lib::LittleEndian2Int(substr((string) $thisfile_riff_WAVE_bext_0['data'], 338,   8));\n+\t\t\t\t\t$thisfile_riff_WAVE_bext_0['bwf_version']    = getid3_lib::LittleEndian2Int(substr((string) $thisfile_riff_WAVE_bext_0['data'], 346,   1));\n+\t\t\t\t\t$thisfile_riff_WAVE_bext_0['reserved']       =                              substr((string) $thisfile_riff_WAVE_bext_0['data'], 347, 254);\n+\t\t\t\t\t$thisfile_riff_WAVE_bext_0['coding_history'] =         explode(\"\\r\\n\", trim(substr((string) $thisfile_riff_WAVE_bext_0['data'], 601)));\n+\t\t\t\t\tif (preg_match('#^([0-9]{4}).([0-9]{2}).([0-9]{2})$#', (string) $thisfile_riff_WAVE_bext_0['origin_date'], $matches_bext_date)) {\n+\t\t\t\t\t\tif (preg_match('#^([0-9]{2}).([0-9]{2}).([0-9]{2})$#', (string) $thisfile_riff_WAVE_bext_0['origin_time'], $matches_bext_time)) {\n+\t\t\t\t\t\t\t[$dummy, $bext_timestamp['year'], $bext_timestamp['month'], $bext_timestamp['day']]    = $matches_bext_date;\n+\t\t\t\t\t\t\t[$dummy, $bext_timestamp['hour'], $bext_timestamp['minute'], $bext_timestamp['second']] = $matches_bext_time;\n \t\t\t\t\t\t\t$thisfile_riff_WAVE_bext_0['origin_date_unix'] = gmmktime($bext_timestamp['hour'], $bext_timestamp['minute'], $bext_timestamp['second'], $bext_timestamp['month'], $bext_timestamp['day'], $bext_timestamp['year']);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\t$info['warning'][] = 'RIFF.WAVE.BEXT.origin_time is invalid';\n@@ -300,7 +300,7 @@\n \t\t\t\t\t// shortcut\n \t\t\t\t\t$thisfile_riff_WAVE_MEXT_0 = &$thisfile_riff_WAVE['MEXT'][0];\n \n-\t\t\t\t\t$thisfile_riff_WAVE_MEXT_0['raw']['sound_information']      = getid3_lib::LittleEndian2Int(substr($thisfile_riff_WAVE_MEXT_0['data'], 0, 2));\n+\t\t\t\t\t$thisfile_riff_WAVE_MEXT_0['raw']['sound_information']      = getid3_lib::LittleEndian2Int(substr((string) $thisfile_riff_WAVE_MEXT_0['data'], 0, 2));\n \t\t\t\t\t$thisfile_riff_WAVE_MEXT_0['flags']['homogenous']           = (bool) ($thisfile_riff_WAVE_MEXT_0['raw']['sound_information'] & 0x0001);\n \t\t\t\t\tif ($thisfile_riff_WAVE_MEXT_0['flags']['homogenous']) {\n \t\t\t\t\t\t$thisfile_riff_WAVE_MEXT_0['flags']['padding']          = ($thisfile_riff_WAVE_MEXT_0['raw']['sound_information'] & 0x0002) ? false : true;\n@@ -307,10 +307,10 @@\n \t\t\t\t\t\t$thisfile_riff_WAVE_MEXT_0['flags']['22_or_44']         =        (bool) ($thisfile_riff_WAVE_MEXT_0['raw']['sound_information'] & 0x0004);\n \t\t\t\t\t\t$thisfile_riff_WAVE_MEXT_0['flags']['free_format']      =        (bool) ($thisfile_riff_WAVE_MEXT_0['raw']['sound_information'] & 0x0008);\n \n-\t\t\t\t\t\t$thisfile_riff_WAVE_MEXT_0['nominal_frame_size']        = getid3_lib::LittleEndian2Int(substr($thisfile_riff_WAVE_MEXT_0['data'], 2, 2));\n+\t\t\t\t\t\t$thisfile_riff_WAVE_MEXT_0['nominal_frame_size']        = getid3_lib::LittleEndian2Int(substr((string) $thisfile_riff_WAVE_MEXT_0['data'], 2, 2));\n \t\t\t\t\t}\n-\t\t\t\t\t$thisfile_riff_WAVE_MEXT_0['anciliary_data_length']         = getid3_lib::LittleEndian2Int(substr($thisfile_riff_WAVE_MEXT_0['data'], 6, 2));\n-\t\t\t\t\t$thisfile_riff_WAVE_MEXT_0['raw']['anciliary_data_def']     = getid3_lib::LittleEndian2Int(substr($thisfile_riff_WAVE_MEXT_0['data'], 8, 2));\n+\t\t\t\t\t$thisfile_riff_WAVE_MEXT_0['anciliary_data_length']         = getid3_lib::LittleEndian2Int(substr((string) $thisfile_riff_WAVE_MEXT_0['data'], 6, 2));\n+\t\t\t\t\t$thisfile_riff_WAVE_MEXT_0['raw']['anciliary_data_def']     = getid3_lib::LittleEndian2Int(substr((string) $thisfile_riff_WAVE_MEXT_0['data'], 8, 2));\n \t\t\t\t\t$thisfile_riff_WAVE_MEXT_0['flags']['anciliary_data_left']  = (bool) ($thisfile_riff_WAVE_MEXT_0['raw']['anciliary_data_def'] & 0x0001);\n \t\t\t\t\t$thisfile_riff_WAVE_MEXT_0['flags']['anciliary_data_free']  = (bool) ($thisfile_riff_WAVE_MEXT_0['raw']['anciliary_data_def'] & 0x0002);\n \t\t\t\t\t$thisfile_riff_WAVE_MEXT_0['flags']['anciliary_data_right'] = (bool) ($thisfile_riff_WAVE_MEXT_0['raw']['anciliary_data_def'] & 0x0004);\n@@ -320,28 +320,28 @@\n \t\t\t\t\t// shortcut\n \t\t\t\t\t$thisfile_riff_WAVE_cart_0 = &$thisfile_riff_WAVE['cart'][0];\n \n-\t\t\t\t\t$thisfile_riff_WAVE_cart_0['version']              =                              substr($thisfile_riff_WAVE_cart_0['data'],   0,  4);\n-\t\t\t\t\t$thisfile_riff_WAVE_cart_0['title']                =                         trim(substr($thisfile_riff_WAVE_cart_0['data'],   4, 64));\n-\t\t\t\t\t$thisfile_riff_WAVE_cart_0['artist']               =                         trim(substr($thisfile_riff_WAVE_cart_0['data'],  68, 64));\n-\t\t\t\t\t$thisfile_riff_WAVE_cart_0['cut_id']               =                         trim(substr($thisfile_riff_WAVE_cart_0['data'], 132, 64));\n-\t\t\t\t\t$thisfile_riff_WAVE_cart_0['client_id']            =                         trim(substr($thisfile_riff_WAVE_cart_0['data'], 196, 64));\n-\t\t\t\t\t$thisfile_riff_WAVE_cart_0['category']             =                         trim(substr($thisfile_riff_WAVE_cart_0['data'], 260, 64));\n-\t\t\t\t\t$thisfile_riff_WAVE_cart_0['classification']       =                         trim(substr($thisfile_riff_WAVE_cart_0['data'], 324, 64));\n-\t\t\t\t\t$thisfile_riff_WAVE_cart_0['out_cue']              =                         trim(substr($thisfile_riff_WAVE_cart_0['data'], 388, 64));\n-\t\t\t\t\t$thisfile_riff_WAVE_cart_0['start_date']           =                         trim(substr($thisfile_riff_WAVE_cart_0['data'], 452, 10));\n-\t\t\t\t\t$thisfile_riff_WAVE_cart_0['start_time']           =                         trim(substr($thisfile_riff_WAVE_cart_0['data'], 462,  8));\n-\t\t\t\t\t$thisfile_riff_WAVE_cart_0['end_date']             =                         trim(substr($thisfile_riff_WAVE_cart_0['data'], 470, 10));\n-\t\t\t\t\t$thisfile_riff_WAVE_cart_0['end_time']             =                         trim(substr($thisfile_riff_WAVE_cart_0['data'], 480,  8));\n-\t\t\t\t\t$thisfile_riff_WAVE_cart_0['producer_app_id']      =                         trim(substr($thisfile_riff_WAVE_cart_0['data'], 488, 64));\n-\t\t\t\t\t$thisfile_riff_WAVE_cart_0['producer_app_version'] =                         trim(substr($thisfile_riff_WAVE_cart_0['data'], 552, 64));\n-\t\t\t\t\t$thisfile_riff_WAVE_cart_0['user_defined_text']    =                         trim(substr($thisfile_riff_WAVE_cart_0['data'], 616, 64));\n-\t\t\t\t\t$thisfile_riff_WAVE_cart_0['zero_db_reference']    = getid3_lib::LittleEndian2Int(substr($thisfile_riff_WAVE_cart_0['data'], 680,  4), true);\n+\t\t\t\t\t$thisfile_riff_WAVE_cart_0['version']              =                              substr((string) $thisfile_riff_WAVE_cart_0['data'],   0,  4);\n+\t\t\t\t\t$thisfile_riff_WAVE_cart_0['title']                =                         trim(substr((string) $thisfile_riff_WAVE_cart_0['data'],   4, 64));\n+\t\t\t\t\t$thisfile_riff_WAVE_cart_0['artist']               =                         trim(substr((string) $thisfile_riff_WAVE_cart_0['data'],  68, 64));\n+\t\t\t\t\t$thisfile_riff_WAVE_cart_0['cut_id']               =                         trim(substr((string) $thisfile_riff_WAVE_cart_0['data'], 132, 64));\n+\t\t\t\t\t$thisfile_riff_WAVE_cart_0['client_id']            =                         trim(substr((string) $thisfile_riff_WAVE_cart_0['data'], 196, 64));\n+\t\t\t\t\t$thisfile_riff_WAVE_cart_0['category']             =                         trim(substr((string) $thisfile_riff_WAVE_cart_0['data'], 260, 64));\n+\t\t\t\t\t$thisfile_riff_WAVE_cart_0['classification']       =                         trim(substr((string) $thisfile_riff_WAVE_cart_0['data'], 324, 64));\n+\t\t\t\t\t$thisfile_riff_WAVE_cart_0['out_cue']              =                         trim(substr((string) $thisfile_riff_WAVE_cart_0['data'], 388, 64));\n+\t\t\t\t\t$thisfile_riff_WAVE_cart_0['start_date']           =                         trim(substr((string) $thisfile_riff_WAVE_cart_0['data'], 452, 10));\n+\t\t\t\t\t$thisfile_riff_WAVE_cart_0['start_time']           =                         trim(substr((string) $thisfile_riff_WAVE_cart_0['data'], 462,  8));\n+\t\t\t\t\t$thisfile_riff_WAVE_cart_0['end_date']             =                         trim(substr((string) $thisfile_riff_WAVE_cart_0['data'], 470, 10));\n+\t\t\t\t\t$thisfile_riff_WAVE_cart_0['end_time']             =                         trim(substr((string) $thisfile_riff_WAVE_cart_0['data'], 480,  8));\n+\t\t\t\t\t$thisfile_riff_WAVE_cart_0['producer_app_id']      =                         trim(substr((string) $thisfile_riff_WAVE_cart_0['data'], 488, 64));\n+\t\t\t\t\t$thisfile_riff_WAVE_cart_0['producer_app_version'] =                         trim(substr((string) $thisfile_riff_WAVE_cart_0['data'], 552, 64));\n+\t\t\t\t\t$thisfile_riff_WAVE_cart_0['user_defined_text']    =                         trim(substr((string) $thisfile_riff_WAVE_cart_0['data'], 616, 64));\n+\t\t\t\t\t$thisfile_riff_WAVE_cart_0['zero_db_reference']    = getid3_lib::LittleEndian2Int(substr((string) $thisfile_riff_WAVE_cart_0['data'], 680,  4), true);\n \t\t\t\t\tfor ($i = 0; $i < 8; $i++) {\n-\t\t\t\t\t\t$thisfile_riff_WAVE_cart_0['post_time'][$i]['usage_fourcc'] =                  substr($thisfile_riff_WAVE_cart_0['data'], 684 + ($i * 8), 4);\n-\t\t\t\t\t\t$thisfile_riff_WAVE_cart_0['post_time'][$i]['timer_value']  = getid3_lib::LittleEndian2Int(substr($thisfile_riff_WAVE_cart_0['data'], 684 + ($i * 8) + 4, 4));\n+\t\t\t\t\t\t$thisfile_riff_WAVE_cart_0['post_time'][$i]['usage_fourcc'] =                  substr((string) $thisfile_riff_WAVE_cart_0['data'], 684 + ($i * 8), 4);\n+\t\t\t\t\t\t$thisfile_riff_WAVE_cart_0['post_time'][$i]['timer_value']  = getid3_lib::LittleEndian2Int(substr((string) $thisfile_riff_WAVE_cart_0['data'], 684 + ($i * 8) + 4, 4));\n \t\t\t\t\t}\n-\t\t\t\t\t$thisfile_riff_WAVE_cart_0['url']              =                 trim(substr($thisfile_riff_WAVE_cart_0['data'],  748, 1024));\n-\t\t\t\t\t$thisfile_riff_WAVE_cart_0['tag_text']         = explode(\"\\r\\n\", trim(substr($thisfile_riff_WAVE_cart_0['data'], 1772)));\n+\t\t\t\t\t$thisfile_riff_WAVE_cart_0['url']              =                 trim(substr((string) $thisfile_riff_WAVE_cart_0['data'],  748, 1024));\n+\t\t\t\t\t$thisfile_riff_WAVE_cart_0['tag_text']         = explode(\"\\r\\n\", trim(substr((string) $thisfile_riff_WAVE_cart_0['data'], 1772)));\n \n \t\t\t\t\t$thisfile_riff['comments']['artist'][] = $thisfile_riff_WAVE_cart_0['artist'];\n \t\t\t\t\t$thisfile_riff['comments']['title'][]  = $thisfile_riff_WAVE_cart_0['title'];\n@@ -358,15 +358,15 @@\n \n \t\t\t\t\twhile ($SNDM_startoffset < $SNDM_endoffset) {\n \t\t\t\t\t\t$SNDM_thisTagOffset = 0;\n-\t\t\t\t\t\t$SNDM_thisTagSize      = getid3_lib::BigEndian2Int(substr($thisfile_riff_WAVE_SNDM_0_data, $SNDM_startoffset + $SNDM_thisTagOffset, 4));\n+\t\t\t\t\t\t$SNDM_thisTagSize      = getid3_lib::BigEndian2Int(substr((string) $thisfile_riff_WAVE_SNDM_0_data, $SNDM_startoffset + $SNDM_thisTagOffset, 4));\n \t\t\t\t\t\t$SNDM_thisTagOffset += 4;\n-\t\t\t\t\t\t$SNDM_thisTagKey       =                           substr($thisfile_riff_WAVE_SNDM_0_data, $SNDM_startoffset + $SNDM_thisTagOffset, 4);\n+\t\t\t\t\t\t$SNDM_thisTagKey       =                           substr((string) $thisfile_riff_WAVE_SNDM_0_data, $SNDM_startoffset + $SNDM_thisTagOffset, 4);\n \t\t\t\t\t\t$SNDM_thisTagOffset += 4;\n-\t\t\t\t\t\t$SNDM_thisTagDataSize  = getid3_lib::BigEndian2Int(substr($thisfile_riff_WAVE_SNDM_0_data, $SNDM_startoffset + $SNDM_thisTagOffset, 2));\n+\t\t\t\t\t\t$SNDM_thisTagDataSize  = getid3_lib::BigEndian2Int(substr((string) $thisfile_riff_WAVE_SNDM_0_data, $SNDM_startoffset + $SNDM_thisTagOffset, 2));\n \t\t\t\t\t\t$SNDM_thisTagOffset += 2;\n-\t\t\t\t\t\t$SNDM_thisTagDataFlags = getid3_lib::BigEndian2Int(substr($thisfile_riff_WAVE_SNDM_0_data, $SNDM_startoffset + $SNDM_thisTagOffset, 2));\n+\t\t\t\t\t\t$SNDM_thisTagDataFlags = getid3_lib::BigEndian2Int(substr((string) $thisfile_riff_WAVE_SNDM_0_data, $SNDM_startoffset + $SNDM_thisTagOffset, 2));\n \t\t\t\t\t\t$SNDM_thisTagOffset += 2;\n-\t\t\t\t\t\t$SNDM_thisTagDataText =                            substr($thisfile_riff_WAVE_SNDM_0_data, $SNDM_startoffset + $SNDM_thisTagOffset, $SNDM_thisTagDataSize);\n+\t\t\t\t\t\t$SNDM_thisTagDataText =                            substr((string) $thisfile_riff_WAVE_SNDM_0_data, $SNDM_startoffset + $SNDM_thisTagOffset, $SNDM_thisTagDataSize);\n \t\t\t\t\t\t$SNDM_thisTagOffset += $SNDM_thisTagDataSize;\n \n \t\t\t\t\t\tif ($SNDM_thisTagSize != (4 + 4 + 2 + 2 + $SNDM_thisTagDataSize)) {\n@@ -386,12 +386,12 @@\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \n-\t\t\t\t\t$tagmapping = array(\n+\t\t\t\t\t$tagmapping = [\n \t\t\t\t\t\t'tracktitle'=>'title',\n \t\t\t\t\t\t'category'  =>'genre',\n \t\t\t\t\t\t'cdtitle'   =>'album',\n \t\t\t\t\t\t'tracktitle'=>'title',\n-\t\t\t\t\t);\n+\t\t\t\t\t];\n \t\t\t\t\tforeach ($tagmapping as $fromkey => $tokey) {\n \t\t\t\t\t\tif (isset($thisfile_riff_WAVE_SNDM_0['parsed'][$fromkey])) {\n \t\t\t\t\t\t\t$thisfile_riff['comments'][$tokey][] = $thisfile_riff_WAVE_SNDM_0['parsed'][$fromkey];\n@@ -404,12 +404,12 @@\n \t\t\t\t\tif ($parsedXML = getid3_lib::XML2array($thisfile_riff_WAVE['iXML'][0]['data'])) {\n \t\t\t\t\t\t$thisfile_riff_WAVE['iXML'][0]['parsed'] = $parsedXML;\n \t\t\t\t\t\tif (isset($parsedXML['SPEED']['MASTER_SPEED'])) {\n-\t\t\t\t\t\t\t@list($numerator, $denominator) = explode('/', $parsedXML['SPEED']['MASTER_SPEED']);\n-\t\t\t\t\t\t\t$thisfile_riff_WAVE['iXML'][0]['master_speed'] = $numerator / ($denominator ? $denominator : 1000);\n+\t\t\t\t\t\t\t@[$numerator, $denominator] = explode('/', $parsedXML['SPEED']['MASTER_SPEED']);\n+\t\t\t\t\t\t\t$thisfile_riff_WAVE['iXML'][0]['master_speed'] = $numerator / ($denominator ?: 1000);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tif (isset($parsedXML['SPEED']['TIMECODE_RATE'])) {\n-\t\t\t\t\t\t\t@list($numerator, $denominator) = explode('/', $parsedXML['SPEED']['TIMECODE_RATE']);\n-\t\t\t\t\t\t\t$thisfile_riff_WAVE['iXML'][0]['timecode_rate'] = $numerator / ($denominator ? $denominator : 1000);\n+\t\t\t\t\t\t\t@[$numerator, $denominator] = explode('/', $parsedXML['SPEED']['TIMECODE_RATE']);\n+\t\t\t\t\t\t\t$thisfile_riff_WAVE['iXML'][0]['timecode_rate'] = $numerator / ($denominator ?: 1000);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tif (isset($parsedXML['SPEED']['TIMESTAMP_SAMPLES_SINCE_MIDNIGHT_LO']) && !empty($parsedXML['SPEED']['TIMESTAMP_SAMPLE_RATE']) && !empty($thisfile_riff_WAVE['iXML'][0]['timecode_rate'])) {\n \t\t\t\t\t\t\t$samples_since_midnight = floatval(ltrim($parsedXML['SPEED']['TIMESTAMP_SAMPLES_SINCE_MIDNIGHT_HI'].$parsedXML['SPEED']['TIMESTAMP_SAMPLES_SINCE_MIDNIGHT_LO'], '0'));\n@@ -502,11 +502,11 @@\n \t\t\t\t\t\t\t// }SLwFormat, *PSLwFormat;\n \n \t\t\t\t\t\t\t// shortcut\n-\t\t\t\t\t\t\t$thisfile_riff['litewave']['raw'] = array();\n+\t\t\t\t\t\t\t$thisfile_riff['litewave']['raw'] = [];\n \t\t\t\t\t\t\t$riff_litewave     = &$thisfile_riff['litewave'];\n \t\t\t\t\t\t\t$riff_litewave_raw = &$riff_litewave['raw'];\n \n-\t\t\t\t\t\t\t$flags = array(\n+\t\t\t\t\t\t\t$flags = [\n \t\t\t\t\t\t\t\t'compression_method' => 1,\n \t\t\t\t\t\t\t\t'compression_flags'  => 1,\n \t\t\t\t\t\t\t\t'm_dwScale'          => 4,\n@@ -517,10 +517,10 @@\n \t\t\t\t\t\t\t\t'm_dwOrgSize'        => 4,\n \t\t\t\t\t\t\t\t'm_bFactExists'      => 2,\n \t\t\t\t\t\t\t\t'm_dwRiffChunkSize'  => 4,\n-\t\t\t\t\t\t\t);\n+\t\t\t\t\t\t\t];\n \t\t\t\t\t\t\t$litewave_offset = 18;\n \t\t\t\t\t\t\tforeach ($flags as $flag => $length) {\n-\t\t\t\t\t\t\t\t$riff_litewave_raw[$flag] = getid3_lib::LittleEndian2Int(substr($thisfile_riff_WAVE['fmt '][0]['data'], $litewave_offset, $length));\n+\t\t\t\t\t\t\t\t$riff_litewave_raw[$flag] = getid3_lib::LittleEndian2Int(substr((string) $thisfile_riff_WAVE['fmt '][0]['data'], $litewave_offset, $length));\n \t\t\t\t\t\t\t\t$litewave_offset += $length;\n \t\t\t\t\t\t\t}\n \n@@ -620,12 +620,12 @@\n \t\t\t\t\tforeach ($thisfile_riff['AVI ']['hdrl']['strl']['indx'] as $streamnumber => $steamdataarray) {\n \t\t\t\t\t\t$ahsisd = &$thisfile_riff['AVI ']['hdrl']['strl']['indx'][$streamnumber]['data'];\n \n-\t\t\t\t\t\t$thisfile_riff_raw['indx'][$streamnumber]['wLongsPerEntry'] = $this->EitherEndian2Int(substr($ahsisd,  0, 2));\n-\t\t\t\t\t\t$thisfile_riff_raw['indx'][$streamnumber]['bIndexSubType']  = $this->EitherEndian2Int(substr($ahsisd,  2, 1));\n-\t\t\t\t\t\t$thisfile_riff_raw['indx'][$streamnumber]['bIndexType']     = $this->EitherEndian2Int(substr($ahsisd,  3, 1));\n-\t\t\t\t\t\t$thisfile_riff_raw['indx'][$streamnumber]['nEntriesInUse']  = $this->EitherEndian2Int(substr($ahsisd,  4, 4));\n-\t\t\t\t\t\t$thisfile_riff_raw['indx'][$streamnumber]['dwChunkId']      =                         substr($ahsisd,  8, 4);\n-\t\t\t\t\t\t$thisfile_riff_raw['indx'][$streamnumber]['dwReserved']     = $this->EitherEndian2Int(substr($ahsisd, 12, 4));\n+\t\t\t\t\t\t$thisfile_riff_raw['indx'][$streamnumber]['wLongsPerEntry'] = $this->EitherEndian2Int(substr((string) $ahsisd,  0, 2));\n+\t\t\t\t\t\t$thisfile_riff_raw['indx'][$streamnumber]['bIndexSubType']  = $this->EitherEndian2Int(substr((string) $ahsisd,  2, 1));\n+\t\t\t\t\t\t$thisfile_riff_raw['indx'][$streamnumber]['bIndexType']     = $this->EitherEndian2Int(substr((string) $ahsisd,  3, 1));\n+\t\t\t\t\t\t$thisfile_riff_raw['indx'][$streamnumber]['nEntriesInUse']  = $this->EitherEndian2Int(substr((string) $ahsisd,  4, 4));\n+\t\t\t\t\t\t$thisfile_riff_raw['indx'][$streamnumber]['dwChunkId']      =                         substr((string) $ahsisd,  8, 4);\n+\t\t\t\t\t\t$thisfile_riff_raw['indx'][$streamnumber]['dwReserved']     = $this->EitherEndian2Int(substr((string) $ahsisd, 12, 4));\n \n \t\t\t\t\t\t//$thisfile_riff_raw['indx'][$streamnumber]['bIndexType_name']    =    $bIndexType[$thisfile_riff_raw['indx'][$streamnumber]['bIndexType']];\n \t\t\t\t\t\t//$thisfile_riff_raw['indx'][$streamnumber]['bIndexSubType_name'] = $bIndexSubtype[$thisfile_riff_raw['indx'][$streamnumber]['bIndexType']][$thisfile_riff_raw['indx'][$streamnumber]['bIndexSubType']];\n@@ -637,7 +637,7 @@\n \t\t\t\t\t$avihData = $thisfile_riff['AVI ']['hdrl']['avih'][$streamindex]['data'];\n \n \t\t\t\t\t// shortcut\n-\t\t\t\t\t$thisfile_riff_raw['avih'] = array();\n+\t\t\t\t\t$thisfile_riff_raw['avih'] = [];\n \t\t\t\t\t$thisfile_riff_raw_avih = &$thisfile_riff_raw['avih'];\n \n \t\t\t\t\t$thisfile_riff_raw_avih['dwMicroSecPerFrame']    = $this->EitherEndian2Int(substr($avihData,  0, 4)); // frame display rate (or 0L)\n@@ -646,7 +646,7 @@\n \t\t\t\t\t\treturn false;\n \t\t\t\t\t}\n \n-\t\t\t\t\t$flags = array(\n+\t\t\t\t\t$flags = [\n \t\t\t\t\t\t'dwMaxBytesPerSec',       // max. transfer rate\n \t\t\t\t\t\t'dwPaddingGranularity',   // pad to multiples of this size; normally 2K.\n \t\t\t\t\t\t'dwFlags',                // the ever-present flags\n@@ -660,7 +660,7 @@\n \t\t\t\t\t\t'dwRate',                 //\n \t\t\t\t\t\t'dwStart',                //\n \t\t\t\t\t\t'dwLength',               //\n-\t\t\t\t\t);\n+\t\t\t\t\t];\n \t\t\t\t\t$avih_offset = 4;\n \t\t\t\t\tforeach ($flags as $flag) {\n \t\t\t\t\t\t$thisfile_riff_raw_avih[$flag] = $this->EitherEndian2Int(substr($avihData, $avih_offset, 4));\n@@ -667,7 +667,7 @@\n \t\t\t\t\t\t$avih_offset += 4;\n \t\t\t\t\t}\n \n-\t\t\t\t\t$flags = array(\n+\t\t\t\t\t$flags = [\n \t\t\t\t\t\t'hasindex'     => 0x00000010,\n \t\t\t\t\t\t'mustuseindex' => 0x00000020,\n \t\t\t\t\t\t'interleaved'  => 0x00000100,\n@@ -674,13 +674,13 @@\n \t\t\t\t\t\t'trustcktype'  => 0x00000800,\n \t\t\t\t\t\t'capturedfile' => 0x00010000,\n \t\t\t\t\t\t'copyrighted'  => 0x00020010,\n-\t\t\t\t\t);\n+\t\t\t\t\t];\n                     foreach ($flags as $flag => $value) {\n \t\t\t\t\t\t$thisfile_riff_raw_avih['flags'][$flag] = (bool) ($thisfile_riff_raw_avih['dwFlags'] & $value);\n \t\t\t\t\t}\n \n \t\t\t\t\t// shortcut\n-\t\t\t\t\t$thisfile_riff_video[$streamindex] = array();\n+\t\t\t\t\t$thisfile_riff_video[$streamindex] = [];\n \t\t\t\t\t$thisfile_riff_video_current = &$thisfile_riff_video[$streamindex];\n \n \t\t\t\t\tif ($thisfile_riff_raw_avih['dwWidth'] > 0) {\n@@ -785,7 +785,7 @@\n \t\t\t\t\t\t\t\t\t\tcase 'iavs':\n \t\t\t\t\t\t\t\t\t\tcase 'vids':\n \t\t\t\t\t\t\t\t\t\t\t// shortcut\n-\t\t\t\t\t\t\t\t\t\t\t$thisfile_riff_raw['strh'][$i]                  = array();\n+\t\t\t\t\t\t\t\t\t\t\t$thisfile_riff_raw['strh'][$i]                  = [];\n \t\t\t\t\t\t\t\t\t\t\t$thisfile_riff_raw_strh_current                 = &$thisfile_riff_raw['strh'][$i];\n \n \t\t\t\t\t\t\t\t\t\t\t$thisfile_riff_raw_strh_current['fccType']               =                         substr($strhData,  0, 4);  // same as $strhfccType;\n@@ -811,18 +811,12 @@\n \t\t\t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t\t\t\t$thisfile_video['codec']              = $thisfile_riff_video_current['codec'];\n \t\t\t\t\t\t\t\t\t\t\t$thisfile_video['pixel_aspect_ratio'] = (float) 1;\n-\t\t\t\t\t\t\t\t\t\t\tswitch ($thisfile_riff_raw_strh_current['fccHandler']) {\n-\t\t\t\t\t\t\t\t\t\t\t\tcase 'HFYU': // Huffman Lossless Codec\n-\t\t\t\t\t\t\t\t\t\t\t\tcase 'IRAW': // Intel YUV Uncompressed\n-\t\t\t\t\t\t\t\t\t\t\t\tcase 'YUY2': // Uncompressed YUV 4:2:2\n-\t\t\t\t\t\t\t\t\t\t\t\t\t$thisfile_video['lossless'] = true;\n-\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t\t\t\t$thisfile_video['lossless'] = match ($thisfile_riff_raw_strh_current['fccHandler']) {\n+                                                // Uncompressed YUV 4:2:2\n+                                                'HFYU', 'IRAW', 'YUY2' => true,\n+                                                default => false,\n+                                            };\n \n-\t\t\t\t\t\t\t\t\t\t\t\tdefault:\n-\t\t\t\t\t\t\t\t\t\t\t\t\t$thisfile_video['lossless'] = false;\n-\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\t\t\t\t}\n-\n \t\t\t\t\t\t\t\t\t\t\tswitch ($strhfccType) {\n \t\t\t\t\t\t\t\t\t\t\t\tcase 'vids':\n \t\t\t\t\t\t\t\t\t\t\t\t\t$thisfile_riff_raw_strf_strhfccType_streamindex = self::ParseBITMAPINFOHEADER(substr($strfData, 0, 40), ($info['fileformat'] == 'riff'));\n@@ -855,20 +849,12 @@\n \t\t\t\t\t\t\t\t\t$thisfile_video['codec']              = $thisfile_riff_video_current['codec'];\n \t\t\t\t\t\t\t\t}\n \n-\t\t\t\t\t\t\t\tswitch ($thisfile_riff_raw_strf_strhfccType_streamindex['fourcc']) {\n-\t\t\t\t\t\t\t\t\tcase 'HFYU': // Huffman Lossless Codec\n-\t\t\t\t\t\t\t\t\tcase 'IRAW': // Intel YUV Uncompressed\n-\t\t\t\t\t\t\t\t\tcase 'YUY2': // Uncompressed YUV 4:2:2\n-\t\t\t\t\t\t\t\t\t\t$thisfile_video['lossless']        = true;\n-\t\t\t\t\t\t\t\t\t\t//$thisfile_video['bits_per_sample'] = 24;\n-\t\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t$thisfile_video['lossless'] = match ($thisfile_riff_raw_strf_strhfccType_streamindex['fourcc']) {\n+                                    // Uncompressed YUV 4:2:2\n+                                    'HFYU', 'IRAW', 'YUY2' => true,\n+                                    default => false,\n+                                };\n \n-\t\t\t\t\t\t\t\t\tdefault:\n-\t\t\t\t\t\t\t\t\t\t$thisfile_video['lossless']        = false;\n-\t\t\t\t\t\t\t\t\t\t//$thisfile_video['bits_per_sample'] = 24;\n-\t\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\t}\n-\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n@@ -887,13 +873,13 @@\n \t\t\t\t\t// shortcut\n \t\t\t\t\t$thisfile_riff_CDDA_fmt_0 = &$thisfile_riff['CDDA']['fmt '][0];\n \n-\t\t\t\t\t$thisfile_riff_CDDA_fmt_0['unknown1']           = $this->EitherEndian2Int(substr($thisfile_riff_CDDA_fmt_0['data'],  0, 2));\n-\t\t\t\t\t$thisfile_riff_CDDA_fmt_0['track_num']          = $this->EitherEndian2Int(substr($thisfile_riff_CDDA_fmt_0['data'],  2, 2));\n-\t\t\t\t\t$thisfile_riff_CDDA_fmt_0['disc_id']            = $this->EitherEndian2Int(substr($thisfile_riff_CDDA_fmt_0['data'],  4, 4));\n-\t\t\t\t\t$thisfile_riff_CDDA_fmt_0['start_offset_frame'] = $this->EitherEndian2Int(substr($thisfile_riff_CDDA_fmt_0['data'],  8, 4));\n-\t\t\t\t\t$thisfile_riff_CDDA_fmt_0['playtime_frames']    = $this->EitherEndian2Int(substr($thisfile_riff_CDDA_fmt_0['data'], 12, 4));\n-\t\t\t\t\t$thisfile_riff_CDDA_fmt_0['unknown6']           = $this->EitherEndian2Int(substr($thisfile_riff_CDDA_fmt_0['data'], 16, 4));\n-\t\t\t\t\t$thisfile_riff_CDDA_fmt_0['unknown7']           = $this->EitherEndian2Int(substr($thisfile_riff_CDDA_fmt_0['data'], 20, 4));\n+\t\t\t\t\t$thisfile_riff_CDDA_fmt_0['unknown1']           = $this->EitherEndian2Int(substr((string) $thisfile_riff_CDDA_fmt_0['data'],  0, 2));\n+\t\t\t\t\t$thisfile_riff_CDDA_fmt_0['track_num']          = $this->EitherEndian2Int(substr((string) $thisfile_riff_CDDA_fmt_0['data'],  2, 2));\n+\t\t\t\t\t$thisfile_riff_CDDA_fmt_0['disc_id']            = $this->EitherEndian2Int(substr((string) $thisfile_riff_CDDA_fmt_0['data'],  4, 4));\n+\t\t\t\t\t$thisfile_riff_CDDA_fmt_0['start_offset_frame'] = $this->EitherEndian2Int(substr((string) $thisfile_riff_CDDA_fmt_0['data'],  8, 4));\n+\t\t\t\t\t$thisfile_riff_CDDA_fmt_0['playtime_frames']    = $this->EitherEndian2Int(substr((string) $thisfile_riff_CDDA_fmt_0['data'], 12, 4));\n+\t\t\t\t\t$thisfile_riff_CDDA_fmt_0['unknown6']           = $this->EitherEndian2Int(substr((string) $thisfile_riff_CDDA_fmt_0['data'], 16, 4));\n+\t\t\t\t\t$thisfile_riff_CDDA_fmt_0['unknown7']           = $this->EitherEndian2Int(substr((string) $thisfile_riff_CDDA_fmt_0['data'], 20, 4));\n \n \t\t\t\t\t$thisfile_riff_CDDA_fmt_0['start_offset_seconds'] = (float) $thisfile_riff_CDDA_fmt_0['start_offset_frame'] / 75;\n \t\t\t\t\t$thisfile_riff_CDDA_fmt_0['playtime_seconds']     = (float) $thisfile_riff_CDDA_fmt_0['playtime_frames'] / 75;\n@@ -990,16 +976,16 @@\n \n \t\t\t\tif (isset($thisfile_riff[$RIFFsubtype]['COMT'])) {\n \t\t\t\t\t$offset = 0;\n-\t\t\t\t\t$CommentCount                                   = getid3_lib::BigEndian2Int(substr($thisfile_riff[$RIFFsubtype]['COMT'][0]['data'], $offset, 2), false);\n+\t\t\t\t\t$CommentCount                                   = getid3_lib::BigEndian2Int(substr((string) $thisfile_riff[$RIFFsubtype]['COMT'][0]['data'], $offset, 2), false);\n \t\t\t\t\t$offset += 2;\n \t\t\t\t\tfor ($i = 0; $i < $CommentCount; $i++) {\n-\t\t\t\t\t\t$info['comments_raw'][$i]['timestamp']      = getid3_lib::BigEndian2Int(substr($thisfile_riff[$RIFFsubtype]['COMT'][0]['data'], $offset, 4), false);\n+\t\t\t\t\t\t$info['comments_raw'][$i]['timestamp']      = getid3_lib::BigEndian2Int(substr((string) $thisfile_riff[$RIFFsubtype]['COMT'][0]['data'], $offset, 4), false);\n \t\t\t\t\t\t$offset += 4;\n-\t\t\t\t\t\t$info['comments_raw'][$i]['marker_id']      = getid3_lib::BigEndian2Int(substr($thisfile_riff[$RIFFsubtype]['COMT'][0]['data'], $offset, 2), true);\n+\t\t\t\t\t\t$info['comments_raw'][$i]['marker_id']      = getid3_lib::BigEndian2Int(substr((string) $thisfile_riff[$RIFFsubtype]['COMT'][0]['data'], $offset, 2), true);\n \t\t\t\t\t\t$offset += 2;\n-\t\t\t\t\t\t$CommentLength                              = getid3_lib::BigEndian2Int(substr($thisfile_riff[$RIFFsubtype]['COMT'][0]['data'], $offset, 2), false);\n+\t\t\t\t\t\t$CommentLength                              = getid3_lib::BigEndian2Int(substr((string) $thisfile_riff[$RIFFsubtype]['COMT'][0]['data'], $offset, 2), false);\n \t\t\t\t\t\t$offset += 2;\n-\t\t\t\t\t\t$info['comments_raw'][$i]['comment']        =                           substr($thisfile_riff[$RIFFsubtype]['COMT'][0]['data'], $offset, $CommentLength);\n+\t\t\t\t\t\t$info['comments_raw'][$i]['comment']        =                           substr((string) $thisfile_riff[$RIFFsubtype]['COMT'][0]['data'], $offset, $CommentLength);\n \t\t\t\t\t\t$offset += $CommentLength;\n \n \t\t\t\t\t\t$info['comments_raw'][$i]['timestamp_unix'] = getid3_lib::DateMac2Unix($info['comments_raw'][$i]['timestamp']);\n@@ -1007,7 +993,7 @@\n \t\t\t\t\t}\n \t\t\t\t}\n \n-\t\t\t\t$CommentsChunkNames = array('NAME'=>'title', 'author'=>'artist', '(c) '=>'copyright', 'ANNO'=>'comment');\n+\t\t\t\t$CommentsChunkNames = ['NAME'=>'title', 'author'=>'artist', '(c) '=>'copyright', 'ANNO'=>'comment'];\n \t\t\t\tforeach ($CommentsChunkNames as $key => $value) {\n \t\t\t\t\tif (isset($thisfile_riff[$RIFFsubtype][$key][0]['data'])) {\n \t\t\t\t\t\t$thisfile_riff['comments'][$value][] = $thisfile_riff[$RIFFsubtype][$key][0]['data'];\n@@ -1047,13 +1033,13 @@\n \t\t\t\t\t// shortcut\n \t\t\t\t\t$thisfile_riff_RIFFsubtype_VHDR_0 = &$thisfile_riff[$RIFFsubtype]['VHDR'][0];\n \n-\t\t\t\t\t$thisfile_riff_RIFFsubtype_VHDR_0['oneShotHiSamples']  =   getid3_lib::BigEndian2Int(substr($thisfile_riff_RIFFsubtype_VHDR_0['data'],  0, 4));\n-\t\t\t\t\t$thisfile_riff_RIFFsubtype_VHDR_0['repeatHiSamples']   =   getid3_lib::BigEndian2Int(substr($thisfile_riff_RIFFsubtype_VHDR_0['data'],  4, 4));\n-\t\t\t\t\t$thisfile_riff_RIFFsubtype_VHDR_0['samplesPerHiCycle'] =   getid3_lib::BigEndian2Int(substr($thisfile_riff_RIFFsubtype_VHDR_0['data'],  8, 4));\n-\t\t\t\t\t$thisfile_riff_RIFFsubtype_VHDR_0['samplesPerSec']     =   getid3_lib::BigEndian2Int(substr($thisfile_riff_RIFFsubtype_VHDR_0['data'], 12, 2));\n-\t\t\t\t\t$thisfile_riff_RIFFsubtype_VHDR_0['ctOctave']          =   getid3_lib::BigEndian2Int(substr($thisfile_riff_RIFFsubtype_VHDR_0['data'], 14, 1));\n-\t\t\t\t\t$thisfile_riff_RIFFsubtype_VHDR_0['sCompression']      =   getid3_lib::BigEndian2Int(substr($thisfile_riff_RIFFsubtype_VHDR_0['data'], 15, 1));\n-\t\t\t\t\t$thisfile_riff_RIFFsubtype_VHDR_0['Volume']            = getid3_lib::FixedPoint16_16(substr($thisfile_riff_RIFFsubtype_VHDR_0['data'], 16, 4));\n+\t\t\t\t\t$thisfile_riff_RIFFsubtype_VHDR_0['oneShotHiSamples']  =   getid3_lib::BigEndian2Int(substr((string) $thisfile_riff_RIFFsubtype_VHDR_0['data'],  0, 4));\n+\t\t\t\t\t$thisfile_riff_RIFFsubtype_VHDR_0['repeatHiSamples']   =   getid3_lib::BigEndian2Int(substr((string) $thisfile_riff_RIFFsubtype_VHDR_0['data'],  4, 4));\n+\t\t\t\t\t$thisfile_riff_RIFFsubtype_VHDR_0['samplesPerHiCycle'] =   getid3_lib::BigEndian2Int(substr((string) $thisfile_riff_RIFFsubtype_VHDR_0['data'],  8, 4));\n+\t\t\t\t\t$thisfile_riff_RIFFsubtype_VHDR_0['samplesPerSec']     =   getid3_lib::BigEndian2Int(substr((string) $thisfile_riff_RIFFsubtype_VHDR_0['data'], 12, 2));\n+\t\t\t\t\t$thisfile_riff_RIFFsubtype_VHDR_0['ctOctave']          =   getid3_lib::BigEndian2Int(substr((string) $thisfile_riff_RIFFsubtype_VHDR_0['data'], 14, 1));\n+\t\t\t\t\t$thisfile_riff_RIFFsubtype_VHDR_0['sCompression']      =   getid3_lib::BigEndian2Int(substr((string) $thisfile_riff_RIFFsubtype_VHDR_0['data'], 15, 1));\n+\t\t\t\t\t$thisfile_riff_RIFFsubtype_VHDR_0['Volume']            = getid3_lib::FixedPoint16_16(substr((string) $thisfile_riff_RIFFsubtype_VHDR_0['data'], 16, 4));\n \n \t\t\t\t\t$thisfile_audio['sample_rate'] = $thisfile_riff_RIFFsubtype_VHDR_0['samplesPerSec'];\n \n@@ -1071,7 +1057,7 @@\n \t\t\t\t\t\t\tbreak;\n \n \t\t\t\t\t\tdefault:\n-\t\t\t\t\t\t\t$info['warning'][] = 'Unexpected sCompression value in 8SVX.VHDR chunk - expecting 0 or 1, found \"'.sCompression.'\"';\n+\t\t\t\t\t\t\t$info['warning'][] = 'Unexpected sCompression value in 8SVX.VHDR chunk - expecting 0 or 1, found \"'.\\SCOMPRESSION.'\"';\n \t\t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n \t\t\t\t}\n@@ -1095,7 +1081,7 @@\n \n \t\t\t\t}\n \n-\t\t\t\t$CommentsChunkNames = array('NAME'=>'title', 'author'=>'artist', '(c) '=>'copyright', 'ANNO'=>'comment');\n+\t\t\t\t$CommentsChunkNames = ['NAME'=>'title', 'author'=>'artist', '(c) '=>'copyright', 'ANNO'=>'comment'];\n \t\t\t\tforeach ($CommentsChunkNames as $key => $value) {\n \t\t\t\t\tif (isset($thisfile_riff[$RIFFsubtype][$key][0]['data'])) {\n \t\t\t\t\t\t$thisfile_riff['comments'][$value][] = $thisfile_riff[$RIFFsubtype][$key][0]['data'];\n@@ -1140,7 +1126,7 @@\n \t\t\tcase 'AIFF':\n \t\t\tcase 'AIFC':\n \t\t\t\t$ID3v2_key_good = 'id3 ';\n-\t\t\t\t$ID3v2_keys_bad = array('ID3 ', 'tag ');\n+\t\t\t\t$ID3v2_keys_bad = ['ID3 ', 'tag '];\n \t\t\t\tforeach ($ID3v2_keys_bad as $ID3v2_key_bad) {\n \t\t\t\t\tif (isset($thisfile_riff[$RIFFsubtype][$ID3v2_key_bad]) && !array_key_exists($ID3v2_key_good, $thisfile_riff[$RIFFsubtype])) {\n \t\t\t\t\t\t$thisfile_riff[$RIFFsubtype][$ID3v2_key_good] = $thisfile_riff[$RIFFsubtype][$ID3v2_key_bad];\n@@ -1163,7 +1149,7 @@\n \t\t}\n \n \t\tif (isset($thisfile_riff_WAVE['DISP']) && is_array($thisfile_riff_WAVE['DISP'])) {\n-\t\t\t$thisfile_riff['comments']['title'][] = trim(substr($thisfile_riff_WAVE['DISP'][count($thisfile_riff_WAVE['DISP']) - 1]['data'], 4));\n+\t\t\t$thisfile_riff['comments']['title'][] = trim(substr((string) $thisfile_riff_WAVE['DISP'][count($thisfile_riff_WAVE['DISP']) - 1]['data'], 4));\n \t\t}\n \t\tif (isset($thisfile_riff_WAVE['INFO']) && is_array($thisfile_riff_WAVE['INFO'])) {\n \t\t\tself::parseComments($thisfile_riff_WAVE['INFO'], $thisfile_riff['comments']);\n@@ -1231,7 +1217,7 @@\n \t\t\t$thisfile_audio['sample_rate']  = $info['mpeg']['audio']['sample_rate'];\n \t\t\t$thisfile_audio['channels']     = $info['mpeg']['audio']['channels'];\n \t\t\t$thisfile_audio['bitrate']      = $info['mpeg']['audio']['bitrate'];\n-\t\t\t$thisfile_audio['bitrate_mode'] = strtolower($info['mpeg']['audio']['bitrate_mode']);\n+\t\t\t$thisfile_audio['bitrate_mode'] = strtolower((string) $info['mpeg']['audio']['bitrate_mode']);\n \t\t\tif (!empty($info['mpeg']['audio']['codec'])) {\n \t\t\t\t$thisfile_audio['codec'] = $info['mpeg']['audio']['codec'].' '.$thisfile_audio['codec'];\n \t\t\t}\n@@ -1338,13 +1324,13 @@\n \t\t\t\t\t\t\t\t\t\t\t\t$info['audio']['sample_rate']  = $info['mpeg']['audio']['sample_rate'];\n \t\t\t\t\t\t\t\t\t\t\t\t$info['audio']['channels']     = $info['mpeg']['audio']['channels'];\n \t\t\t\t\t\t\t\t\t\t\t\t$info['audio']['bitrate']      = $info['mpeg']['audio']['bitrate'];\n-\t\t\t\t\t\t\t\t\t\t\t\t$info['audio']['bitrate_mode'] = strtolower($info['mpeg']['audio']['bitrate_mode']);\n+\t\t\t\t\t\t\t\t\t\t\t\t$info['audio']['bitrate_mode'] = strtolower((string) $info['mpeg']['audio']['bitrate_mode']);\n \t\t\t\t\t\t\t\t\t\t\t\t//$info['bitrate']               = $info['audio']['bitrate'];\n \t\t\t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t\t\t\tunset($getid3_temp, $getid3_mp3);\n \t\t\t\t\t\t\t\t\t\t}\n \n-\t\t\t\t\t\t\t\t\t} elseif (strpos($FirstFourBytes, getid3_ac3::syncword) === 0) {\n+\t\t\t\t\t\t\t\t\t} elseif (str_starts_with($FirstFourBytes, getid3_ac3::syncword)) {\n \n \t\t\t\t\t\t\t\t\t\t// AC3\n \t\t\t\t\t\t\t\t\t\t$getid3_temp = new getID3();\n@@ -1373,7 +1359,7 @@\n \t\t\t\t\t\t} else {\n \n \t\t\t\t\t\t\tif (!isset($RIFFchunk[$listname])) {\n-\t\t\t\t\t\t\t\t$RIFFchunk[$listname] = array();\n+\t\t\t\t\t\t\t\t$RIFFchunk[$listname] = [];\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t$LISTchunkParent    = $listname;\n \t\t\t\t\t\t\t$LISTchunkMaxOffset = $this->ftell() - 4 + $chunksize;\n@@ -1477,7 +1463,7 @@\n \n \t\t\t\t\t\t\t\t\tunset($getid3_temp, $getid3_dts);\n \n-\t\t\t\t\t\t\t\t} elseif (substr($testData, 0, 4) == 'wvpk') {\n+\t\t\t\t\t\t\t\t} elseif (str_starts_with($testData, 'wvpk')) {\n \n \t\t\t\t\t\t\t\t\t// This is WavPack data\n \t\t\t\t\t\t\t\t\t$info['wavpack']['offset'] = $info['avdataoffset'];\n@@ -1509,7 +1495,7 @@\n \t\t\t\t\t\t\t\t\tif ($chunksize > 0) {\n \t\t\t\t\t\t\t\t\t\t$RIFFchunk[$chunkname][$thisindex]['data'] = $this->fread($chunksize);\n \t\t\t\t\t\t\t\t\t\tif ($chunkname == 'JUNK') {\n-\t\t\t\t\t\t\t\t\t\t\tif (preg_match('#^([\\\\x20-\\\\x7F]+)#', $RIFFchunk[$chunkname][$thisindex]['data'], $matches)) {\n+\t\t\t\t\t\t\t\t\t\t\tif (preg_match('#^([\\\\x20-\\\\x7F]+)#', (string) $RIFFchunk[$chunkname][$thisindex]['data'], $matches)) {\n \t\t\t\t\t\t\t\t\t\t\t\t// only keep text characters [chr(32)-chr(127)]\n \t\t\t\t\t\t\t\t\t\t\t\t$info['riff']['comments']['junk'][] = trim($matches[1]);\n \t\t\t\t\t\t\t\t\t\t\t}\n@@ -1569,12 +1555,12 @@\n \t\tif ($RIFFdata) {\n \t\t\t$tempfile = tempnam(GETID3_TEMP_DIR, 'getID3');\n \t\t\t$fp_temp  = fopen($tempfile, 'wb');\n-\t\t\t$RIFFdataLength = strlen($RIFFdata);\n+\t\t\t$RIFFdataLength = strlen((string) $RIFFdata);\n \t\t\t$NewLengthString = getid3_lib::LittleEndian2String($RIFFdataLength, 4);\n \t\t\tfor ($i = 0; $i < 4; $i++) {\n \t\t\t\t$RIFFdata[($i + 4)] = $NewLengthString[$i];\n \t\t\t}\n-\t\t\tfwrite($fp_temp, $RIFFdata);\n+\t\t\tfwrite($fp_temp, (string) $RIFFdata);\n \t\t\tfclose($fp_temp);\n \n \t\t\t$getid3_temp = new getID3();\n@@ -1585,8 +1571,8 @@\n \t\t\t$getid3_temp->info['warning']      = $info['warning'];\n \t\t\t$getid3_temp->info['error']        = $info['error'];\n \t\t\t$getid3_temp->info['comments']     = $info['comments'];\n-\t\t\t$getid3_temp->info['audio']        = (isset($info['audio']) ? $info['audio'] : array());\n-\t\t\t$getid3_temp->info['video']        = (isset($info['video']) ? $info['video'] : array());\n+\t\t\t$getid3_temp->info['audio']        = ($info['audio'] ?? []);\n+\t\t\t$getid3_temp->info['video']        = ($info['video'] ?? []);\n \t\t\t$getid3_riff = new getid3_riff($getid3_temp);\n \t\t\t$getid3_riff->Analyze();\n \n@@ -1602,7 +1588,7 @@\n \t}\n \n \tpublic static function parseComments(&$RIFFinfoArray, &$CommentsTargetArray) {\n-\t\t$RIFFinfoKeyLookup = array(\n+\t\t$RIFFinfoKeyLookup = [\n \t\t\t'IARL'=>'archivallocation',\n \t\t\t'IART'=>'artist',\n \t\t\t'ICDS'=>'costumedesigner',\n@@ -1643,15 +1629,15 @@\n \t\t\t'IWEB'=>'url',\n \t\t\t'IWRI'=>'writer',\n \t\t\t'____'=>'comment',\n-\t\t);\n+\t\t];\n \t\tforeach ($RIFFinfoKeyLookup as $key => $value) {\n \t\t\tif (isset($RIFFinfoArray[$key])) {\n \t\t\t\tforeach ($RIFFinfoArray[$key] as $commentid => $commentdata) {\n-\t\t\t\t\tif (trim($commentdata['data']) != '') {\n+\t\t\t\t\tif (trim((string) $commentdata['data']) != '') {\n \t\t\t\t\t\tif (isset($CommentsTargetArray[$value])) {\n-\t\t\t\t\t\t\t$CommentsTargetArray[$value][] =     trim($commentdata['data']);\n+\t\t\t\t\t\t\t$CommentsTargetArray[$value][] =     trim((string) $commentdata['data']);\n \t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t$CommentsTargetArray[$value] = array(trim($commentdata['data']));\n+\t\t\t\t\t\t\t$CommentsTargetArray[$value] = [trim((string) $commentdata['data'])];\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n@@ -1662,17 +1648,17 @@\n \n \tpublic static function parseWAVEFORMATex($WaveFormatExData) {\n \t\t// shortcut\n-\t\t$WaveFormatEx['raw'] = array();\n+\t\t$WaveFormatEx['raw'] = [];\n \t\t$WaveFormatEx_raw    = &$WaveFormatEx['raw'];\n \n-\t\t$WaveFormatEx_raw['wFormatTag']      = substr($WaveFormatExData,  0, 2);\n-\t\t$WaveFormatEx_raw['nChannels']       = substr($WaveFormatExData,  2, 2);\n-\t\t$WaveFormatEx_raw['nSamplesPerSec']  = substr($WaveFormatExData,  4, 4);\n-\t\t$WaveFormatEx_raw['nAvgBytesPerSec'] = substr($WaveFormatExData,  8, 4);\n-\t\t$WaveFormatEx_raw['nBlockAlign']     = substr($WaveFormatExData, 12, 2);\n-\t\t$WaveFormatEx_raw['wBitsPerSample']  = substr($WaveFormatExData, 14, 2);\n-\t\tif (strlen($WaveFormatExData) > 16) {\n-\t\t\t$WaveFormatEx_raw['cbSize']      = substr($WaveFormatExData, 16, 2);\n+\t\t$WaveFormatEx_raw['wFormatTag']      = substr((string) $WaveFormatExData,  0, 2);\n+\t\t$WaveFormatEx_raw['nChannels']       = substr((string) $WaveFormatExData,  2, 2);\n+\t\t$WaveFormatEx_raw['nSamplesPerSec']  = substr((string) $WaveFormatExData,  4, 4);\n+\t\t$WaveFormatEx_raw['nAvgBytesPerSec'] = substr((string) $WaveFormatExData,  8, 4);\n+\t\t$WaveFormatEx_raw['nBlockAlign']     = substr((string) $WaveFormatExData, 12, 2);\n+\t\t$WaveFormatEx_raw['wBitsPerSample']  = substr((string) $WaveFormatExData, 14, 2);\n+\t\tif (strlen((string) $WaveFormatExData) > 16) {\n+\t\t\t$WaveFormatEx_raw['cbSize']      = substr((string) $WaveFormatExData, 16, 2);\n \t\t}\n \t\t$WaveFormatEx_raw = array_map('getid3_lib::LittleEndian2Int', $WaveFormatEx_raw);\n \n@@ -1698,27 +1684,27 @@\n \n \t\t// shortcut\n \t\t$info = &$this->getid3->info;\n-\t\t$info['wavpack']  = array();\n+\t\t$info['wavpack']  = [];\n \t\t$thisfile_wavpack = &$info['wavpack'];\n \n-\t\t$thisfile_wavpack['version']           = getid3_lib::LittleEndian2Int(substr($WavPackChunkData,  0, 2));\n+\t\t$thisfile_wavpack['version']           = getid3_lib::LittleEndian2Int(substr((string) $WavPackChunkData,  0, 2));\n \t\tif ($thisfile_wavpack['version'] >= 2) {\n-\t\t\t$thisfile_wavpack['bits']          = getid3_lib::LittleEndian2Int(substr($WavPackChunkData,  2, 2));\n+\t\t\t$thisfile_wavpack['bits']          = getid3_lib::LittleEndian2Int(substr((string) $WavPackChunkData,  2, 2));\n \t\t}\n \t\tif ($thisfile_wavpack['version'] >= 3) {\n-\t\t\t$thisfile_wavpack['flags_raw']     = getid3_lib::LittleEndian2Int(substr($WavPackChunkData,  4, 2));\n-\t\t\t$thisfile_wavpack['shift']         = getid3_lib::LittleEndian2Int(substr($WavPackChunkData,  6, 2));\n-\t\t\t$thisfile_wavpack['total_samples'] = getid3_lib::LittleEndian2Int(substr($WavPackChunkData,  8, 4));\n-\t\t\t$thisfile_wavpack['crc1']          = getid3_lib::LittleEndian2Int(substr($WavPackChunkData, 12, 4));\n-\t\t\t$thisfile_wavpack['crc2']          = getid3_lib::LittleEndian2Int(substr($WavPackChunkData, 16, 4));\n-\t\t\t$thisfile_wavpack['extension']     =                              substr($WavPackChunkData, 20, 4);\n-\t\t\t$thisfile_wavpack['extra_bc']      = getid3_lib::LittleEndian2Int(substr($WavPackChunkData, 24, 1));\n+\t\t\t$thisfile_wavpack['flags_raw']     = getid3_lib::LittleEndian2Int(substr((string) $WavPackChunkData,  4, 2));\n+\t\t\t$thisfile_wavpack['shift']         = getid3_lib::LittleEndian2Int(substr((string) $WavPackChunkData,  6, 2));\n+\t\t\t$thisfile_wavpack['total_samples'] = getid3_lib::LittleEndian2Int(substr((string) $WavPackChunkData,  8, 4));\n+\t\t\t$thisfile_wavpack['crc1']          = getid3_lib::LittleEndian2Int(substr((string) $WavPackChunkData, 12, 4));\n+\t\t\t$thisfile_wavpack['crc2']          = getid3_lib::LittleEndian2Int(substr((string) $WavPackChunkData, 16, 4));\n+\t\t\t$thisfile_wavpack['extension']     =                              substr((string) $WavPackChunkData, 20, 4);\n+\t\t\t$thisfile_wavpack['extra_bc']      = getid3_lib::LittleEndian2Int(substr((string) $WavPackChunkData, 24, 1));\n \t\t\tfor ($i = 0; $i <= 2; $i++) {\n-\t\t\t\t$thisfile_wavpack['extras'][]  = getid3_lib::LittleEndian2Int(substr($WavPackChunkData, 25 + $i, 1));\n+\t\t\t\t$thisfile_wavpack['extras'][]  = getid3_lib::LittleEndian2Int(substr((string) $WavPackChunkData, 25 + $i, 1));\n \t\t\t}\n \n \t\t\t// shortcut\n-\t\t\t$thisfile_wavpack['flags'] = array();\n+\t\t\t$thisfile_wavpack['flags'] = [];\n \t\t\t$thisfile_wavpack_flags = &$thisfile_wavpack['flags'];\n \n \t\t\t$thisfile_wavpack_flags['mono']                 = (bool) ($thisfile_wavpack['flags_raw'] & 0x000001);\n@@ -1748,19 +1734,19 @@\n \n \tpublic static function ParseBITMAPINFOHEADER($BITMAPINFOHEADER, $littleEndian=true) {\n \n-\t\t$parsed['biSize']          = substr($BITMAPINFOHEADER,  0, 4); // number of bytes required by the BITMAPINFOHEADER structure\n-\t\t$parsed['biWidth']         = substr($BITMAPINFOHEADER,  4, 4); // width of the bitmap in pixels\n-\t\t$parsed['biHeight']        = substr($BITMAPINFOHEADER,  8, 4); // height of the bitmap in pixels. If biHeight is positive, the bitmap is a 'bottom-up' DIB and its origin is the lower left corner. If biHeight is negative, the bitmap is a 'top-down' DIB and its origin is the upper left corner\n-\t\t$parsed['biPlanes']        = substr($BITMAPINFOHEADER, 12, 2); // number of color planes on the target device. In most cases this value must be set to 1\n-\t\t$parsed['biBitCount']      = substr($BITMAPINFOHEADER, 14, 2); // Specifies the number of bits per pixels\n-\t\t$parsed['biSizeImage']     = substr($BITMAPINFOHEADER, 20, 4); // size of the bitmap data section of the image (the actual pixel data, excluding BITMAPINFOHEADER and RGBQUAD structures)\n-\t\t$parsed['biXPelsPerMeter'] = substr($BITMAPINFOHEADER, 24, 4); // horizontal resolution, in pixels per metre, of the target device\n-\t\t$parsed['biYPelsPerMeter'] = substr($BITMAPINFOHEADER, 28, 4); // vertical resolution, in pixels per metre, of the target device\n-\t\t$parsed['biClrUsed']       = substr($BITMAPINFOHEADER, 32, 4); // actual number of color indices in the color table used by the bitmap. If this value is zero, the bitmap uses the maximum number of colors corresponding to the value of the biBitCount member for the compression mode specified by biCompression\n-\t\t$parsed['biClrImportant']  = substr($BITMAPINFOHEADER, 36, 4); // number of color indices that are considered important for displaying the bitmap. If this value is zero, all colors are important\n+\t\t$parsed['biSize']          = substr((string) $BITMAPINFOHEADER,  0, 4); // number of bytes required by the BITMAPINFOHEADER structure\n+\t\t$parsed['biWidth']         = substr((string) $BITMAPINFOHEADER,  4, 4); // width of the bitmap in pixels\n+\t\t$parsed['biHeight']        = substr((string) $BITMAPINFOHEADER,  8, 4); // height of the bitmap in pixels. If biHeight is positive, the bitmap is a 'bottom-up' DIB and its origin is the lower left corner. If biHeight is negative, the bitmap is a 'top-down' DIB and its origin is the upper left corner\n+\t\t$parsed['biPlanes']        = substr((string) $BITMAPINFOHEADER, 12, 2); // number of color planes on the target device. In most cases this value must be set to 1\n+\t\t$parsed['biBitCount']      = substr((string) $BITMAPINFOHEADER, 14, 2); // Specifies the number of bits per pixels\n+\t\t$parsed['biSizeImage']     = substr((string) $BITMAPINFOHEADER, 20, 4); // size of the bitmap data section of the image (the actual pixel data, excluding BITMAPINFOHEADER and RGBQUAD structures)\n+\t\t$parsed['biXPelsPerMeter'] = substr((string) $BITMAPINFOHEADER, 24, 4); // horizontal resolution, in pixels per metre, of the target device\n+\t\t$parsed['biYPelsPerMeter'] = substr((string) $BITMAPINFOHEADER, 28, 4); // vertical resolution, in pixels per metre, of the target device\n+\t\t$parsed['biClrUsed']       = substr((string) $BITMAPINFOHEADER, 32, 4); // actual number of color indices in the color table used by the bitmap. If this value is zero, the bitmap uses the maximum number of colors corresponding to the value of the biBitCount member for the compression mode specified by biCompression\n+\t\t$parsed['biClrImportant']  = substr((string) $BITMAPINFOHEADER, 36, 4); // number of color indices that are considered important for displaying the bitmap. If this value is zero, all colors are important\n \t\t$parsed = array_map('getid3_lib::'.($littleEndian ? 'Little' : 'Big').'Endian2Int', $parsed);\n \n-\t\t$parsed['fourcc']          = substr($BITMAPINFOHEADER, 16, 4);  // compression identifier\n+\t\t$parsed['fourcc']          = substr((string) $BITMAPINFOHEADER, 16, 4);  // compression identifier\n \n \t\treturn $parsed;\n \t}\n@@ -1778,7 +1764,7 @@\n \t\t// '5  for Future Additions - 0    '333400000DIVXTAG\n \t\t// '128 bytes total\n \n-\t\tstatic $DIVXTAGgenre  = array(\n+\t\tstatic $DIVXTAGgenre  = [\n \t\t\t 0 => 'Action',\n \t\t\t 1 => 'Action/Adventure',\n \t\t\t 2 => 'Adventure',\n@@ -1801,8 +1787,8 @@\n \t\t\t19 => 'Sci Fi',\n \t\t\t20 => 'Thriller',\n \t\t\t21 => 'Western',\n-\t\t),\n-\t\t$DIVXTAGrating = array(\n+\t\t],\n+\t\t$DIVXTAGrating = [\n \t\t\t 0 => 'Unrated',\n \t\t\t 1 => 'G',\n \t\t\t 2 => 'PG',\n@@ -1809,19 +1795,19 @@\n \t\t\t 3 => 'PG-13',\n \t\t\t 4 => 'R',\n \t\t\t 5 => 'NC-17',\n-\t\t);\n+\t\t];\n \n-\t\t$parsed['title']     =        trim(substr($DIVXTAG,   0, 32));\n-\t\t$parsed['artist']    =        trim(substr($DIVXTAG,  32, 28));\n-\t\t$parsed['year']      = intval(trim(substr($DIVXTAG,  60,  4)));\n-\t\t$parsed['comment']   =        trim(substr($DIVXTAG,  64, 48));\n-\t\t$parsed['genre_id']  = intval(trim(substr($DIVXTAG, 112,  3)));\n-\t\t$parsed['rating_id'] =         ord(substr($DIVXTAG, 115,  1));\n+\t\t$parsed['title']     =        trim(substr((string) $DIVXTAG,   0, 32));\n+\t\t$parsed['artist']    =        trim(substr((string) $DIVXTAG,  32, 28));\n+\t\t$parsed['year']      = intval(trim(substr((string) $DIVXTAG,  60,  4)));\n+\t\t$parsed['comment']   =        trim(substr((string) $DIVXTAG,  64, 48));\n+\t\t$parsed['genre_id']  = intval(trim(substr((string) $DIVXTAG, 112,  3)));\n+\t\t$parsed['rating_id'] =         ord(substr((string) $DIVXTAG, 115,  1));\n \t\t//$parsed['padding'] =             substr($DIVXTAG, 116,  5);  // 5-byte null\n \t\t//$parsed['magic']   =             substr($DIVXTAG, 121,  7);  // \"DIVXTAG\"\n \n-\t\t$parsed['genre']  = (isset($DIVXTAGgenre[$parsed['genre_id']])   ? $DIVXTAGgenre[$parsed['genre_id']]   : $parsed['genre_id']);\n-\t\t$parsed['rating'] = (isset($DIVXTAGrating[$parsed['rating_id']]) ? $DIVXTAGrating[$parsed['rating_id']] : $parsed['rating_id']);\n+\t\t$parsed['genre']  = ($DIVXTAGgenre[$parsed['genre_id']] ?? $parsed['genre_id']);\n+\t\t$parsed['rating'] = ($DIVXTAGrating[$parsed['rating_id']] ?? $parsed['rating_id']);\n \n \t\tif (!$raw) {\n \t\t\tunset($parsed['genre_id'], $parsed['rating_id']);\n@@ -1833,7 +1819,7 @@\n \t\t}\n \n \t\tforeach ($parsed as $tag => $value) {\n-\t\t\t$parsed[$tag] = array($value);\n+\t\t\t$parsed[$tag] = [$value];\n \t\t}\n \n \t\treturn $parsed;\n",
        "applied_rectors": [
          "Rector\\Php53\\Rector\\Ternary\\TernaryToElvisRector",
          "Rector\\Php54\\Rector\\Array_\\LongArrayToShortArrayRector",
          "Rector\\Php70\\Rector\\Ternary\\TernaryToNullCoalescingRector",
          "Rector\\Php71\\Rector\\List_\\ListToArrayDestructRector",
          "Rector\\Php73\\Rector\\ConstFetch\\SensitiveConstantNameRector",
          "Rector\\Php80\\Rector\\Identical\\StrEndsWithRector",
          "Rector\\Php80\\Rector\\Identical\\StrStartsWithRector",
          "Rector\\Php80\\Rector\\Switch_\\ChangeSwitchToMatchRector",
          "Rector\\Php81\\Rector\\FuncCall\\NullToStrictStringFuncCallArgRector"
        ]
      }
    ],
    "changed_files": [
      "selected_100_files/extra_large_1000_plus/012_module.audio-video.riff.php"
    ]
  }
}