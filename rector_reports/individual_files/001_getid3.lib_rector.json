{
  "file_path": "selected_100_files\\extra_large_1000_plus\\001_getid3.lib.php",
  "rector_analysis": {
    "php_version_changes": 12,
    "rules_triggered": [
      "Rector\\Php53\\Rector\\FuncCall\\DirNameFileConstantToDirConstantRector",
      "Rector\\Php53\\Rector\\Ternary\\TernaryToElvisRector",
      "Rector\\Php54\\Rector\\Array_\\LongArrayToShortArrayRector",
      "Rector\\Php56\\Rector\\FuncCall\\PowToExpRector",
      "Rector\\Php70\\Rector\\Break_\\BreakNotInLoopOrSwitchToReturnRector",
      "Rector\\Php70\\Rector\\Ternary\\TernaryToNullCoalescingRector",
      "Rector\\Php71\\Rector\\List_\\ListToArrayDestructRector",
      "Rector\\Php74\\Rector\\ArrayDimFetch\\CurlyToSquareBracketArrayStringRector",
      "Rector\\Php80\\Rector\\Identical\\StrStartsWithRector",
      "Rector\\Php80\\Rector\\NotIdentical\\StrContainsRector",
      "Rector\\Php81\\Rector\\FuncCall\\NullToStrictStringFuncCallArgRector",
      "Rector\\Php82\\Rector\\FuncCall\\Utf8DecodeEncodeToMbConvertEncodingRector"
    ],
    "changes_by_php_version": {
      "php_53": 2,
      "php_54": 1,
      "php_56": 1,
      "php_70": 2,
      "php_71": 1,
      "php_74": 1,
      "php_80": 2,
      "php_81": 1,
      "php_82": 1
    },
    "has_diff": true,
    "diff_line_count": 970
  },
  "analysis_metadata": {
    "rector_version": "2.1.0",
    "analysis_date": "2025-08-31T05:17:27.612699",
    "file_size_kb": 42.5,
    "analysis_type": "version_specific_only"
  },
  "raw_rector_output": {
    "totals": {
      "changed_files": 1,
      "errors": 0
    },
    "file_diffs": [
      {
        "file": "selected_100_files/extra_large_1000_plus/001_getid3.lib.php",
        "diff": "--- Original\n+++ New\n@@ -16,11 +16,11 @@\n \n \tpublic static function PrintHexBytes($string, $hex=true, $spaces=true, $htmlencoding='UTF-8') {\n \t\t$returnstring = '';\n-\t\tfor ($i = 0; $i < strlen($string); $i++) {\n+\t\tfor ($i = 0; $i < strlen((string) $string); $i++) {\n \t\t\tif ($hex) {\n-\t\t\t\t$returnstring .= str_pad(dechex(ord($string{$i})), 2, '0', STR_PAD_LEFT);\n+\t\t\t\t$returnstring .= str_pad(dechex(ord($string[$i])), 2, '0', STR_PAD_LEFT);\n \t\t\t} else {\n-\t\t\t\t$returnstring .= ' '.(preg_match(\"#[\\x20-\\x7E]#\", $string{$i}) ? $string{$i} : 'Â¤');\n+\t\t\t\t$returnstring .= ' '.(preg_match(\"#[\\x20-\\x7E]#\", (string) $string[$i]) ? $string[$i] : 'Â¤');\n \t\t\t}\n \t\t\tif ($spaces) {\n \t\t\t\t$returnstring .= ' ';\n@@ -30,7 +30,7 @@\n \t\t\tif ($htmlencoding === true) {\n \t\t\t\t$htmlencoding = 'UTF-8'; // prior to getID3 v1.9.0 the function's 4th parameter was boolean\n \t\t\t}\n-\t\t\t$returnstring = htmlentities($returnstring, ENT_QUOTES, $htmlencoding);\n+\t\t\t$returnstring = htmlentities((string) $returnstring, ENT_QUOTES, $htmlencoding);\n \t\t}\n \t\treturn $returnstring;\n \t}\n@@ -80,7 +80,7 @@\n \t\t// check if integers are 64-bit\n \t\tstatic $hasINT64 = null;\n \t\tif ($hasINT64 === null) { // 10x faster than is_null()\n-\t\t\t$hasINT64 = is_int(pow(2, 31)); // 32-bit int are limited to (2^31)-1\n+\t\t\t$hasINT64 = is_int(2 ** 31); // 32-bit int are limited to (2^31)-1\n \t\t\tif (!$hasINT64 && !defined('PHP_INT_MIN')) {\n \t\t\t\tdefine('PHP_INT_MIN', ~PHP_INT_MAX);\n \t\t\t}\n@@ -93,14 +93,14 @@\n \t}\n \n \tpublic static function DecimalizeFraction($fraction) {\n-\t\tlist($numerator, $denominator) = explode('/', $fraction);\n-\t\treturn $numerator / ($denominator ? $denominator : 1);\n+\t\t[$numerator, $denominator] = explode('/', (string) $fraction);\n+\t\treturn $numerator / ($denominator ?: 1);\n \t}\n \n \n \tpublic static function DecimalBinary2Float($binarynumerator) {\n \t\t$numerator   = self::Bin2Dec($binarynumerator);\n-\t\t$denominator = self::Bin2Dec('1'.str_repeat('0', strlen($binarynumerator)));\n+\t\t$denominator = self::Bin2Dec('1'.str_repeat('0', strlen((string) $binarynumerator)));\n \t\treturn ($numerator / $denominator);\n \t}\n \n@@ -107,25 +107,25 @@\n \n \tpublic static function NormalizeBinaryPoint($binarypointnumber, $maxbits=52) {\n \t\t// http://www.scri.fsu.edu/~jac/MAD3401/Backgrnd/binary.html\n-\t\tif (strpos($binarypointnumber, '.') === false) {\n+\t\tif (!str_contains((string) $binarypointnumber, '.')) {\n \t\t\t$binarypointnumber = '0.'.$binarypointnumber;\n-\t\t} elseif ($binarypointnumber{0} == '.') {\n+\t\t} elseif ($binarypointnumber[0] == '.') {\n \t\t\t$binarypointnumber = '0'.$binarypointnumber;\n \t\t}\n \t\t$exponent = 0;\n-\t\twhile (($binarypointnumber{0} != '1') || (substr($binarypointnumber, 1, 1) != '.')) {\n-\t\t\tif (substr($binarypointnumber, 1, 1) == '.') {\n+\t\twhile (($binarypointnumber[0] != '1') || (substr((string) $binarypointnumber, 1, 1) != '.')) {\n+\t\t\tif (substr((string) $binarypointnumber, 1, 1) == '.') {\n \t\t\t\t$exponent--;\n-\t\t\t\t$binarypointnumber = substr($binarypointnumber, 2, 1).'.'.substr($binarypointnumber, 3);\n+\t\t\t\t$binarypointnumber = substr((string) $binarypointnumber, 2, 1).'.'.substr((string) $binarypointnumber, 3);\n \t\t\t} else {\n-\t\t\t\t$pointpos = strpos($binarypointnumber, '.');\n+\t\t\t\t$pointpos = strpos((string) $binarypointnumber, '.');\n \t\t\t\t$exponent += ($pointpos - 1);\n \t\t\t\t$binarypointnumber = str_replace('.', '', $binarypointnumber);\n-\t\t\t\t$binarypointnumber = $binarypointnumber{0}.'.'.substr($binarypointnumber, 1);\n+\t\t\t\t$binarypointnumber = $binarypointnumber[0].'.'.substr((string) $binarypointnumber, 1);\n \t\t\t}\n \t\t}\n-\t\t$binarypointnumber = str_pad(substr($binarypointnumber, 0, $maxbits + 2), $maxbits + 2, '0', STR_PAD_RIGHT);\n-\t\treturn array('normalized'=>$binarypointnumber, 'exponent'=>(int) $exponent);\n+\t\t$binarypointnumber = str_pad(substr((string) $binarypointnumber, 0, $maxbits + 2), $maxbits + 2, '0', STR_PAD_RIGHT);\n+\t\treturn ['normalized'=>$binarypointnumber, 'exponent'=>(int) $exponent];\n \t}\n \n \n@@ -135,7 +135,7 @@\n \t\t$intpart   = self::trunc($floatvalue);\n \t\t$floatpart = abs($floatvalue - $intpart);\n \t\t$pointbitstring = '';\n-\t\twhile (($floatpart != 0) && (strlen($pointbitstring) < $maxbits)) {\n+\t\twhile (($floatpart != 0) && (strlen((string) $pointbitstring) < $maxbits)) {\n \t\t\t$floatpart *= 2;\n \t\t\t$pointbitstring .= (string) self::trunc($floatpart);\n \t\t\t$floatpart -= self::trunc($floatpart);\n@@ -168,9 +168,9 @@\n \t\t\t$signbit = '1';\n \t\t}\n \t\t$normalizedbinary  = self::NormalizeBinaryPoint(self::Float2BinaryDecimal($floatvalue), $fractionbits);\n-\t\t$biasedexponent    = pow(2, $exponentbits - 1) - 1 + $normalizedbinary['exponent']; // (127 or 1023) +/- exponent\n+\t\t$biasedexponent    = 2 ** ($exponentbits - 1) - 1 + $normalizedbinary['exponent']; // (127 or 1023) +/- exponent\n \t\t$exponentbitstring = str_pad(decbin($biasedexponent), $exponentbits, '0', STR_PAD_LEFT);\n-\t\t$fractionbitstring = str_pad(substr($normalizedbinary['normalized'], 2), $fractionbits, '0', STR_PAD_RIGHT);\n+\t\t$fractionbitstring = str_pad(substr((string) $normalizedbinary['normalized'], 2), $fractionbits, '0', STR_PAD_RIGHT);\n \n \t\treturn self::BigEndian2String(self::Bin2Dec($signbit.$exponentbitstring.$fractionbitstring), $bits % 8, false);\n \t}\n@@ -177,7 +177,7 @@\n \n \n \tpublic static function LittleEndian2Float($byteword) {\n-\t\treturn self::BigEndian2Float(strrev($byteword));\n+\t\treturn self::BigEndian2Float(strrev((string) $byteword));\n \t}\n \n \n@@ -190,9 +190,9 @@\n \t\tif (!$bitword) {\n \t\t\treturn 0;\n \t\t}\n-\t\t$signbit = $bitword{0};\n+\t\t$signbit = $bitword[0];\n \n-\t\tswitch (strlen($byteword) * 8) {\n+\t\tswitch (strlen((string) $byteword) * 8) {\n \t\t\tcase 32:\n \t\t\t\t$exponentbits = 8;\n \t\t\t\t$fractionbits = 23;\n@@ -206,10 +206,10 @@\n \t\t\tcase 80:\n \t\t\t\t// 80-bit Apple SANE format\n \t\t\t\t// http://www.mactech.com/articles/mactech/Vol.06/06.01/SANENormalized/\n-\t\t\t\t$exponentstring = substr($bitword, 1, 15);\n-\t\t\t\t$isnormalized = intval($bitword{16});\n-\t\t\t\t$fractionstring = substr($bitword, 17, 63);\n-\t\t\t\t$exponent = pow(2, self::Bin2Dec($exponentstring) - 16383);\n+\t\t\t\t$exponentstring = substr((string) $bitword, 1, 15);\n+\t\t\t\t$isnormalized = intval($bitword[16]);\n+\t\t\t\t$fractionstring = substr((string) $bitword, 17, 63);\n+\t\t\t\t$exponent = 2 ** (self::Bin2Dec($exponentstring) - 16383);\n \t\t\t\t$fraction = $isnormalized + self::DecimalBinary2Float($fractionstring);\n \t\t\t\t$floatvalue = $exponent * $fraction;\n \t\t\t\tif ($signbit == '1') {\n@@ -222,15 +222,15 @@\n \t\t\t\treturn false;\n \t\t\t\tbreak;\n \t\t}\n-\t\t$exponentstring = substr($bitword, 1, $exponentbits);\n-\t\t$fractionstring = substr($bitword, $exponentbits + 1, $fractionbits);\n+\t\t$exponentstring = substr((string) $bitword, 1, $exponentbits);\n+\t\t$fractionstring = substr((string) $bitword, $exponentbits + 1, $fractionbits);\n \t\t$exponent = self::Bin2Dec($exponentstring);\n \t\t$fraction = self::Bin2Dec($fractionstring);\n \n-\t\tif (($exponent == (pow(2, $exponentbits) - 1)) && ($fraction != 0)) {\n+\t\tif (($exponent == (2 ** $exponentbits - 1)) && ($fraction != 0)) {\n \t\t\t// Not a Number\n \t\t\t$floatvalue = false;\n-\t\t} elseif (($exponent == (pow(2, $exponentbits) - 1)) && ($fraction == 0)) {\n+\t\t} elseif (($exponent == (2 ** $exponentbits - 1)) && ($fraction == 0)) {\n \t\t\tif ($signbit == '1') {\n \t\t\t\t$floatvalue = '-infinity';\n \t\t\t} else {\n@@ -245,12 +245,12 @@\n \t\t\t$floatvalue = ($signbit ? 0 : -0);\n \t\t} elseif (($exponent == 0) && ($fraction != 0)) {\n \t\t\t// These are 'unnormalized' values\n-\t\t\t$floatvalue = pow(2, (-1 * (pow(2, $exponentbits - 1) - 2))) * self::DecimalBinary2Float($fractionstring);\n+\t\t\t$floatvalue = 2 ** (-1 * (2 ** ($exponentbits - 1) - 2)) * self::DecimalBinary2Float($fractionstring);\n \t\t\tif ($signbit == '1') {\n \t\t\t\t$floatvalue *= -1;\n \t\t\t}\n \t\t} elseif ($exponent != 0) {\n-\t\t\t$floatvalue = pow(2, ($exponent - (pow(2, $exponentbits - 1) - 1))) * (1 + self::DecimalBinary2Float($fractionstring));\n+\t\t\t$floatvalue = 2 ** ($exponent - (2 ** ($exponentbits - 1) - 1)) * (1 + self::DecimalBinary2Float($fractionstring));\n \t\t\tif ($signbit == '1') {\n \t\t\t\t$floatvalue *= -1;\n \t\t\t}\n@@ -261,7 +261,7 @@\n \n \tpublic static function BigEndian2Int($byteword, $synchsafe=false, $signed=false) {\n \t\t$intvalue = 0;\n-\t\t$bytewordlen = strlen($byteword);\n+\t\t$bytewordlen = strlen((string) $byteword);\n \t\tif ($bytewordlen == 0) {\n \t\t\treturn false;\n \t\t}\n@@ -268,9 +268,9 @@\n \t\tfor ($i = 0; $i < $bytewordlen; $i++) {\n \t\t\tif ($synchsafe) { // disregard MSB, effectively 7-bit bytes\n \t\t\t\t//$intvalue = $intvalue | (ord($byteword{$i}) & 0x7F) << (($bytewordlen - 1 - $i) * 7); // faster, but runs into problems past 2^31 on 32-bit systems\n-\t\t\t\t$intvalue += (ord($byteword{$i}) & 0x7F) * pow(2, ($bytewordlen - 1 - $i) * 7);\n+\t\t\t\t$intvalue += (ord($byteword[$i]) & 0x7F) * 2 ** (($bytewordlen - 1 - $i) * 7);\n \t\t\t} else {\n-\t\t\t\t$intvalue += ord($byteword{$i}) * pow(256, ($bytewordlen - 1 - $i));\n+\t\t\t\t$intvalue += ord($byteword[$i]) * 256 ** ($bytewordlen - 1 - $i);\n \t\t\t}\n \t\t}\n \t\tif ($signed && !$synchsafe) {\n@@ -281,8 +281,8 @@\n \t\t\t\t\t$intvalue = 0 - ($intvalue & ($signMaskBit - 1));\n \t\t\t\t}\n \t\t\t} else {\n-\t\t\t\tthrow new Exception('ERROR: Cannot have signed integers larger than '.(8 * PHP_INT_SIZE).'-bits ('.strlen($byteword).') in self::BigEndian2Int()');\n-\t\t\t\tbreak;\n+\t\t\t\tthrow new Exception('ERROR: Cannot have signed integers larger than '.(8 * PHP_INT_SIZE).'-bits ('.strlen((string) $byteword).') in self::BigEndian2Int()');\n+\t\t\t\treturn;\n \t\t\t}\n \t\t}\n \t\treturn self::CastAsInt($intvalue);\n@@ -290,15 +290,15 @@\n \n \n \tpublic static function LittleEndian2Int($byteword, $signed=false) {\n-\t\treturn self::BigEndian2Int(strrev($byteword), false, $signed);\n+\t\treturn self::BigEndian2Int(strrev((string) $byteword), false, $signed);\n \t}\n \n \n \tpublic static function BigEndian2Bin($byteword) {\n \t\t$binvalue = '';\n-\t\t$bytewordlen = strlen($byteword);\n+\t\t$bytewordlen = strlen((string) $byteword);\n \t\tfor ($i = 0; $i < $bytewordlen; $i++) {\n-\t\t\t$binvalue .= str_pad(decbin(ord($byteword{$i})), 8, '0', STR_PAD_LEFT);\n+\t\t\t$binvalue .= str_pad(decbin(ord($byteword[$i])), 8, '0', STR_PAD_LEFT);\n \t\t}\n \t\treturn $binvalue;\n \t}\n@@ -321,7 +321,7 @@\n \t\t\t$intstring = chr(ceil(($quotient - floor($quotient)) * $maskbyte)).$intstring;\n \t\t\t$number = floor($quotient);\n \t\t}\n-\t\treturn str_pad($intstring, $minbytes, \"\\x00\", STR_PAD_LEFT);\n+\t\treturn str_pad((string) $intstring, $minbytes, \"\\x00\", STR_PAD_LEFT);\n \t}\n \n \n@@ -342,14 +342,14 @@\n \tpublic static function Bin2Dec($binstring, $signed=false) {\n \t\t$signmult = 1;\n \t\tif ($signed) {\n-\t\t\tif ($binstring{0} == '1') {\n+\t\t\tif ($binstring[0] == '1') {\n \t\t\t\t$signmult = -1;\n \t\t\t}\n-\t\t\t$binstring = substr($binstring, 1);\n+\t\t\t$binstring = substr((string) $binstring, 1);\n \t\t}\n \t\t$decvalue = 0;\n-\t\tfor ($i = 0; $i < strlen($binstring); $i++) {\n-\t\t\t$decvalue += ((int) substr($binstring, strlen($binstring) - $i - 1, 1)) * pow(2, $i);\n+\t\tfor ($i = 0; $i < strlen((string) $binstring); $i++) {\n+\t\t\t$decvalue += ((int) substr((string) $binstring, strlen((string) $binstring) - $i - 1, 1)) * 2 ** $i;\n \t\t}\n \t\treturn self::CastAsInt($decvalue * $signmult);\n \t}\n@@ -358,9 +358,9 @@\n \tpublic static function Bin2String($binstring) {\n \t\t// return 'hi' for input of '0110100001101001'\n \t\t$string = '';\n-\t\t$binstringreversed = strrev($binstring);\n-\t\tfor ($i = 0; $i < strlen($binstringreversed); $i += 8) {\n-\t\t\t$string = chr(self::Bin2Dec(strrev(substr($binstringreversed, $i, 8)))).$string;\n+\t\t$binstringreversed = strrev((string) $binstring);\n+\t\tfor ($i = 0; $i < strlen((string) $binstringreversed); $i += 8) {\n+\t\t\t$string = chr(self::Bin2Dec(strrev(substr((string) $binstringreversed, $i, 8)))).$string;\n \t\t}\n \t\treturn $string;\n \t}\n@@ -377,7 +377,7 @@\n \t\t\t\t$number >>= 8;\n \t\t\t}\n \t\t}\n-\t\treturn str_pad($intstring, $minbytes, \"\\x00\", STR_PAD_RIGHT);\n+\t\treturn str_pad((string) $intstring, $minbytes, \"\\x00\", STR_PAD_RIGHT);\n \t}\n \n \n@@ -426,16 +426,16 @@\n \t}\n \n \tpublic static function fileextension($filename, $numextensions=1) {\n-\t\tif (strstr($filename, '.')) {\n-\t\t\t$reversedfilename = strrev($filename);\n+\t\tif (strstr((string) $filename, '.')) {\n+\t\t\t$reversedfilename = strrev((string) $filename);\n \t\t\t$offset = 0;\n \t\t\tfor ($i = 0; $i < $numextensions; $i++) {\n-\t\t\t\t$offset = strpos($reversedfilename, '.', $offset + 1);\n+\t\t\t\t$offset = strpos((string) $reversedfilename, '.', $offset + 1);\n \t\t\t\tif ($offset === false) {\n \t\t\t\t\treturn '';\n \t\t\t\t}\n \t\t\t}\n-\t\t\treturn strrev(substr($reversedfilename, 0, $offset));\n+\t\t\treturn strrev(substr((string) $reversedfilename, 0, $offset));\n \t\t}\n \t\treturn '';\n \t}\n@@ -447,7 +447,7 @@\n \t\t$H = (int) floor( $seconds                            / 3600);\n \t\t$M = (int) floor(($seconds - (3600 * $H)            ) /   60);\n \t\t$S = (int) round( $seconds - (3600 * $H) - (60 * $M)        );\n-\t\treturn $sign.($H ? $H.':' : '').($H ? str_pad($M, 2, '0', STR_PAD_LEFT) : intval($M)).':'.str_pad($S, 2, 0, STR_PAD_LEFT);\n+\t\treturn $sign.($H ? $H.':' : '').($H ? str_pad((string) $M, 2, '0', STR_PAD_LEFT) : intval($M)).':'.str_pad((string) $S, 2, 0, STR_PAD_LEFT);\n \t}\n \n \n@@ -459,18 +459,18 @@\n \n \n \tpublic static function FixedPoint8_8($rawdata) {\n-\t\treturn self::BigEndian2Int(substr($rawdata, 0, 1)) + (float) (self::BigEndian2Int(substr($rawdata, 1, 1)) / pow(2, 8));\n+\t\treturn self::BigEndian2Int(substr((string) $rawdata, 0, 1)) + (float) (self::BigEndian2Int(substr((string) $rawdata, 1, 1)) / 2 ** 8);\n \t}\n \n \n \tpublic static function FixedPoint16_16($rawdata) {\n-\t\treturn self::BigEndian2Int(substr($rawdata, 0, 2)) + (float) (self::BigEndian2Int(substr($rawdata, 2, 2)) / pow(2, 16));\n+\t\treturn self::BigEndian2Int(substr((string) $rawdata, 0, 2)) + (float) (self::BigEndian2Int(substr((string) $rawdata, 2, 2)) / 2 ** 16);\n \t}\n \n \n \tpublic static function FixedPoint2_30($rawdata) {\n \t\t$binarystring = self::BigEndian2Bin($rawdata);\n-\t\treturn self::Bin2Dec(substr($binarystring, 0, 2)) + (float) (self::Bin2Dec(substr($binarystring, 2, 30)) / pow(2, 30));\n+\t\treturn self::Bin2Dec(substr((string) $binarystring, 0, 2)) + (float) (self::Bin2Dec(substr((string) $binarystring, 2, 30)) / 2 ** 30);\n \t}\n \n \n@@ -481,9 +481,9 @@\n \t\t//   $foo = array('path'=>array('to'=>'array('my'=>array('file.txt'))));\n \t\t// or\n \t\t//   $foo['path']['to']['my'] = 'file.txt';\n-\t\t$ArrayPath = ltrim($ArrayPath, $Separator);\n-\t\tif (($pos = strpos($ArrayPath, $Separator)) !== false) {\n-\t\t\t$ReturnedArray[substr($ArrayPath, 0, $pos)] = self::CreateDeepArray(substr($ArrayPath, $pos + 1), $Separator, $Value);\n+\t\t$ArrayPath = ltrim((string) $ArrayPath, $Separator);\n+\t\tif (($pos = strpos((string) $ArrayPath, (string) $Separator)) !== false) {\n+\t\t\t$ReturnedArray[substr((string) $ArrayPath, 0, $pos)] = self::CreateDeepArray(substr((string) $ArrayPath, $pos + 1), $Separator, $Value);\n \t\t} else {\n \t\t\t$ReturnedArray[$ArrayPath] = $Value;\n \t\t}\n@@ -521,7 +521,7 @@\n \tpublic static function XML2array($XMLstring) {\n \t\tif ( function_exists( 'simplexml_load_string' ) && function_exists( 'libxml_disable_entity_loader' ) ) {\n \t\t\t$loader = libxml_disable_entity_loader( true );\n-\t\t\t$XMLobject = simplexml_load_string( $XMLstring, 'SimpleXMLElement', LIBXML_NOENT );\n+\t\t\t$XMLobject = simplexml_load_string( (string) $XMLstring, 'SimpleXMLElement', LIBXML_NOENT );\n \t\t\t$return = self::SimpleXMLelement2array( $XMLobject );\n \t\t\tlibxml_disable_entity_loader( $loader );\n \t\t\treturn $return;\n@@ -577,7 +577,7 @@\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \n-\t\t\t\t$RequiredFiles = array('cygwin1.dll', 'head.exe', 'tail.exe', $windows_call);\n+\t\t\t\t$RequiredFiles = ['cygwin1.dll', 'head.exe', 'tail.exe', $windows_call];\n \t\t\t\tforeach ($RequiredFiles as $required_file) {\n \t\t\t\t\tif (!is_readable(GETID3_HELPERAPPSDIR.$required_file)) {\n \t\t\t\t\t\t// helper apps not available - fall back to old method\n@@ -590,7 +590,7 @@\n \n \t\t\t} else {\n \n-\t\t\t\t$commandline  = 'head -c'.$end.' '.escapeshellarg($file).' | ';\n+\t\t\t\t$commandline  = 'head -c'.$end.' '.escapeshellarg((string) $file).' | ';\n \t\t\t\t$commandline .= 'tail -c'.$size.' | ';\n \t\t\t\t$commandline .= $unix_call;\n \n@@ -599,12 +599,12 @@\n \t\t\t\t//throw new Exception('PHP running in Safe Mode - backtick operator not available, using slower non-system-call '.$algorithm.' algorithm');\n \t\t\t\tbreak;\n \t\t\t}\n-\t\t\treturn substr(`$commandline`, 0, $hash_length);\n+\t\t\treturn substr((string) `$commandline`, 0, $hash_length);\n \t\t}\n \n \t\tif (empty($tempdir)) {\n \t\t\t// yes this is ugly, feel free to suggest a better way\n-\t\t\trequire_once(dirname(__FILE__).'/getid3.php');\n+\t\t\trequire_once(__DIR__.'/getid3.php');\n \t\t\t$getid3_temp = new getID3();\n \t\t\t$tempdir = $getid3_temp->tempdir;\n \t\t\tunset($getid3_temp);\n@@ -638,7 +638,7 @@\n \t\t\t\tif (fseek($fp_src, $offset, SEEK_SET) == 0) {\n \t\t\t\t\t$byteslefttowrite = $length;\n \t\t\t\t\twhile (($byteslefttowrite > 0) && ($buffer = fread($fp_src, min($byteslefttowrite, getID3::FREAD_BUFFER_SIZE)))) {\n-\t\t\t\t\t\t$byteswritten = fwrite($fp_dest, $buffer, $byteslefttowrite);\n+\t\t\t\t\t\t$byteswritten = fwrite($fp_dest, (string) $buffer, $byteslefttowrite);\n \t\t\t\t\t\t$byteslefttowrite -= $byteswritten;\n \t\t\t\t\t}\n \t\t\t\t\treturn true;\n@@ -682,7 +682,7 @@\n \t// ISO-8859-1 => UTF-8\n \tpublic static function iconv_fallback_iso88591_utf8($string, $bom=false) {\n \t\tif (function_exists('utf8_encode')) {\n-\t\t\treturn utf8_encode($string);\n+\t\t\treturn mb_convert_encoding($string, 'UTF-8', 'ISO-8859-1');\n \t\t}\n \t\t// utf8_encode() unavailable, use getID3()'s iconv_fallback() conversions (possibly PHP is compiled without XML support)\n \t\t$newcharstring = '';\n@@ -689,8 +689,8 @@\n \t\tif ($bom) {\n \t\t\t$newcharstring .= \"\\xEF\\xBB\\xBF\";\n \t\t}\n-\t\tfor ($i = 0; $i < strlen($string); $i++) {\n-\t\t\t$charval = ord($string{$i});\n+\t\tfor ($i = 0; $i < strlen((string) $string); $i++) {\n+\t\t\t$charval = ord($string[$i]);\n \t\t\t$newcharstring .= self::iconv_fallback_int_utf8($charval);\n \t\t}\n \t\treturn $newcharstring;\n@@ -702,8 +702,8 @@\n \t\tif ($bom) {\n \t\t\t$newcharstring .= \"\\xFE\\xFF\";\n \t\t}\n-\t\tfor ($i = 0; $i < strlen($string); $i++) {\n-\t\t\t$newcharstring .= \"\\x00\".$string{$i};\n+\t\tfor ($i = 0; $i < strlen((string) $string); $i++) {\n+\t\t\t$newcharstring .= \"\\x00\".$string[$i];\n \t\t}\n \t\treturn $newcharstring;\n \t}\n@@ -714,8 +714,8 @@\n \t\tif ($bom) {\n \t\t\t$newcharstring .= \"\\xFF\\xFE\";\n \t\t}\n-\t\tfor ($i = 0; $i < strlen($string); $i++) {\n-\t\t\t$newcharstring .= $string{$i}.\"\\x00\";\n+\t\tfor ($i = 0; $i < strlen((string) $string); $i++) {\n+\t\t\t$newcharstring .= $string[$i].\"\\x00\";\n \t\t}\n \t\treturn $newcharstring;\n \t}\n@@ -728,34 +728,34 @@\n \t// UTF-8 => ISO-8859-1\n \tpublic static function iconv_fallback_utf8_iso88591($string) {\n \t\tif (function_exists('utf8_decode')) {\n-\t\t\treturn utf8_decode($string);\n+\t\t\treturn mb_convert_encoding($string, 'ISO-8859-1');\n \t\t}\n \t\t// utf8_decode() unavailable, use getID3()'s iconv_fallback() conversions (possibly PHP is compiled without XML support)\n \t\t$newcharstring = '';\n \t\t$offset = 0;\n-\t\t$stringlength = strlen($string);\n+\t\t$stringlength = strlen((string) $string);\n \t\twhile ($offset < $stringlength) {\n-\t\t\tif ((ord($string{$offset}) | 0x07) == 0xF7) {\n+\t\t\tif ((ord($string[$offset]) | 0x07) == 0xF7) {\n \t\t\t\t// 11110bbb 10bbbbbb 10bbbbbb 10bbbbbb\n-\t\t\t\t$charval = ((ord($string{($offset + 0)}) & 0x07) << 18) &\n-\t\t\t\t\t\t   ((ord($string{($offset + 1)}) & 0x3F) << 12) &\n-\t\t\t\t\t\t   ((ord($string{($offset + 2)}) & 0x3F) <<  6) &\n-\t\t\t\t\t\t\t(ord($string{($offset + 3)}) & 0x3F);\n+\t\t\t\t$charval = ((ord($string[$offset + 0]) & 0x07) << 18) &\n+\t\t\t\t\t\t   ((ord($string[$offset + 1]) & 0x3F) << 12) &\n+\t\t\t\t\t\t   ((ord($string[$offset + 2]) & 0x3F) <<  6) &\n+\t\t\t\t\t\t\t(ord($string[$offset + 3]) & 0x3F);\n \t\t\t\t$offset += 4;\n-\t\t\t} elseif ((ord($string{$offset}) | 0x0F) == 0xEF) {\n+\t\t\t} elseif ((ord($string[$offset]) | 0x0F) == 0xEF) {\n \t\t\t\t// 1110bbbb 10bbbbbb 10bbbbbb\n-\t\t\t\t$charval = ((ord($string{($offset + 0)}) & 0x0F) << 12) &\n-\t\t\t\t\t\t   ((ord($string{($offset + 1)}) & 0x3F) <<  6) &\n-\t\t\t\t\t\t\t(ord($string{($offset + 2)}) & 0x3F);\n+\t\t\t\t$charval = ((ord($string[$offset + 0]) & 0x0F) << 12) &\n+\t\t\t\t\t\t   ((ord($string[$offset + 1]) & 0x3F) <<  6) &\n+\t\t\t\t\t\t\t(ord($string[$offset + 2]) & 0x3F);\n \t\t\t\t$offset += 3;\n-\t\t\t} elseif ((ord($string{$offset}) | 0x1F) == 0xDF) {\n+\t\t\t} elseif ((ord($string[$offset]) | 0x1F) == 0xDF) {\n \t\t\t\t// 110bbbbb 10bbbbbb\n-\t\t\t\t$charval = ((ord($string{($offset + 0)}) & 0x1F) <<  6) &\n-\t\t\t\t\t\t\t(ord($string{($offset + 1)}) & 0x3F);\n+\t\t\t\t$charval = ((ord($string[$offset + 0]) & 0x1F) <<  6) &\n+\t\t\t\t\t\t\t(ord($string[$offset + 1]) & 0x3F);\n \t\t\t\t$offset += 2;\n-\t\t\t} elseif ((ord($string{$offset}) | 0x7F) == 0x7F) {\n+\t\t\t} elseif ((ord($string[$offset]) | 0x7F) == 0x7F) {\n \t\t\t\t// 0bbbbbbb\n-\t\t\t\t$charval = ord($string{$offset});\n+\t\t\t\t$charval = ord($string[$offset]);\n \t\t\t\t$offset += 1;\n \t\t\t} else {\n \t\t\t\t// error? throw some kind of warning here?\n@@ -776,29 +776,29 @@\n \t\t\t$newcharstring .= \"\\xFE\\xFF\";\n \t\t}\n \t\t$offset = 0;\n-\t\t$stringlength = strlen($string);\n+\t\t$stringlength = strlen((string) $string);\n \t\twhile ($offset < $stringlength) {\n-\t\t\tif ((ord($string{$offset}) | 0x07) == 0xF7) {\n+\t\t\tif ((ord($string[$offset]) | 0x07) == 0xF7) {\n \t\t\t\t// 11110bbb 10bbbbbb 10bbbbbb 10bbbbbb\n-\t\t\t\t$charval = ((ord($string{($offset + 0)}) & 0x07) << 18) &\n-\t\t\t\t\t\t   ((ord($string{($offset + 1)}) & 0x3F) << 12) &\n-\t\t\t\t\t\t   ((ord($string{($offset + 2)}) & 0x3F) <<  6) &\n-\t\t\t\t\t\t\t(ord($string{($offset + 3)}) & 0x3F);\n+\t\t\t\t$charval = ((ord($string[$offset + 0]) & 0x07) << 18) &\n+\t\t\t\t\t\t   ((ord($string[$offset + 1]) & 0x3F) << 12) &\n+\t\t\t\t\t\t   ((ord($string[$offset + 2]) & 0x3F) <<  6) &\n+\t\t\t\t\t\t\t(ord($string[$offset + 3]) & 0x3F);\n \t\t\t\t$offset += 4;\n-\t\t\t} elseif ((ord($string{$offset}) | 0x0F) == 0xEF) {\n+\t\t\t} elseif ((ord($string[$offset]) | 0x0F) == 0xEF) {\n \t\t\t\t// 1110bbbb 10bbbbbb 10bbbbbb\n-\t\t\t\t$charval = ((ord($string{($offset + 0)}) & 0x0F) << 12) &\n-\t\t\t\t\t\t   ((ord($string{($offset + 1)}) & 0x3F) <<  6) &\n-\t\t\t\t\t\t\t(ord($string{($offset + 2)}) & 0x3F);\n+\t\t\t\t$charval = ((ord($string[$offset + 0]) & 0x0F) << 12) &\n+\t\t\t\t\t\t   ((ord($string[$offset + 1]) & 0x3F) <<  6) &\n+\t\t\t\t\t\t\t(ord($string[$offset + 2]) & 0x3F);\n \t\t\t\t$offset += 3;\n-\t\t\t} elseif ((ord($string{$offset}) | 0x1F) == 0xDF) {\n+\t\t\t} elseif ((ord($string[$offset]) | 0x1F) == 0xDF) {\n \t\t\t\t// 110bbbbb 10bbbbbb\n-\t\t\t\t$charval = ((ord($string{($offset + 0)}) & 0x1F) <<  6) &\n-\t\t\t\t\t\t\t(ord($string{($offset + 1)}) & 0x3F);\n+\t\t\t\t$charval = ((ord($string[$offset + 0]) & 0x1F) <<  6) &\n+\t\t\t\t\t\t\t(ord($string[$offset + 1]) & 0x3F);\n \t\t\t\t$offset += 2;\n-\t\t\t} elseif ((ord($string{$offset}) | 0x7F) == 0x7F) {\n+\t\t\t} elseif ((ord($string[$offset]) | 0x7F) == 0x7F) {\n \t\t\t\t// 0bbbbbbb\n-\t\t\t\t$charval = ord($string{$offset});\n+\t\t\t\t$charval = ord($string[$offset]);\n \t\t\t\t$offset += 1;\n \t\t\t} else {\n \t\t\t\t// error? throw some kind of warning here?\n@@ -819,29 +819,29 @@\n \t\t\t$newcharstring .= \"\\xFF\\xFE\";\n \t\t}\n \t\t$offset = 0;\n-\t\t$stringlength = strlen($string);\n+\t\t$stringlength = strlen((string) $string);\n \t\twhile ($offset < $stringlength) {\n-\t\t\tif ((ord($string{$offset}) | 0x07) == 0xF7) {\n+\t\t\tif ((ord($string[$offset]) | 0x07) == 0xF7) {\n \t\t\t\t// 11110bbb 10bbbbbb 10bbbbbb 10bbbbbb\n-\t\t\t\t$charval = ((ord($string{($offset + 0)}) & 0x07) << 18) &\n-\t\t\t\t\t\t   ((ord($string{($offset + 1)}) & 0x3F) << 12) &\n-\t\t\t\t\t\t   ((ord($string{($offset + 2)}) & 0x3F) <<  6) &\n-\t\t\t\t\t\t\t(ord($string{($offset + 3)}) & 0x3F);\n+\t\t\t\t$charval = ((ord($string[$offset + 0]) & 0x07) << 18) &\n+\t\t\t\t\t\t   ((ord($string[$offset + 1]) & 0x3F) << 12) &\n+\t\t\t\t\t\t   ((ord($string[$offset + 2]) & 0x3F) <<  6) &\n+\t\t\t\t\t\t\t(ord($string[$offset + 3]) & 0x3F);\n \t\t\t\t$offset += 4;\n-\t\t\t} elseif ((ord($string{$offset}) | 0x0F) == 0xEF) {\n+\t\t\t} elseif ((ord($string[$offset]) | 0x0F) == 0xEF) {\n \t\t\t\t// 1110bbbb 10bbbbbb 10bbbbbb\n-\t\t\t\t$charval = ((ord($string{($offset + 0)}) & 0x0F) << 12) &\n-\t\t\t\t\t\t   ((ord($string{($offset + 1)}) & 0x3F) <<  6) &\n-\t\t\t\t\t\t\t(ord($string{($offset + 2)}) & 0x3F);\n+\t\t\t\t$charval = ((ord($string[$offset + 0]) & 0x0F) << 12) &\n+\t\t\t\t\t\t   ((ord($string[$offset + 1]) & 0x3F) <<  6) &\n+\t\t\t\t\t\t\t(ord($string[$offset + 2]) & 0x3F);\n \t\t\t\t$offset += 3;\n-\t\t\t} elseif ((ord($string{$offset}) | 0x1F) == 0xDF) {\n+\t\t\t} elseif ((ord($string[$offset]) | 0x1F) == 0xDF) {\n \t\t\t\t// 110bbbbb 10bbbbbb\n-\t\t\t\t$charval = ((ord($string{($offset + 0)}) & 0x1F) <<  6) &\n-\t\t\t\t\t\t\t(ord($string{($offset + 1)}) & 0x3F);\n+\t\t\t\t$charval = ((ord($string[$offset + 0]) & 0x1F) <<  6) &\n+\t\t\t\t\t\t\t(ord($string[$offset + 1]) & 0x3F);\n \t\t\t\t$offset += 2;\n-\t\t\t} elseif ((ord($string{$offset}) | 0x7F) == 0x7F) {\n+\t\t\t} elseif ((ord($string[$offset]) | 0x7F) == 0x7F) {\n \t\t\t\t// 0bbbbbbb\n-\t\t\t\t$charval = ord($string{$offset});\n+\t\t\t\t$charval = ord($string[$offset]);\n \t\t\t\t$offset += 1;\n \t\t\t} else {\n \t\t\t\t// error? maybe throw some warning here?\n@@ -862,13 +862,13 @@\n \n \t// UTF-16BE => UTF-8\n \tpublic static function iconv_fallback_utf16be_utf8($string) {\n-\t\tif (substr($string, 0, 2) == \"\\xFE\\xFF\") {\n+\t\tif (str_starts_with((string) $string, \"\\xFE\\xFF\")) {\n \t\t\t// strip BOM\n-\t\t\t$string = substr($string, 2);\n+\t\t\t$string = substr((string) $string, 2);\n \t\t}\n \t\t$newcharstring = '';\n-\t\tfor ($i = 0; $i < strlen($string); $i += 2) {\n-\t\t\t$charval = self::BigEndian2Int(substr($string, $i, 2));\n+\t\tfor ($i = 0; $i < strlen((string) $string); $i += 2) {\n+\t\t\t$charval = self::BigEndian2Int(substr((string) $string, $i, 2));\n \t\t\t$newcharstring .= self::iconv_fallback_int_utf8($charval);\n \t\t}\n \t\treturn $newcharstring;\n@@ -876,13 +876,13 @@\n \n \t// UTF-16LE => UTF-8\n \tpublic static function iconv_fallback_utf16le_utf8($string) {\n-\t\tif (substr($string, 0, 2) == \"\\xFF\\xFE\") {\n+\t\tif (str_starts_with((string) $string, \"\\xFF\\xFE\")) {\n \t\t\t// strip BOM\n-\t\t\t$string = substr($string, 2);\n+\t\t\t$string = substr((string) $string, 2);\n \t\t}\n \t\t$newcharstring = '';\n-\t\tfor ($i = 0; $i < strlen($string); $i += 2) {\n-\t\t\t$charval = self::LittleEndian2Int(substr($string, $i, 2));\n+\t\tfor ($i = 0; $i < strlen((string) $string); $i += 2) {\n+\t\t\t$charval = self::LittleEndian2Int(substr((string) $string, $i, 2));\n \t\t\t$newcharstring .= self::iconv_fallback_int_utf8($charval);\n \t\t}\n \t\treturn $newcharstring;\n@@ -890,13 +890,13 @@\n \n \t// UTF-16BE => ISO-8859-1\n \tpublic static function iconv_fallback_utf16be_iso88591($string) {\n-\t\tif (substr($string, 0, 2) == \"\\xFE\\xFF\") {\n+\t\tif (str_starts_with((string) $string, \"\\xFE\\xFF\")) {\n \t\t\t// strip BOM\n-\t\t\t$string = substr($string, 2);\n+\t\t\t$string = substr((string) $string, 2);\n \t\t}\n \t\t$newcharstring = '';\n-\t\tfor ($i = 0; $i < strlen($string); $i += 2) {\n-\t\t\t$charval = self::BigEndian2Int(substr($string, $i, 2));\n+\t\tfor ($i = 0; $i < strlen((string) $string); $i += 2) {\n+\t\t\t$charval = self::BigEndian2Int(substr((string) $string, $i, 2));\n \t\t\t$newcharstring .= (($charval < 256) ? chr($charval) : '?');\n \t\t}\n \t\treturn $newcharstring;\n@@ -904,13 +904,13 @@\n \n \t// UTF-16LE => ISO-8859-1\n \tpublic static function iconv_fallback_utf16le_iso88591($string) {\n-\t\tif (substr($string, 0, 2) == \"\\xFF\\xFE\") {\n+\t\tif (str_starts_with((string) $string, \"\\xFF\\xFE\")) {\n \t\t\t// strip BOM\n-\t\t\t$string = substr($string, 2);\n+\t\t\t$string = substr((string) $string, 2);\n \t\t}\n \t\t$newcharstring = '';\n-\t\tfor ($i = 0; $i < strlen($string); $i += 2) {\n-\t\t\t$charval = self::LittleEndian2Int(substr($string, $i, 2));\n+\t\tfor ($i = 0; $i < strlen((string) $string); $i += 2) {\n+\t\t\t$charval = self::LittleEndian2Int(substr((string) $string, $i, 2));\n \t\t\t$newcharstring .= (($charval < 256) ? chr($charval) : '?');\n \t\t}\n \t\treturn $newcharstring;\n@@ -918,11 +918,11 @@\n \n \t// UTF-16 (BOM) => ISO-8859-1\n \tpublic static function iconv_fallback_utf16_iso88591($string) {\n-\t\t$bom = substr($string, 0, 2);\n+\t\t$bom = substr((string) $string, 0, 2);\n \t\tif ($bom == \"\\xFE\\xFF\") {\n-\t\t\treturn self::iconv_fallback_utf16be_iso88591(substr($string, 2));\n+\t\t\treturn self::iconv_fallback_utf16be_iso88591(substr((string) $string, 2));\n \t\t} elseif ($bom == \"\\xFF\\xFE\") {\n-\t\t\treturn self::iconv_fallback_utf16le_iso88591(substr($string, 2));\n+\t\t\treturn self::iconv_fallback_utf16le_iso88591(substr((string) $string, 2));\n \t\t}\n \t\treturn $string;\n \t}\n@@ -929,11 +929,11 @@\n \n \t// UTF-16 (BOM) => UTF-8\n \tpublic static function iconv_fallback_utf16_utf8($string) {\n-\t\t$bom = substr($string, 0, 2);\n+\t\t$bom = substr((string) $string, 0, 2);\n \t\tif ($bom == \"\\xFE\\xFF\") {\n-\t\t\treturn self::iconv_fallback_utf16be_utf8(substr($string, 2));\n+\t\t\treturn self::iconv_fallback_utf16be_utf8(substr((string) $string, 2));\n \t\t} elseif ($bom == \"\\xFF\\xFE\") {\n-\t\t\treturn self::iconv_fallback_utf16le_utf8(substr($string, 2));\n+\t\t\treturn self::iconv_fallback_utf16le_utf8(substr((string) $string, 2));\n \t\t}\n \t\treturn $string;\n \t}\n@@ -946,10 +946,10 @@\n \n \t\t// iconv() availble\n \t\tif (function_exists('iconv')) {\n-\t\t\tif ($converted_string = @iconv($in_charset, $out_charset.'//TRANSLIT', $string)) {\n+\t\t\tif ($converted_string = @iconv((string) $in_charset, $out_charset.'//TRANSLIT', (string) $string)) {\n \t\t\t\tswitch ($out_charset) {\n \t\t\t\t\tcase 'ISO-8859-1':\n-\t\t\t\t\t\t$converted_string = rtrim($converted_string, \"\\x00\");\n+\t\t\t\t\t\t$converted_string = rtrim((string) $converted_string, \"\\x00\");\n \t\t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t\treturn $converted_string;\n@@ -962,7 +962,7 @@\n \n \n \t\t// iconv() not available\n-\t\tstatic $ConversionFunctionList = array();\n+\t\tstatic $ConversionFunctionList = [];\n \t\tif (empty($ConversionFunctionList)) {\n \t\t\t$ConversionFunctionList['ISO-8859-1']['UTF-8']    = 'iconv_fallback_iso88591_utf8';\n \t\t\t$ConversionFunctionList['ISO-8859-1']['UTF-16']   = 'iconv_fallback_iso88591_utf16';\n@@ -979,8 +979,8 @@\n \t\t\t$ConversionFunctionList['UTF-16BE']['ISO-8859-1'] = 'iconv_fallback_utf16be_iso88591';\n \t\t\t$ConversionFunctionList['UTF-16BE']['UTF-8']      = 'iconv_fallback_utf16be_utf8';\n \t\t}\n-\t\tif (isset($ConversionFunctionList[strtoupper($in_charset)][strtoupper($out_charset)])) {\n-\t\t\t$ConversionFunction = $ConversionFunctionList[strtoupper($in_charset)][strtoupper($out_charset)];\n+\t\tif (isset($ConversionFunctionList[strtoupper((string) $in_charset)][strtoupper((string) $out_charset)])) {\n+\t\t\t$ConversionFunction = $ConversionFunctionList[strtoupper((string) $in_charset)][strtoupper((string) $out_charset)];\n \t\t\treturn self::$ConversionFunction($string);\n \t\t}\n \t\tthrow new Exception('PHP does not have iconv() support - cannot convert from '.$in_charset.' to '.$out_charset);\n@@ -1019,28 +1019,28 @@\n \t\t\tcase 'win-1251':\n \t\t\tcase 'Windows-1251':\n \t\t\tcase 'Windows-1252':\n-\t\t\t\t$HTMLstring = htmlentities($string, ENT_COMPAT, $charset);\n+\t\t\t\t$HTMLstring = htmlentities((string) $string, ENT_COMPAT, $charset);\n \t\t\t\tbreak;\n \n \t\t\tcase 'UTF-8':\n-\t\t\t\t$strlen = strlen($string);\n+\t\t\t\t$strlen = strlen((string) $string);\n \t\t\t\tfor ($i = 0; $i < $strlen; $i++) {\n-\t\t\t\t\t$char_ord_val = ord($string{$i});\n+\t\t\t\t\t$char_ord_val = ord($string[$i]);\n \t\t\t\t\t$charval = 0;\n \t\t\t\t\tif ($char_ord_val < 0x80) {\n \t\t\t\t\t\t$charval = $char_ord_val;\n \t\t\t\t\t} elseif ((($char_ord_val & 0xF0) >> 4) == 0x0F  &&  $i+3 < $strlen) {\n \t\t\t\t\t\t$charval  = (($char_ord_val & 0x07) << 18);\n-\t\t\t\t\t\t$charval += ((ord($string{++$i}) & 0x3F) << 12);\n-\t\t\t\t\t\t$charval += ((ord($string{++$i}) & 0x3F) << 6);\n-\t\t\t\t\t\t$charval +=  (ord($string{++$i}) & 0x3F);\n+\t\t\t\t\t\t$charval += ((ord($string[++$i]) & 0x3F) << 12);\n+\t\t\t\t\t\t$charval += ((ord($string[++$i]) & 0x3F) << 6);\n+\t\t\t\t\t\t$charval +=  (ord($string[++$i]) & 0x3F);\n \t\t\t\t\t} elseif ((($char_ord_val & 0xE0) >> 5) == 0x07  &&  $i+2 < $strlen) {\n \t\t\t\t\t\t$charval  = (($char_ord_val & 0x0F) << 12);\n-\t\t\t\t\t\t$charval += ((ord($string{++$i}) & 0x3F) << 6);\n-\t\t\t\t\t\t$charval +=  (ord($string{++$i}) & 0x3F);\n+\t\t\t\t\t\t$charval += ((ord($string[++$i]) & 0x3F) << 6);\n+\t\t\t\t\t\t$charval +=  (ord($string[++$i]) & 0x3F);\n \t\t\t\t\t} elseif ((($char_ord_val & 0xC0) >> 6) == 0x03  &&  $i+1 < $strlen) {\n \t\t\t\t\t\t$charval  = (($char_ord_val & 0x1F) << 6);\n-\t\t\t\t\t\t$charval += (ord($string{++$i}) & 0x3F);\n+\t\t\t\t\t\t$charval += (ord($string[++$i]) & 0x3F);\n \t\t\t\t\t}\n \t\t\t\t\tif (($charval >= 32) && ($charval <= 127)) {\n \t\t\t\t\t\t$HTMLstring .= htmlentities(chr($charval));\n@@ -1051,8 +1051,8 @@\n \t\t\t\tbreak;\n \n \t\t\tcase 'UTF-16LE':\n-\t\t\t\tfor ($i = 0; $i < strlen($string); $i += 2) {\n-\t\t\t\t\t$charval = self::LittleEndian2Int(substr($string, $i, 2));\n+\t\t\t\tfor ($i = 0; $i < strlen((string) $string); $i += 2) {\n+\t\t\t\t\t$charval = self::LittleEndian2Int(substr((string) $string, $i, 2));\n \t\t\t\t\tif (($charval >= 32) && ($charval <= 127)) {\n \t\t\t\t\t\t$HTMLstring .= chr($charval);\n \t\t\t\t\t} else {\n@@ -1062,8 +1062,8 @@\n \t\t\t\tbreak;\n \n \t\t\tcase 'UTF-16BE':\n-\t\t\t\tfor ($i = 0; $i < strlen($string); $i += 2) {\n-\t\t\t\t\t$charval = self::BigEndian2Int(substr($string, $i, 2));\n+\t\t\t\tfor ($i = 0; $i < strlen((string) $string); $i += 2) {\n+\t\t\t\t\t$charval = self::BigEndian2Int(substr((string) $string, $i, 2));\n \t\t\t\t\tif (($charval >= 32) && ($charval <= 127)) {\n \t\t\t\t\t\t$HTMLstring .= chr($charval);\n \t\t\t\t\t} else {\n@@ -1082,7 +1082,7 @@\n \n \n \tpublic static function RGADnameLookup($namecode) {\n-\t\tstatic $RGADname = array();\n+\t\tstatic $RGADname = [];\n \t\tif (empty($RGADname)) {\n \t\t\t$RGADname[0] = 'not set';\n \t\t\t$RGADname[1] = 'Track Gain Adjustment';\n@@ -1089,12 +1089,12 @@\n \t\t\t$RGADname[2] = 'Album Gain Adjustment';\n \t\t}\n \n-\t\treturn (isset($RGADname[$namecode]) ? $RGADname[$namecode] : '');\n+\t\treturn ($RGADname[$namecode] ?? '');\n \t}\n \n \n \tpublic static function RGADoriginatorLookup($originatorcode) {\n-\t\tstatic $RGADoriginator = array();\n+\t\tstatic $RGADoriginator = [];\n \t\tif (empty($RGADoriginator)) {\n \t\t\t$RGADoriginator[0] = 'unspecified';\n \t\t\t$RGADoriginator[1] = 'pre-set by artist/producer/mastering engineer';\n@@ -1102,7 +1102,7 @@\n \t\t\t$RGADoriginator[3] = 'determined automatically';\n \t\t}\n \n-\t\treturn (isset($RGADoriginator[$originatorcode]) ? $RGADoriginator[$originatorcode] : '');\n+\t\treturn ($RGADoriginator[$originatorcode] ?? '');\n \t}\n \n \n@@ -1135,11 +1135,11 @@\n \t}\n \n \n-\tpublic static function GetDataImageSize($imgData, &$imageinfo=array()) {\n+\tpublic static function GetDataImageSize($imgData, &$imageinfo=[]) {\n \t\tstatic $tempdir = '';\n \t\tif (empty($tempdir)) {\n \t\t\t// yes this is ugly, feel free to suggest a better way\n-\t\t\trequire_once(dirname(__FILE__).'/getid3.php');\n+\t\t\trequire_once(__DIR__.'/getid3.php');\n \t\t\t$getid3_temp = new getID3();\n \t\t\t$tempdir = $getid3_temp->tempdir;\n \t\t\tunset($getid3_temp);\n@@ -1147,7 +1147,7 @@\n \t\t$GetDataImageSize = false;\n \t\tif ($tempfilename = tempnam($tempdir, 'gI3')) {\n \t\t\tif (is_writable($tempfilename) && is_file($tempfilename) && ($tmp = fopen($tempfilename, 'wb'))) {\n-\t\t\t\tfwrite($tmp, $imgData);\n+\t\t\t\tfwrite($tmp, (string) $imgData);\n \t\t\t\tfclose($tmp);\n \t\t\t\t$GetDataImageSize = @getimagesize($tempfilename, $imageinfo);\n \t\t\t}\n@@ -1158,11 +1158,11 @@\n \n \tpublic static function ImageExtFromMime($mime_type) {\n \t\t// temporary way, works OK for now, but should be reworked in the future\n-\t\treturn str_replace(array('image/', 'x-', 'jpeg'), array('', '', 'jpg'), $mime_type);\n+\t\treturn str_replace(['image/', 'x-', 'jpeg'], ['', '', 'jpg'], $mime_type);\n \t}\n \n \tpublic static function ImageTypesLookup($imagetypeid) {\n-\t\tstatic $ImageTypesLookup = array();\n+\t\tstatic $ImageTypesLookup = [];\n \t\tif (empty($ImageTypesLookup)) {\n \t\t\t$ImageTypesLookup[1]  = 'gif';\n \t\t\t$ImageTypesLookup[2]  = 'jpeg';\n@@ -1179,7 +1179,7 @@\n \t\t\t$ImageTypesLookup[13] = 'swc';\n \t\t\t$ImageTypesLookup[14] = 'iff';\n \t\t}\n-\t\treturn (isset($ImageTypesLookup[$imagetypeid]) ? $ImageTypesLookup[$imagetypeid] : '');\n+\t\treturn ($ImageTypesLookup[$imagetypeid] ?? '');\n \t}\n \n \tpublic static function CopyTagsToComments(&$ThisFileInfo) {\n@@ -1196,10 +1196,10 @@\n \n \t\t\t\t\t\t\t} elseif ($tagtype == 'id3v1') {\n \n-\t\t\t\t\t\t\t\t$newvaluelength = strlen(trim($value));\n+\t\t\t\t\t\t\t\t$newvaluelength = strlen(trim((string) $value));\n \t\t\t\t\t\t\t\tforeach ($ThisFileInfo['comments'][$tagname] as $existingkey => $existingvalue) {\n-\t\t\t\t\t\t\t\t\t$oldvaluelength = strlen(trim($existingvalue));\n-\t\t\t\t\t\t\t\t\tif (($newvaluelength <= $oldvaluelength) && (substr($existingvalue, 0, $newvaluelength) == trim($value))) {\n+\t\t\t\t\t\t\t\t\t$oldvaluelength = strlen(trim((string) $existingvalue));\n+\t\t\t\t\t\t\t\t\tif (($newvaluelength <= $oldvaluelength) && (substr((string) $existingvalue, 0, $newvaluelength) == trim((string) $value))) {\n \t\t\t\t\t\t\t\t\t\t// new value is identical but shorter-than (or equal-length to) one already in comments - skip\n \t\t\t\t\t\t\t\t\t\tbreak 2;\n \t\t\t\t\t\t\t\t\t}\n@@ -1207,18 +1207,18 @@\n \n \t\t\t\t\t\t\t} elseif (!is_array($value)) {\n \n-\t\t\t\t\t\t\t\t$newvaluelength = strlen(trim($value));\n+\t\t\t\t\t\t\t\t$newvaluelength = strlen(trim((string) $value));\n \t\t\t\t\t\t\t\tforeach ($ThisFileInfo['comments'][$tagname] as $existingkey => $existingvalue) {\n-\t\t\t\t\t\t\t\t\t$oldvaluelength = strlen(trim($existingvalue));\n-\t\t\t\t\t\t\t\t\tif (($newvaluelength > $oldvaluelength) && (substr(trim($value), 0, strlen($existingvalue)) == $existingvalue)) {\n-\t\t\t\t\t\t\t\t\t\t$ThisFileInfo['comments'][$tagname][$existingkey] = trim($value);\n+\t\t\t\t\t\t\t\t\t$oldvaluelength = strlen(trim((string) $existingvalue));\n+\t\t\t\t\t\t\t\t\tif (($newvaluelength > $oldvaluelength) && (str_starts_with(trim((string) $value), (string) $existingvalue))) {\n+\t\t\t\t\t\t\t\t\t\t$ThisFileInfo['comments'][$tagname][$existingkey] = trim((string) $value);\n \t\t\t\t\t\t\t\t\t\tbreak 2;\n \t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t}\n \n \t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tif (is_array($value) || empty($ThisFileInfo['comments'][$tagname]) || !in_array(trim($value), $ThisFileInfo['comments'][$tagname])) {\n-\t\t\t\t\t\t\t\t$value = (is_string($value) ? trim($value) : $value);\n+\t\t\t\t\t\t\tif (is_array($value) || empty($ThisFileInfo['comments'][$tagname]) || !in_array(trim((string) $value), $ThisFileInfo['comments'][$tagname])) {\n+\t\t\t\t\t\t\t\t$value = (is_string($value) ? trim((string) $value) : $value);\n \t\t\t\t\t\t\t\t$ThisFileInfo['comments'][$tagname][] = $value;\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n@@ -1251,11 +1251,11 @@\n \t\t// Cached\n \t\tstatic $cache;\n \t\tif (isset($cache[$file][$name])) {\n-\t\t\treturn (isset($cache[$file][$name][$key]) ? $cache[$file][$name][$key] : '');\n+\t\t\treturn ($cache[$file][$name][$key] ?? '');\n \t\t}\n \n \t\t// Init\n-\t\t$keylength  = strlen($key);\n+\t\t$keylength  = strlen((string) $key);\n \t\t$line_count = $end - $begin - 7;\n \n \t\t// Open php file\n@@ -1281,15 +1281,15 @@\n \n \t\t\t// METHOD B: cache all keys in this lookup - more memory but faster on next lookup of not-previously-looked-up key\n \t\t\t//$cache[$file][$name][substr($line, 0, $keylength)] = trim(substr($line, $keylength + 1));\n-\t\t\t$explodedLine = explode(\"\\t\", $line, 2);\n-\t\t\t$ThisKey   = (isset($explodedLine[0]) ? $explodedLine[0] : '');\n-\t\t\t$ThisValue = (isset($explodedLine[1]) ? $explodedLine[1] : '');\n-\t\t\t$cache[$file][$name][$ThisKey] = trim($ThisValue);\n+\t\t\t$explodedLine = explode(\"\\t\", (string) $line, 2);\n+\t\t\t$ThisKey   = ($explodedLine[0] ?? '');\n+\t\t\t$ThisValue = ($explodedLine[1] ?? '');\n+\t\t\t$cache[$file][$name][$ThisKey] = trim((string) $ThisValue);\n \t\t}\n \n \t\t// Close and return\n \t\tfclose($fp);\n-\t\treturn (isset($cache[$file][$name][$key]) ? $cache[$file][$name][$key] : '');\n+\t\treturn ($cache[$file][$name][$key] ?? '');\n \t}\n \n \tpublic static function IncludeDependency($filename, $sourcefile, $DieOnFailure=false) {\n@@ -1299,10 +1299,10 @@\n \t\t\tif (include_once($filename)) {\n \t\t\t\treturn true;\n \t\t\t} else {\n-\t\t\t\t$diemessage = basename($sourcefile).' depends on '.$filename.', which has errors';\n+\t\t\t\t$diemessage = basename((string) $sourcefile).' depends on '.$filename.', which has errors';\n \t\t\t}\n \t\t} else {\n-\t\t\t$diemessage = basename($sourcefile).' depends on '.$filename.', which is missing';\n+\t\t\t$diemessage = basename((string) $sourcefile).' depends on '.$filename.', which is missing';\n \t\t}\n \t\tif ($DieOnFailure) {\n \t\t\tthrow new Exception($diemessage);\n@@ -1313,7 +1313,7 @@\n \t}\n \n \tpublic static function trimNullByte($string) {\n-\t\treturn trim($string, \"\\x00\");\n+\t\treturn trim((string) $string, \"\\x00\");\n \t}\n \n \tpublic static function getFileSizeSyscall($path) {\n@@ -1326,14 +1326,14 @@\n \t\t\t\t$filesize = $file->Size();\n \t\t\t\tunset($filesystem, $file);\n \t\t\t} else {\n-\t\t\t\t$commandline = 'for %I in ('.escapeshellarg($path).') do @echo %~zI';\n+\t\t\t\t$commandline = 'for %I in ('.escapeshellarg((string) $path).') do @echo %~zI';\n \t\t\t}\n \t\t} else {\n-\t\t\t$commandline = 'ls -l '.escapeshellarg($path).' | awk \\'{print $5}\\'';\n+\t\t\t$commandline = 'ls -l '.escapeshellarg((string) $path).' | awk \\'{print $5}\\'';\n \t\t}\n \t\tif (isset($commandline)) {\n-\t\t\t$output = trim(`$commandline`);\n-\t\t\tif (ctype_digit($output)) {\n+\t\t\t$output = trim((string) `$commandline`);\n+\t\t\tif (ctype_digit((string) $output)) {\n \t\t\t\t$filesize = (float) $output;\n \t\t\t}\n \t\t}\n",
        "applied_rectors": [
          "Rector\\Php53\\Rector\\FuncCall\\DirNameFileConstantToDirConstantRector",
          "Rector\\Php53\\Rector\\Ternary\\TernaryToElvisRector",
          "Rector\\Php54\\Rector\\Array_\\LongArrayToShortArrayRector",
          "Rector\\Php56\\Rector\\FuncCall\\PowToExpRector",
          "Rector\\Php70\\Rector\\Break_\\BreakNotInLoopOrSwitchToReturnRector",
          "Rector\\Php70\\Rector\\Ternary\\TernaryToNullCoalescingRector",
          "Rector\\Php71\\Rector\\List_\\ListToArrayDestructRector",
          "Rector\\Php74\\Rector\\ArrayDimFetch\\CurlyToSquareBracketArrayStringRector",
          "Rector\\Php80\\Rector\\Identical\\StrStartsWithRector",
          "Rector\\Php80\\Rector\\NotIdentical\\StrContainsRector",
          "Rector\\Php81\\Rector\\FuncCall\\NullToStrictStringFuncCallArgRector",
          "Rector\\Php82\\Rector\\FuncCall\\Utf8DecodeEncodeToMbConvertEncodingRector"
        ]
      }
    ],
    "changed_files": [
      "selected_100_files/extra_large_1000_plus/001_getid3.lib.php"
    ]
  }
}