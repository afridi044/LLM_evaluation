{
  "file_path": "selected_100_files\\extra_large_1000_plus\\004_class-IXR.php",
  "rector_analysis": {
    "php_version_changes": 10,
    "rules_triggered": [
      "Rector\\DeadCode\\Rector\\StaticCall\\RemoveParentCallWithoutParentRector",
      "Rector\\Php52\\Rector\\Property\\VarToPublicPropertyRector",
      "Rector\\Php54\\Rector\\Array_\\LongArrayToShortArrayRector",
      "Rector\\Php70\\Rector\\ClassMethod\\Php4ConstructorRector",
      "Rector\\Php70\\Rector\\Ternary\\TernaryToNullCoalescingRector",
      "Rector\\Php80\\Rector\\Class_\\ClassPropertyAssignToConstructorPromotionRector",
      "Rector\\Php80\\Rector\\Identical\\StrStartsWithRector",
      "Rector\\Php80\\Rector\\NotIdentical\\StrContainsRector",
      "Rector\\Php81\\Rector\\FuncCall\\NullToStrictStringFuncCallArgRector",
      "Rector\\Php83\\Rector\\ClassMethod\\AddOverrideAttributeToOverriddenMethodsRector"
    ],
    "changes_by_php_version": {
      "php_52": 1,
      "php_54": 1,
      "php_70": 2,
      "php_80": 3,
      "php_81": 1,
      "php_83": 1
    },
    "has_diff": true,
    "diff_line_count": 535
  },
  "analysis_metadata": {
    "rector_version": "2.1.0",
    "analysis_date": "2025-08-31T05:17:46.032934",
    "file_size_kb": 32.1,
    "analysis_type": "version_specific_only"
  },
  "raw_rector_output": {
    "totals": {
      "changed_files": 1,
      "errors": 0
    },
    "file_diffs": [
      {
        "file": "selected_100_files/extra_large_1000_plus/004_class-IXR.php",
        "diff": "--- Original\n+++ New\n@@ -46,12 +46,10 @@\n  * @since 1.5.0\n  */\n class IXR_Value {\n-    var $data;\n-    var $type;\n+    public $type;\n \n-    function IXR_Value($data, $type = false)\n+    function __construct(public $data, $type = false)\n     {\n-        $this->data = $data;\n         if (!$type) {\n             $type = $this->calculateType();\n         }\n@@ -120,7 +118,7 @@\n                 return '<double>'.$this->data.'</double>';\n                 break;\n             case 'string':\n-                return '<string>'.htmlspecialchars($this->data).'</string>';\n+                return '<string>'.htmlspecialchars((string) $this->data).'</string>';\n                 break;\n             case 'array':\n                 $return = '<array><data>'.\"\\n\";\n@@ -133,7 +131,7 @@\n             case 'struct':\n                 $return = '<struct>'.\"\\n\";\n                 foreach ($this->data as $name => $value) {\n-\t\t\t\t\t$name = htmlspecialchars($name);\n+\t\t\t\t\t$name = htmlspecialchars((string) $name);\n                     $return .= \"  <member><name>$name</name><value>\";\n                     $return .= $value->getXml().\"</value></member>\\n\";\n                 }\n@@ -176,25 +174,25 @@\n  */\n class IXR_Message\n {\n-    var $message;\n-    var $messageType;  // methodCall / methodResponse / fault\n-    var $faultCode;\n-    var $faultString;\n-    var $methodName;\n-    var $params;\n+    public $message;\n+    public $messageType;  // methodCall / methodResponse / fault\n+    public $faultCode;\n+    public $faultString;\n+    public $methodName;\n+    public $params;\n \n     // Current variable stacks\n-    var $_arraystructs = array();   // The stack used to keep track of the current array/struct\n-    var $_arraystructstypes = array(); // Stack keeping track of if things are structs or array\n-    var $_currentStructName = array();  // A stack as well\n-    var $_param;\n-    var $_value;\n-    var $_currentTag;\n-    var $_currentTagContents;\n+    public $_arraystructs = [];   // The stack used to keep track of the current array/struct\n+    public $_arraystructstypes = []; // Stack keeping track of if things are structs or array\n+    public $_currentStructName = [];  // A stack as well\n+    public $_param;\n+    public $_value;\n+    public $_currentTag;\n+    public $_currentTagContents;\n     // The XML parser\n-    var $_parser;\n+    public $_parser;\n \n-    function IXR_Message($message)\n+    function __construct($message)\n     {\n         $this->message =& $message;\n     }\n@@ -203,7 +201,7 @@\n     {\n         // first remove the XML declaration\n         // merged from WP #10698 - this method avoids the RAM usage of preg_replace on very large messages\n-        $header = preg_replace( '/<\\?xml.*?\\?'.'>/s', '', substr( $this->message, 0, 100 ), 1 );\n+        $header = preg_replace( '/<\\?xml.*?\\?'.'>/s', '', substr( (string) $this->message, 0, 100 ), 1 );\n         $this->message = trim( substr_replace( $this->message, $header, 0, 100 ) );\n         if ( '' == $this->message ) {\n             return false;\n@@ -221,7 +219,7 @@\n         if ( '<!DOCTYPE' === strtoupper( $root_tag ) ) {\n             return false;\n         }\n-        if ( ! in_array( $root_tag, array( '<methodCall', '<methodResponse', '<fault' ) ) ) {\n+        if ( ! in_array( $root_tag, [ '<methodCall', '<methodResponse', '<fault' ] ) ) {\n             return false;\n         }\n \n@@ -279,11 +277,11 @@\n                 /* Deal with stacks of arrays and structs */\n             case 'data':    // data is to all intents and puposes more interesting than array\n                 $this->_arraystructstypes[] = 'array';\n-                $this->_arraystructs[] = array();\n+                $this->_arraystructs[] = [];\n                 break;\n             case 'struct':\n                 $this->_arraystructstypes[] = 'struct';\n-                $this->_arraystructs[] = array();\n+                $this->_arraystructs[] = [];\n                 break;\n         }\n     }\n@@ -299,34 +297,34 @@\n         switch($tag) {\n             case 'int':\n             case 'i4':\n-                $value = (int)trim($this->_currentTagContents);\n+                $value = (int)trim((string) $this->_currentTagContents);\n                 $valueFlag = true;\n                 break;\n             case 'double':\n-                $value = (double)trim($this->_currentTagContents);\n+                $value = (double)trim((string) $this->_currentTagContents);\n                 $valueFlag = true;\n                 break;\n             case 'string':\n-                $value = (string)trim($this->_currentTagContents);\n+                $value = (string)trim((string) $this->_currentTagContents);\n                 $valueFlag = true;\n                 break;\n             case 'dateTime.iso8601':\n-                $value = new IXR_Date(trim($this->_currentTagContents));\n+                $value = new IXR_Date(trim((string) $this->_currentTagContents));\n                 $valueFlag = true;\n                 break;\n             case 'value':\n                 // \"If no type is indicated, the type is string.\"\n-                if (trim($this->_currentTagContents) != '') {\n+                if (trim((string) $this->_currentTagContents) != '') {\n                     $value = (string)$this->_currentTagContents;\n                     $valueFlag = true;\n                 }\n                 break;\n             case 'boolean':\n-                $value = (boolean)trim($this->_currentTagContents);\n+                $value = (boolean)trim((string) $this->_currentTagContents);\n                 $valueFlag = true;\n                 break;\n             case 'base64':\n-                $value = base64_decode($this->_currentTagContents);\n+                $value = base64_decode((string) $this->_currentTagContents);\n                 $valueFlag = true;\n                 break;\n                 /* Deal with stacks of arrays and structs */\n@@ -340,10 +338,10 @@\n                 array_pop($this->_currentStructName);\n                 break;\n             case 'name':\n-                $this->_currentStructName[] = trim($this->_currentTagContents);\n+                $this->_currentStructName[] = trim((string) $this->_currentTagContents);\n                 break;\n             case 'methodName':\n-                $this->methodName = trim($this->_currentTagContents);\n+                $this->methodName = trim((string) $this->_currentTagContents);\n                 break;\n         }\n \n@@ -374,12 +372,12 @@\n  */\n class IXR_Server\n {\n-    var $data;\n-    var $callbacks = array();\n-    var $message;\n-    var $capabilities;\n+    public $data;\n+    public $callbacks = [];\n+    public $message;\n+    public $capabilities;\n \n-    function IXR_Server($callbacks = false, $data = false, $wait = false)\n+    function __construct($callbacks = false, $data = false, $wait = false)\n     {\n         $this->setCapabilities();\n         if ($callbacks) {\n@@ -456,7 +454,7 @@\n         }\n \n         // Are we dealing with a function or a method?\n-        if (is_string($method) && substr($method, 0, 5) == 'this:') {\n+        if (is_string($method) && str_starts_with($method, 'this:')) {\n             // It's a class method - check it exists\n             $method = substr($method, 5);\n             if (!method_exists($this, $method)) {\n@@ -468,7 +466,7 @@\n         } else {\n             // It's a function - does it exist?\n             if (is_array($method)) {\n-                if (!is_callable(array($method[0], $method[1]))) {\n+                if (!is_callable([$method[0], $method[1]])) {\n                     return new IXR_Error(-32601, 'server error. requested object method \"'.$method[1].'\" does not exist.');\n                 }\n             } else if (!function_exists($method)) {\n@@ -517,20 +515,20 @@\n     function setCapabilities()\n     {\n         // Initialises capabilities array\n-        $this->capabilities = array(\n-            'xmlrpc' => array(\n+        $this->capabilities = [\n+            'xmlrpc' => [\n                 'specUrl' => 'http://www.xmlrpc.com/spec',\n                 'specVersion' => 1\n-        ),\n-            'faults_interop' => array(\n+        ],\n+            'faults_interop' => [\n                 'specUrl' => 'http://xmlrpc-epi.sourceforge.net/specs/rfc.fault_codes.php',\n                 'specVersion' => 20010516\n-        ),\n-            'system.multicall' => array(\n+        ],\n+            'system.multicall' => [\n                 'specUrl' => 'http://www.xmlrpc.com/discuss/msgReader$1208',\n                 'specVersion' => 1\n-        ),\n-        );\n+        ],\n+        ];\n     }\n \n     function getCapabilities($args)\n@@ -555,7 +553,7 @@\n     function multiCall($methodcalls)\n     {\n         // See http://www.xmlrpc.com/discuss/msgReader$1208\n-        $return = array();\n+        $return = [];\n         foreach ($methodcalls as $call) {\n             $method = $call['methodName'];\n             $params = $call['params'];\n@@ -565,12 +563,12 @@\n                 $result = $this->call($method, $params);\n             }\n             if (is_a($result, 'IXR_Error')) {\n-                $return[] = array(\n+                $return[] = [\n                     'faultCode' => $result->code,\n                     'faultString' => $result->message\n-                );\n+                ];\n             } else {\n-                $return[] = array($result);\n+                $return[] = [$result];\n             }\n         }\n         return $return;\n@@ -585,14 +583,10 @@\n  */\n class IXR_Request\n {\n-    var $method;\n-    var $args;\n-    var $xml;\n+    public $xml;\n \n-    function IXR_Request($method, $args)\n+    function __construct(public $method, public $args)\n     {\n-        $this->method = $method;\n-        $this->args = $args;\n         $this->xml = <<<EOD\n <?xml version=\"1.0\"?>\n <methodCall>\n@@ -611,7 +605,7 @@\n \n     function getLength()\n     {\n-        return strlen($this->xml);\n+        return strlen((string) $this->xml);\n     }\n \n     function getXml()\n@@ -629,27 +623,26 @@\n  */\n class IXR_Client\n {\n-    var $server;\n-    var $port;\n-    var $path;\n-    var $useragent;\n-    var $response;\n-    var $message = false;\n-    var $debug = false;\n-    var $timeout;\n-    var $headers = array();\n+    public $server;\n+    public $port;\n+    public $path;\n+    public $useragent;\n+    public $response;\n+    public $message = false;\n+    public $debug = false;\n+    public $headers = [];\n \n     // Storage place for an error message\n-    var $error = false;\n+    public $error = false;\n \n-    function IXR_Client($server, $path = false, $port = 80, $timeout = 15)\n+    function __construct($server, $path = false, $port = 80, public $timeout = 15)\n     {\n         if (!$path) {\n             // Assume we have been given a URL instead\n-            $bits = parse_url($server);\n+            $bits = parse_url((string) $server);\n             $this->server = $bits['host'];\n-            $this->port = isset($bits['port']) ? $bits['port'] : 80;\n-            $this->path = isset($bits['path']) ? $bits['path'] : '/';\n+            $this->port = $bits['port'] ?? 80;\n+            $this->path = $bits['path'] ?? '/';\n \n             // Make absolutely sure we have a path\n             if (!$this->path) {\n@@ -665,7 +658,6 @@\n             $this->port = $port;\n         }\n         $this->useragent = 'The Incutio XML-RPC PHP Library';\n-        $this->timeout = $timeout;\n     }\n \n     function query()\n@@ -714,7 +706,7 @@\n             $line = fgets($fp, 4096);\n             if (!$gotFirstLine) {\n                 // Check line for '200'\n-                if (strstr($line, '200') === false) {\n+                if (!str_contains($line, '200')) {\n                     $this->error = new IXR_Error(-32300, 'transport error - HTTP status code was not 200');\n                     return false;\n                 }\n@@ -784,13 +776,11 @@\n  */\n class IXR_Error\n {\n-    var $code;\n-    var $message;\n+    public $message;\n \n-    function IXR_Error($code, $message)\n+    function __construct(public $code, $message)\n     {\n-        $this->code = $code;\n-        $this->message = htmlspecialchars($message);\n+        $this->message = htmlspecialchars((string) $message);\n     }\n \n     function getXml()\n@@ -825,15 +815,15 @@\n  * @since 1.5.0\n  */\n class IXR_Date {\n-    var $year;\n-    var $month;\n-    var $day;\n-    var $hour;\n-    var $minute;\n-    var $second;\n-    var $timezone;\n+    public $year;\n+    public $month;\n+    public $day;\n+    public $hour;\n+    public $minute;\n+    public $second;\n+    public $timezone;\n \n-    function IXR_Date($time)\n+    function __construct($time)\n     {\n         // $time can be a PHP timestamp or an ISO one\n         if (is_numeric($time)) {\n@@ -856,13 +846,13 @@\n \n     function parseIso($iso)\n     {\n-        $this->year = substr($iso, 0, 4);\n-        $this->month = substr($iso, 4, 2);\n-        $this->day = substr($iso, 6, 2);\n-        $this->hour = substr($iso, 9, 2);\n-        $this->minute = substr($iso, 12, 2);\n-        $this->second = substr($iso, 15, 2);\n-        $this->timezone = substr($iso, 17);\n+        $this->year = substr((string) $iso, 0, 4);\n+        $this->month = substr((string) $iso, 4, 2);\n+        $this->day = substr((string) $iso, 6, 2);\n+        $this->hour = substr((string) $iso, 9, 2);\n+        $this->minute = substr((string) $iso, 12, 2);\n+        $this->second = substr((string) $iso, 15, 2);\n+        $this->timezone = substr((string) $iso, 17);\n     }\n \n     function getIso()\n@@ -889,16 +879,13 @@\n  */\n class IXR_Base64\n {\n-    var $data;\n-\n-    function IXR_Base64($data)\n+    function __construct(public $data)\n     {\n-        $this->data = $data;\n     }\n \n     function getXml()\n     {\n-        return '<base64>'.base64_encode($this->data).'</base64>';\n+        return '<base64>'.base64_encode((string) $this->data).'</base64>';\n     }\n }\n \n@@ -910,39 +897,39 @@\n  */\n class IXR_IntrospectionServer extends IXR_Server\n {\n-    var $signatures;\n-    var $help;\n+    public $signatures;\n+    public $help;\n \n-    function IXR_IntrospectionServer()\n+    function __construct()\n     {\n         $this->setCallbacks();\n         $this->setCapabilities();\n-        $this->capabilities['introspection'] = array(\n+        $this->capabilities['introspection'] = [\n             'specUrl' => 'http://xmlrpc.usefulinc.com/doc/reserved.html',\n             'specVersion' => 1\n-        );\n+        ];\n         $this->addCallback(\n             'system.methodSignature',\n             'this:methodSignature',\n-            array('array', 'string'),\n+            ['array', 'string'],\n             'Returns an array describing the return type and required parameters of a method'\n         );\n         $this->addCallback(\n             'system.getCapabilities',\n             'this:getCapabilities',\n-            array('struct'),\n+            ['struct'],\n             'Returns a struct describing the XML-RPC specifications supported by this server'\n         );\n         $this->addCallback(\n             'system.listMethods',\n             'this:listMethods',\n-            array('array'),\n+            ['array'],\n             'Returns an array of available methods on this server'\n         );\n         $this->addCallback(\n             'system.methodHelp',\n             'this:methodHelp',\n-            array('string', 'string'),\n+            ['string', 'string'],\n             'Returns a documentation string for the specified method'\n         );\n     }\n@@ -954,11 +941,12 @@\n         $this->help[$method] = $help;\n     }\n \n+    #[\\Override]\n     function call($methodname, $args)\n     {\n         // Make sure it's in an array\n         if ($args && !is_array($args)) {\n-            $args = array($args);\n+            $args = [$args];\n         }\n \n         // Over-rides default call method, adds signature check\n@@ -1026,7 +1014,7 @@\n         }\n         // We should be returning an array of types\n         $types = $this->signatures[$method];\n-        $return = array();\n+        $return = [];\n         foreach ($types as $type) {\n             switch ($type) {\n                 case 'string':\n@@ -1049,10 +1037,10 @@\n                     $return[] = new IXR_Base64('base64');\n                     break;\n                 case 'array':\n-                    $return[] = array('array');\n+                    $return[] = ['array'];\n                     break;\n                 case 'struct':\n-                    $return[] = array('struct' => 'struct');\n+                    $return[] = ['struct' => 'struct'];\n                     break;\n             }\n         }\n@@ -1073,11 +1061,10 @@\n  */\n class IXR_ClientMulticall extends IXR_Client\n {\n-    var $calls = array();\n+    public $calls = [];\n \n-    function IXR_ClientMulticall($server, $path = false, $port = 80)\n+    function __construct($server, $path = false, $port = 80)\n     {\n-        parent::IXR_Client($server, $path, $port);\n         $this->useragent = 'The Incutio XML-RPC PHP Library (multicall client)';\n     }\n \n@@ -1085,13 +1072,14 @@\n     {\n         $args = func_get_args();\n         $methodName = array_shift($args);\n-        $struct = array(\n+        $struct = [\n             'methodName' => $methodName,\n             'params' => $args\n-        );\n+        ];\n         $this->calls[] = $struct;\n     }\n \n+    #[\\Override]\n     function query()\n     {\n         // Prepare multicall, then call the parent::query() method\n",
        "applied_rectors": [
          "Rector\\DeadCode\\Rector\\StaticCall\\RemoveParentCallWithoutParentRector",
          "Rector\\Php52\\Rector\\Property\\VarToPublicPropertyRector",
          "Rector\\Php54\\Rector\\Array_\\LongArrayToShortArrayRector",
          "Rector\\Php70\\Rector\\ClassMethod\\Php4ConstructorRector",
          "Rector\\Php70\\Rector\\Ternary\\TernaryToNullCoalescingRector",
          "Rector\\Php80\\Rector\\Class_\\ClassPropertyAssignToConstructorPromotionRector",
          "Rector\\Php80\\Rector\\Identical\\StrStartsWithRector",
          "Rector\\Php80\\Rector\\NotIdentical\\StrContainsRector",
          "Rector\\Php81\\Rector\\FuncCall\\NullToStrictStringFuncCallArgRector",
          "Rector\\Php83\\Rector\\ClassMethod\\AddOverrideAttributeToOverriddenMethodsRector"
        ]
      }
    ],
    "changed_files": [
      "selected_100_files/extra_large_1000_plus/004_class-IXR.php"
    ]
  }
}